/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BWAPI {

using System;
using System.Runtime.InteropServices;

public partial class UnitData : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal UnitData(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(UnitData obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~UnitData() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          bridgePINVOKE.delete_UnitData(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  
public override int GetHashCode()
{
   return this.swigCPtr.Handle.GetHashCode();
}

public override bool Equals(object obj)
{
    bool equal = false;
    if (obj is UnitData)
      equal = (((UnitData)obj).swigCPtr.Handle == this.swigCPtr.Handle);
    return equal;
}
  
public bool Equals(UnitData obj) 
{
    if (obj == null) return false;
    return (obj.swigCPtr.Handle == this.swigCPtr.Handle);
}

public static bool operator ==(UnitData obj1, UnitData obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return true;
    if (object.ReferenceEquals(obj1, null)) return false;
    if (object.ReferenceEquals(obj2, null)) return false;
   
    return obj1.Equals(obj2);
}

public static bool operator !=(UnitData obj1, UnitData obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return false;
    if (object.ReferenceEquals(obj1, null)) return true;
    if (object.ReferenceEquals(obj2, null)) return true;

    return !obj1.Equals(obj2);
}




  public int clearanceLevel {
    set {
      bridgePINVOKE.UnitData_clearanceLevel_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_clearanceLevel_get(swigCPtr);
      return ret;
    } 
  }

  public int id {
    set {
      bridgePINVOKE.UnitData_id_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_id_get(swigCPtr);
      return ret;
    } 
  }

  public int player {
    set {
      bridgePINVOKE.UnitData_player_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_player_get(swigCPtr);
      return ret;
    } 
  }

  public int type {
    set {
      bridgePINVOKE.UnitData_type_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_type_get(swigCPtr);
      return ret;
    } 
  }

  public int positionX {
    set {
      bridgePINVOKE.UnitData_positionX_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_positionX_get(swigCPtr);
      return ret;
    } 
  }

  public int positionY {
    set {
      bridgePINVOKE.UnitData_positionY_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_positionY_get(swigCPtr);
      return ret;
    } 
  }

  public double angle {
    set {
      bridgePINVOKE.UnitData_angle_set(swigCPtr, value);
    } 
    get {
      double ret = bridgePINVOKE.UnitData_angle_get(swigCPtr);
      return ret;
    } 
  }

  public double velocityX {
    set {
      bridgePINVOKE.UnitData_velocityX_set(swigCPtr, value);
    } 
    get {
      double ret = bridgePINVOKE.UnitData_velocityX_get(swigCPtr);
      return ret;
    } 
  }

  public double velocityY {
    set {
      bridgePINVOKE.UnitData_velocityY_set(swigCPtr, value);
    } 
    get {
      double ret = bridgePINVOKE.UnitData_velocityY_get(swigCPtr);
      return ret;
    } 
  }

  public int hitPoints {
    set {
      bridgePINVOKE.UnitData_hitPoints_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_hitPoints_get(swigCPtr);
      return ret;
    } 
  }

  public int lastHitPoints {
    set {
      bridgePINVOKE.UnitData_lastHitPoints_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_lastHitPoints_get(swigCPtr);
      return ret;
    } 
  }

  public int shields {
    set {
      bridgePINVOKE.UnitData_shields_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_shields_get(swigCPtr);
      return ret;
    } 
  }

  public int energy {
    set {
      bridgePINVOKE.UnitData_energy_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_energy_get(swigCPtr);
      return ret;
    } 
  }

  public int resources {
    set {
      bridgePINVOKE.UnitData_resources_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_resources_get(swigCPtr);
      return ret;
    } 
  }

  public int killCount {
    set {
      bridgePINVOKE.UnitData_killCount_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_killCount_get(swigCPtr);
      return ret;
    } 
  }

  public int scarabCount {
    set {
      bridgePINVOKE.UnitData_scarabCount_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_scarabCount_get(swigCPtr);
      return ret;
    } 
  }

  public int spiderMineCount {
    set {
      bridgePINVOKE.UnitData_spiderMineCount_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_spiderMineCount_get(swigCPtr);
      return ret;
    } 
  }

  public int groundWeaponCooldown {
    set {
      bridgePINVOKE.UnitData_groundWeaponCooldown_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_groundWeaponCooldown_get(swigCPtr);
      return ret;
    } 
  }

  public int airWeaponCooldown {
    set {
      bridgePINVOKE.UnitData_airWeaponCooldown_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_airWeaponCooldown_get(swigCPtr);
      return ret;
    } 
  }

  public int spellCooldown {
    set {
      bridgePINVOKE.UnitData_spellCooldown_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_spellCooldown_get(swigCPtr);
      return ret;
    } 
  }

  public int defenseMatrixPoints {
    set {
      bridgePINVOKE.UnitData_defenseMatrixPoints_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_defenseMatrixPoints_get(swigCPtr);
      return ret;
    } 
  }

  public int defenseMatrixTimer {
    set {
      bridgePINVOKE.UnitData_defenseMatrixTimer_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_defenseMatrixTimer_get(swigCPtr);
      return ret;
    } 
  }

  public int ensnareTimer {
    set {
      bridgePINVOKE.UnitData_ensnareTimer_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_ensnareTimer_get(swigCPtr);
      return ret;
    } 
  }

  public int irradiateTimer {
    set {
      bridgePINVOKE.UnitData_irradiateTimer_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_irradiateTimer_get(swigCPtr);
      return ret;
    } 
  }

  public int lockdownTimer {
    set {
      bridgePINVOKE.UnitData_lockdownTimer_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_lockdownTimer_get(swigCPtr);
      return ret;
    } 
  }

  public int maelstromTimer {
    set {
      bridgePINVOKE.UnitData_maelstromTimer_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_maelstromTimer_get(swigCPtr);
      return ret;
    } 
  }

  public int orderTimer {
    set {
      bridgePINVOKE.UnitData_orderTimer_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_orderTimer_get(swigCPtr);
      return ret;
    } 
  }

  public int plagueTimer {
    set {
      bridgePINVOKE.UnitData_plagueTimer_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_plagueTimer_get(swigCPtr);
      return ret;
    } 
  }

  public int removeTimer {
    set {
      bridgePINVOKE.UnitData_removeTimer_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_removeTimer_get(swigCPtr);
      return ret;
    } 
  }

  public int stasisTimer {
    set {
      bridgePINVOKE.UnitData_stasisTimer_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_stasisTimer_get(swigCPtr);
      return ret;
    } 
  }

  public int stimTimer {
    set {
      bridgePINVOKE.UnitData_stimTimer_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_stimTimer_get(swigCPtr);
      return ret;
    } 
  }

  public int buildType {
    set {
      bridgePINVOKE.UnitData_buildType_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_buildType_get(swigCPtr);
      return ret;
    } 
  }

  public int trainingQueueCount {
    set {
      bridgePINVOKE.UnitData_trainingQueueCount_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_trainingQueueCount_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int trainingQueue {
    set {
      bridgePINVOKE.UnitData_trainingQueue_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.UnitData_trainingQueue_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int tech {
    set {
      bridgePINVOKE.UnitData_tech_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_tech_get(swigCPtr);
      return ret;
    } 
  }

  public int upgrade {
    set {
      bridgePINVOKE.UnitData_upgrade_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_upgrade_get(swigCPtr);
      return ret;
    } 
  }

  public int remainingBuildTime {
    set {
      bridgePINVOKE.UnitData_remainingBuildTime_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_remainingBuildTime_get(swigCPtr);
      return ret;
    } 
  }

  public int remainingTrainTime {
    set {
      bridgePINVOKE.UnitData_remainingTrainTime_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_remainingTrainTime_get(swigCPtr);
      return ret;
    } 
  }

  public int remainingResearchTime {
    set {
      bridgePINVOKE.UnitData_remainingResearchTime_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_remainingResearchTime_get(swigCPtr);
      return ret;
    } 
  }

  public int remainingUpgradeTime {
    set {
      bridgePINVOKE.UnitData_remainingUpgradeTime_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_remainingUpgradeTime_get(swigCPtr);
      return ret;
    } 
  }

  public int buildUnit {
    set {
      bridgePINVOKE.UnitData_buildUnit_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_buildUnit_get(swigCPtr);
      return ret;
    } 
  }

  public int target {
    set {
      bridgePINVOKE.UnitData_target_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_target_get(swigCPtr);
      return ret;
    } 
  }

  public int targetPositionX {
    set {
      bridgePINVOKE.UnitData_targetPositionX_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_targetPositionX_get(swigCPtr);
      return ret;
    } 
  }

  public int targetPositionY {
    set {
      bridgePINVOKE.UnitData_targetPositionY_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_targetPositionY_get(swigCPtr);
      return ret;
    } 
  }

  public int order {
    set {
      bridgePINVOKE.UnitData_order_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_order_get(swigCPtr);
      return ret;
    } 
  }

  public int orderTarget {
    set {
      bridgePINVOKE.UnitData_orderTarget_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_orderTarget_get(swigCPtr);
      return ret;
    } 
  }

  public int secondaryOrder {
    set {
      bridgePINVOKE.UnitData_secondaryOrder_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_secondaryOrder_get(swigCPtr);
      return ret;
    } 
  }

  public int rallyPositionX {
    set {
      bridgePINVOKE.UnitData_rallyPositionX_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_rallyPositionX_get(swigCPtr);
      return ret;
    } 
  }

  public int rallyPositionY {
    set {
      bridgePINVOKE.UnitData_rallyPositionY_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_rallyPositionY_get(swigCPtr);
      return ret;
    } 
  }

  public int rallyUnit {
    set {
      bridgePINVOKE.UnitData_rallyUnit_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_rallyUnit_get(swigCPtr);
      return ret;
    } 
  }

  public int addon {
    set {
      bridgePINVOKE.UnitData_addon_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_addon_get(swigCPtr);
      return ret;
    } 
  }

  public int nydusExit {
    set {
      bridgePINVOKE.UnitData_nydusExit_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_nydusExit_get(swigCPtr);
      return ret;
    } 
  }

  public int transport {
    set {
      bridgePINVOKE.UnitData_transport_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_transport_get(swigCPtr);
      return ret;
    } 
  }

  public int carrier {
    set {
      bridgePINVOKE.UnitData_carrier_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_carrier_get(swigCPtr);
      return ret;
    } 
  }

  public int hatchery {
    set {
      bridgePINVOKE.UnitData_hatchery_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_hatchery_get(swigCPtr);
      return ret;
    } 
  }

  public bool exists {
    set {
      bridgePINVOKE.UnitData_exists_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_exists_get(swigCPtr);
      return ret;
    } 
  }

  public bool hasNuke {
    set {
      bridgePINVOKE.UnitData_hasNuke_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_hasNuke_get(swigCPtr);
      return ret;
    } 
  }

  public bool isAccelerating {
    set {
      bridgePINVOKE.UnitData_isAccelerating_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_isAccelerating_get(swigCPtr);
      return ret;
    } 
  }

  public bool isAttacking {
    set {
      bridgePINVOKE.UnitData_isAttacking_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_isAttacking_get(swigCPtr);
      return ret;
    } 
  }

  public bool isBeingGathered {
    set {
      bridgePINVOKE.UnitData_isBeingGathered_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_isBeingGathered_get(swigCPtr);
      return ret;
    } 
  }

  public bool isBlind {
    set {
      bridgePINVOKE.UnitData_isBlind_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_isBlind_get(swigCPtr);
      return ret;
    } 
  }

  public bool isBraking {
    set {
      bridgePINVOKE.UnitData_isBraking_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_isBraking_get(swigCPtr);
      return ret;
    } 
  }

  public bool isBurrowed {
    set {
      bridgePINVOKE.UnitData_isBurrowed_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_isBurrowed_get(swigCPtr);
      return ret;
    } 
  }

  public int carryResourceType {
    set {
      bridgePINVOKE.UnitData_carryResourceType_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.UnitData_carryResourceType_get(swigCPtr);
      return ret;
    } 
  }

  public bool isCloaked {
    set {
      bridgePINVOKE.UnitData_isCloaked_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_isCloaked_get(swigCPtr);
      return ret;
    } 
  }

  public bool isCompleted {
    set {
      bridgePINVOKE.UnitData_isCompleted_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_isCompleted_get(swigCPtr);
      return ret;
    } 
  }

  public bool isConstructing {
    set {
      bridgePINVOKE.UnitData_isConstructing_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_isConstructing_get(swigCPtr);
      return ret;
    } 
  }

  public bool isDetected {
    set {
      bridgePINVOKE.UnitData_isDetected_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_isDetected_get(swigCPtr);
      return ret;
    } 
  }

  public bool isGathering {
    set {
      bridgePINVOKE.UnitData_isGathering_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_isGathering_get(swigCPtr);
      return ret;
    } 
  }

  public bool isHallucination {
    set {
      bridgePINVOKE.UnitData_isHallucination_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_isHallucination_get(swigCPtr);
      return ret;
    } 
  }

  public bool isIdle {
    set {
      bridgePINVOKE.UnitData_isIdle_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_isIdle_get(swigCPtr);
      return ret;
    } 
  }

  public bool isLifted {
    set {
      bridgePINVOKE.UnitData_isLifted_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_isLifted_get(swigCPtr);
      return ret;
    } 
  }

  public bool isMorphing {
    set {
      bridgePINVOKE.UnitData_isMorphing_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_isMorphing_get(swigCPtr);
      return ret;
    } 
  }

  public bool isMoving {
    set {
      bridgePINVOKE.UnitData_isMoving_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_isMoving_get(swigCPtr);
      return ret;
    } 
  }

  public bool isParasited {
    set {
      bridgePINVOKE.UnitData_isParasited_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_isParasited_get(swigCPtr);
      return ret;
    } 
  }

  public bool isSelected {
    set {
      bridgePINVOKE.UnitData_isSelected_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_isSelected_get(swigCPtr);
      return ret;
    } 
  }

  public bool isStartingAttack {
    set {
      bridgePINVOKE.UnitData_isStartingAttack_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_isStartingAttack_get(swigCPtr);
      return ret;
    } 
  }

  public bool isTraining {
    set {
      bridgePINVOKE.UnitData_isTraining_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_isTraining_get(swigCPtr);
      return ret;
    } 
  }

  public bool isUnderStorm {
    set {
      bridgePINVOKE.UnitData_isUnderStorm_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_isUnderStorm_get(swigCPtr);
      return ret;
    } 
  }

  public bool isUnpowered {
    set {
      bridgePINVOKE.UnitData_isUnpowered_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.UnitData_isUnpowered_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_bool isVisible {
    set {
      bridgePINVOKE.UnitData_isVisible_set(swigCPtr, SWIGTYPE_p_bool.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.UnitData_isVisible_get(swigCPtr);
      SWIGTYPE_p_bool ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_bool(cPtr, false);
      return ret;
    } 
  }

  public UnitData() : this(bridgePINVOKE.new_UnitData(), true) {
  }

}

}
