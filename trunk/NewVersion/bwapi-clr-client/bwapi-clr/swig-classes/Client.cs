/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BWAPI {

using System;
using System.Runtime.InteropServices;

public partial class Client : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Client(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Client obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Client() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          bridgePINVOKE.delete_Client(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  
public override int GetHashCode()
{
   return this.swigCPtr.Handle.GetHashCode();
}

public override bool Equals(object obj)
{
    bool equal = false;
    if (obj is Client)
      equal = (((Client)obj).swigCPtr.Handle == this.swigCPtr.Handle);
    return equal;
}
  
public bool Equals(Client obj) 
{
    if (obj == null) return false;
    return (obj.swigCPtr.Handle == this.swigCPtr.Handle);
}

public static bool operator ==(Client obj1, Client obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return true;
    if (object.ReferenceEquals(obj1, null)) return false;
    if (object.ReferenceEquals(obj2, null)) return false;
   
    return obj1.Equals(obj2);
}

public static bool operator !=(Client obj1, Client obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return false;
    if (object.ReferenceEquals(obj1, null)) return true;
    if (object.ReferenceEquals(obj2, null)) return true;

    return !obj1.Equals(obj2);
}




  public Client() : this(bridgePINVOKE.new_Client(), true) {
  }

  public GameData data {
    set {
      bridgePINVOKE.Client_data_set(swigCPtr, GameData.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.Client_data_get(swigCPtr);
      GameData ret = (cPtr == IntPtr.Zero) ? null : new GameData(cPtr, false);
      return ret;
    } 
  }

  public bool isConnected() {
    bool ret = bridgePINVOKE.Client_isConnected(swigCPtr);
    return ret;
  }

  public bool connect() {
    bool ret = bridgePINVOKE.Client_connect(swigCPtr);
    return ret;
  }

  public void disconnect() {
    bridgePINVOKE.Client_disconnect(swigCPtr);
  }

  public void update() {
    bridgePINVOKE.Client_update(swigCPtr);
  }

}

}
