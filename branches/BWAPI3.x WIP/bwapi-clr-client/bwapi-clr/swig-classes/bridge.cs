/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BWAPI {

using System;
using System.Runtime.InteropServices;

public class bridge {
  public static void BWAPI_init() {
    bridgePINVOKE.BWAPI_init();
  }

  public static GameType getGameType(string name) {
    GameType ret = new GameType(bridgePINVOKE.getGameType(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static GameTypeSet allGameTypes() {
    GameTypeSet ret = new GameTypeSet(bridgePINVOKE.allGameTypes(), false);
    return ret;
  }

  public static void GameTypes_init() {
    bridgePINVOKE.GameTypes_init();
  }

  public static GameType GameTypes_Melee {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypes_Melee_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypes_Free_For_All {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypes_Free_For_All_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypes_One_on_One {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypes_One_on_One_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypes_Capture_The_Flag {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypes_Capture_The_Flag_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypes_Greed {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypes_Greed_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypes_Slaughter {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypes_Slaughter_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypes_Sudden_Death {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypes_Sudden_Death_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypes_Ladder {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypes_Ladder_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypes_Use_Map_Settings {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypes_Use_Map_Settings_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypes_Team_Melee {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypes_Team_Melee_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypes_Team_Free_For_All {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypes_Team_Free_For_All_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypes_Team_Capture_The_Flag {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypes_Team_Capture_The_Flag_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypes_Top_vs_Bottom {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypes_Top_vs_Bottom_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypes_Pro_Gamer_League {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypes_Pro_Gamer_League_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypes_None {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypes_None_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypes_Unknown {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypes_Unknown_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static Race getRace(string name) {
    Race ret = new Race(bridgePINVOKE.getRace(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RaceSet allRaces() {
    RaceSet ret = new RaceSet(bridgePINVOKE.allRaces(), false);
    return ret;
  }

  public static void Races_init() {
    bridgePINVOKE.Races_init();
  }

  public static Race Races_Zerg {
    get {
      IntPtr cPtr = bridgePINVOKE.Races_Zerg_get();
      Race ret = (cPtr == IntPtr.Zero) ? null : new Race(cPtr, false);
      return ret;
    } 
  }

  public static Race Races_Terran {
    get {
      IntPtr cPtr = bridgePINVOKE.Races_Terran_get();
      Race ret = (cPtr == IntPtr.Zero) ? null : new Race(cPtr, false);
      return ret;
    } 
  }

  public static Race Races_Protoss {
    get {
      IntPtr cPtr = bridgePINVOKE.Races_Protoss_get();
      Race ret = (cPtr == IntPtr.Zero) ? null : new Race(cPtr, false);
      return ret;
    } 
  }

  public static Race Races_Random {
    get {
      IntPtr cPtr = bridgePINVOKE.Races_Random_get();
      Race ret = (cPtr == IntPtr.Zero) ? null : new Race(cPtr, false);
      return ret;
    } 
  }

  public static Race Races_Other {
    get {
      IntPtr cPtr = bridgePINVOKE.Races_Other_get();
      Race ret = (cPtr == IntPtr.Zero) ? null : new Race(cPtr, false);
      return ret;
    } 
  }

  public static Race Races_None {
    get {
      IntPtr cPtr = bridgePINVOKE.Races_None_get();
      Race ret = (cPtr == IntPtr.Zero) ? null : new Race(cPtr, false);
      return ret;
    } 
  }

  public static Race Races_Unknown {
    get {
      IntPtr cPtr = bridgePINVOKE.Races_Unknown_get();
      Race ret = (cPtr == IntPtr.Zero) ? null : new Race(cPtr, false);
      return ret;
    } 
  }

  public static TechType getTechType(string name) {
    TechType ret = new TechType(bridgePINVOKE.getTechType(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TechTypeSet allTechTypes() {
    TechTypeSet ret = new TechTypeSet(bridgePINVOKE.allTechTypes(), false);
    return ret;
  }

  public static void TechTypes_init() {
    bridgePINVOKE.TechTypes_init();
  }

  public static TechType TechTypes_Stim_Packs {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Stim_Packs_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Lockdown {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Lockdown_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_EMP_Shockwave {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_EMP_Shockwave_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Spider_Mines {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Spider_Mines_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Scanner_Sweep {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Scanner_Sweep_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Tank_Siege_Mode {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Tank_Siege_Mode_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Defensive_Matrix {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Defensive_Matrix_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Irradiate {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Irradiate_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Yamato_Gun {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Yamato_Gun_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Cloaking_Field {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Cloaking_Field_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Personnel_Cloaking {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Personnel_Cloaking_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Burrowing {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Burrowing_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Infestation {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Infestation_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Spawn_Broodlings {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Spawn_Broodlings_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Dark_Swarm {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Dark_Swarm_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Plague {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Plague_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Consume {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Consume_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Ensnare {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Ensnare_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Parasite {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Parasite_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Psionic_Storm {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Psionic_Storm_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Hallucination {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Hallucination_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Recall {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Recall_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Stasis_Field {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Stasis_Field_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Archon_Warp {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Archon_Warp_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Restoration {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Restoration_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Disruption_Web {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Disruption_Web_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Mind_Control {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Mind_Control_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Dark_Archon_Meld {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Dark_Archon_Meld_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Feedback {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Feedback_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Optical_Flare {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Optical_Flare_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Maelstrom {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Maelstrom_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Lurker_Aspect {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Lurker_Aspect_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Healing {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Healing_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_None {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_None_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Unknown {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Unknown_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypes_Nuclear_Strike {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypes_Nuclear_Strike_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType getUpgradeType(string name) {
    UpgradeType ret = new UpgradeType(bridgePINVOKE.getUpgradeType(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UpgradeTypeSet allUpgradeTypes() {
    UpgradeTypeSet ret = new UpgradeTypeSet(bridgePINVOKE.allUpgradeTypes(), false);
    return ret;
  }

  public static void UpgradeTypes_init() {
    bridgePINVOKE.UpgradeTypes_init();
  }

  public static UpgradeType UpgradeTypes_Terran_Infantry_Armor {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Terran_Infantry_Armor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Terran_Vehicle_Plating {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Terran_Vehicle_Plating_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Terran_Ship_Plating {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Terran_Ship_Plating_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Zerg_Carapace {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Zerg_Carapace_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Zerg_Flyer_Carapace {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Zerg_Flyer_Carapace_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Protoss_Ground_Armor {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Protoss_Ground_Armor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Protoss_Air_Armor {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Protoss_Air_Armor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Terran_Infantry_Weapons {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Terran_Infantry_Weapons_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Terran_Vehicle_Weapons {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Terran_Vehicle_Weapons_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Terran_Ship_Weapons {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Terran_Ship_Weapons_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Zerg_Melee_Attacks {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Zerg_Melee_Attacks_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Zerg_Missile_Attacks {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Zerg_Missile_Attacks_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Zerg_Flyer_Attacks {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Zerg_Flyer_Attacks_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Protoss_Ground_Weapons {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Protoss_Ground_Weapons_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Protoss_Air_Weapons {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Protoss_Air_Weapons_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Protoss_Plasma_Shields {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Protoss_Plasma_Shields_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_U_238_Shells {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_U_238_Shells_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Ion_Thrusters {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Ion_Thrusters_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Titan_Reactor {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Titan_Reactor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Ocular_Implants {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Ocular_Implants_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Moebius_Reactor {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Moebius_Reactor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Apollo_Reactor {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Apollo_Reactor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Colossus_Reactor {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Colossus_Reactor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Ventral_Sacs {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Ventral_Sacs_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Antennae {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Antennae_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Pneumatized_Carapace {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Pneumatized_Carapace_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Metabolic_Boost {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Metabolic_Boost_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Adrenal_Glands {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Adrenal_Glands_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Muscular_Augments {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Muscular_Augments_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Grooved_Spines {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Grooved_Spines_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Gamete_Meiosis {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Gamete_Meiosis_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Metasynaptic_Node {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Metasynaptic_Node_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Singularity_Charge {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Singularity_Charge_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Leg_Enhancements {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Leg_Enhancements_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Scarab_Damage {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Scarab_Damage_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Reaver_Capacity {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Reaver_Capacity_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Gravitic_Drive {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Gravitic_Drive_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Sensor_Array {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Sensor_Array_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Gravitic_Boosters {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Gravitic_Boosters_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Khaydarin_Amulet {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Khaydarin_Amulet_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Apial_Sensors {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Apial_Sensors_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Gravitic_Thrusters {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Gravitic_Thrusters_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Carrier_Capacity {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Carrier_Capacity_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Khaydarin_Core {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Khaydarin_Core_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Argus_Jewel {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Argus_Jewel_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Argus_Talisman {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Argus_Talisman_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Caduceus_Reactor {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Caduceus_Reactor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Chitinous_Plating {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Chitinous_Plating_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Anabolic_Synthesis {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Anabolic_Synthesis_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Charon_Boosters {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Charon_Boosters_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_None {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_None_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypes_Unknown {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypes_Unknown_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static Position Positions_Invalid {
    get {
      IntPtr cPtr = bridgePINVOKE.Positions_Invalid_get();
      Position ret = (cPtr == IntPtr.Zero) ? null : new Position(cPtr, false);
      return ret;
    } 
  }

  public static Position Positions_None {
    get {
      IntPtr cPtr = bridgePINVOKE.Positions_None_get();
      Position ret = (cPtr == IntPtr.Zero) ? null : new Position(cPtr, false);
      return ret;
    } 
  }

  public static Position Positions_Unknown {
    get {
      IntPtr cPtr = bridgePINVOKE.Positions_Unknown_get();
      Position ret = (cPtr == IntPtr.Zero) ? null : new Position(cPtr, false);
      return ret;
    } 
  }

  public static void Colors_init() {
    bridgePINVOKE.Colors_init();
  }

  public static Color Colors_Red {
    get {
      IntPtr cPtr = bridgePINVOKE.Colors_Red_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public static Color Colors_Blue {
    get {
      IntPtr cPtr = bridgePINVOKE.Colors_Blue_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public static Color Colors_Teal {
    get {
      IntPtr cPtr = bridgePINVOKE.Colors_Teal_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public static Color Colors_Purple {
    get {
      IntPtr cPtr = bridgePINVOKE.Colors_Purple_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public static Color Colors_Orange {
    get {
      IntPtr cPtr = bridgePINVOKE.Colors_Orange_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public static Color Colors_Brown {
    get {
      IntPtr cPtr = bridgePINVOKE.Colors_Brown_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public static Color Colors_White {
    get {
      IntPtr cPtr = bridgePINVOKE.Colors_White_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public static Color Colors_Yellow {
    get {
      IntPtr cPtr = bridgePINVOKE.Colors_Yellow_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public static Color Colors_Green {
    get {
      IntPtr cPtr = bridgePINVOKE.Colors_Green_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public static Color Colors_Cyan {
    get {
      IntPtr cPtr = bridgePINVOKE.Colors_Cyan_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public static Color Colors_Black {
    get {
      IntPtr cPtr = bridgePINVOKE.Colors_Black_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public static Color Colors_Grey {
    get {
      IntPtr cPtr = bridgePINVOKE.Colors_Grey_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public static DamageType getDamageType(string name) {
    DamageType ret = new DamageType(bridgePINVOKE.getDamageType(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DamageTypeSet allDamageTypes() {
    DamageTypeSet ret = new DamageTypeSet(bridgePINVOKE.allDamageTypes(), false);
    return ret;
  }

  public static void DamageTypes_init() {
    bridgePINVOKE.DamageTypes_init();
  }

  public static DamageType DamageTypes_Independent {
    get {
      IntPtr cPtr = bridgePINVOKE.DamageTypes_Independent_get();
      DamageType ret = (cPtr == IntPtr.Zero) ? null : new DamageType(cPtr, false);
      return ret;
    } 
  }

  public static DamageType DamageTypes_Explosive {
    get {
      IntPtr cPtr = bridgePINVOKE.DamageTypes_Explosive_get();
      DamageType ret = (cPtr == IntPtr.Zero) ? null : new DamageType(cPtr, false);
      return ret;
    } 
  }

  public static DamageType DamageTypes_Concussive {
    get {
      IntPtr cPtr = bridgePINVOKE.DamageTypes_Concussive_get();
      DamageType ret = (cPtr == IntPtr.Zero) ? null : new DamageType(cPtr, false);
      return ret;
    } 
  }

  public static DamageType DamageTypes_Normal {
    get {
      IntPtr cPtr = bridgePINVOKE.DamageTypes_Normal_get();
      DamageType ret = (cPtr == IntPtr.Zero) ? null : new DamageType(cPtr, false);
      return ret;
    } 
  }

  public static DamageType DamageTypes_Ignore_Armor {
    get {
      IntPtr cPtr = bridgePINVOKE.DamageTypes_Ignore_Armor_get();
      DamageType ret = (cPtr == IntPtr.Zero) ? null : new DamageType(cPtr, false);
      return ret;
    } 
  }

  public static DamageType DamageTypes_None {
    get {
      IntPtr cPtr = bridgePINVOKE.DamageTypes_None_get();
      DamageType ret = (cPtr == IntPtr.Zero) ? null : new DamageType(cPtr, false);
      return ret;
    } 
  }

  public static DamageType DamageTypes_Unknown {
    get {
      IntPtr cPtr = bridgePINVOKE.DamageTypes_Unknown_get();
      DamageType ret = (cPtr == IntPtr.Zero) ? null : new DamageType(cPtr, false);
      return ret;
    } 
  }

  public static Error getError(string name) {
    Error ret = new Error(bridgePINVOKE.getError(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ErrorSet allErrors() {
    ErrorSet ret = new ErrorSet(bridgePINVOKE.allErrors(), false);
    return ret;
  }

  public static void Errors_init() {
    bridgePINVOKE.Errors_init();
  }

  public static Error Errors_Unit_Does_Not_Exist {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_Unit_Does_Not_Exist_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Errors_Unit_Not_Visible {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_Unit_Not_Visible_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Errors_Unit_Not_Owned {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_Unit_Not_Owned_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Errors_Unit_Busy {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_Unit_Busy_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Errors_Incompatible_UnitType {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_Incompatible_UnitType_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Errors_Incompatible_TechType {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_Incompatible_TechType_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Errors_Already_Researched {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_Already_Researched_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Errors_Fully_Upgraded {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_Fully_Upgraded_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Errors_Currently_Researching {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_Currently_Researching_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Errors_Currently_Upgrading {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_Currently_Upgrading_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Errors_Insufficient_Minerals {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_Insufficient_Minerals_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Errors_Insufficient_Gas {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_Insufficient_Gas_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Errors_Insufficient_Supply {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_Insufficient_Supply_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Errors_Insufficient_Energy {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_Insufficient_Energy_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Errors_Insufficient_Tech {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_Insufficient_Tech_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Errors_Insufficient_Ammo {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_Insufficient_Ammo_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Errors_Insufficient_Space {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_Insufficient_Space_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Errors_Unbuildable_Location {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_Unbuildable_Location_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Errors_Out_Of_Range {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_Out_Of_Range_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Errors_Unable_To_Hit {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_Unable_To_Hit_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Errors_Access_Denied {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_Access_Denied_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Errors_None {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_None_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Errors_Unknown {
    get {
      IntPtr cPtr = bridgePINVOKE.Errors_Unknown_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType getExplosionType(string name) {
    ExplosionType ret = new ExplosionType(bridgePINVOKE.getExplosionType(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplosionTypeSet allExplosionTypes() {
    ExplosionTypeSet ret = new ExplosionTypeSet(bridgePINVOKE.allExplosionTypes(), false);
    return ret;
  }

  public static void ExplosionTypes_init() {
    bridgePINVOKE.ExplosionTypes_init();
  }

  public static ExplosionType ExplosionTypes_None {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_None_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Normal {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Normal_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Radial_Splash {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Radial_Splash_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Enemy_Splash {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Enemy_Splash_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Lockdown {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Lockdown_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Nuclear_Missile {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Nuclear_Missile_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Parasite {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Parasite_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Broodlings {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Broodlings_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_EMP_Shockwave {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_EMP_Shockwave_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Irradiate {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Irradiate_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Ensnare {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Ensnare_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Plague {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Plague_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Stasis_Field {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Stasis_Field_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Dark_Swarm {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Dark_Swarm_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Consume {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Consume_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Yamato_Gun {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Yamato_Gun_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Restoration {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Restoration_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Disruption_Web {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Disruption_Web_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Corrosive_Acid {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Corrosive_Acid_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Mind_Control {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Mind_Control_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Feedback {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Feedback_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Optical_Flare {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Optical_Flare_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Maelstrom {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Maelstrom_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Air_Splash {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Air_Splash_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypes_Unknown {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypes_Unknown_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static Game Broodwar {
    set {
      bridgePINVOKE.Broodwar_set(Game.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.Broodwar_get();
      Game ret = (cPtr == IntPtr.Zero) ? null : new Game(cPtr, false);
      return ret;
    } 
  }

  public static Order getOrder(string name) {
    Order ret = new Order(bridgePINVOKE.getOrder(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OrderSet allOrders() {
    OrderSet ret = new OrderSet(bridgePINVOKE.allOrders(), false);
    return ret;
  }

  public static void Orders_init() {
    bridgePINVOKE.Orders_init();
  }

  public static Order Orders_Die {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Die_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Stop {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Stop_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Guard {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Guard_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_PlayerGuard {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_PlayerGuard_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_TurretGuard {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_TurretGuard_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_BunkerGuard {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_BunkerGuard_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Move {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Move_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_AttackUnit {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_AttackUnit_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_AttackTile {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_AttackTile_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Hover {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Hover_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_AttackMove {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_AttackMove_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_InfestedCommandCenter {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_InfestedCommandCenter_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_UnusedNothing {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_UnusedNothing_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_UnusedPowerup {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_UnusedPowerup_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_TowerGuard {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_TowerGuard_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_VultureMine {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_VultureMine_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Nothing {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Nothing_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Nothing3 {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Nothing3_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastInfestation {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastInfestation_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_InfestingCommandCenter {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_InfestingCommandCenter_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_PlaceBuilding {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_PlaceBuilding_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_BuildProtoss2 {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_BuildProtoss2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_ConstructingBuilding {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_ConstructingBuilding_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Repair {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Repair_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_PlaceAddon {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_PlaceAddon_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_BuildAddon {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_BuildAddon_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Train {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Train_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_RallyPointUnit {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_RallyPointUnit_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_RallyPointTile {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_RallyPointTile_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_ZergBirth {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_ZergBirth_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_ZergUnitMorph {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_ZergUnitMorph_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_ZergBuildingMorph {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_ZergBuildingMorph_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_IncompleteBuilding {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_IncompleteBuilding_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_BuildNydusExit {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_BuildNydusExit_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_EnterNydusCanal {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_EnterNydusCanal_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Follow {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Follow_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Carrier {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Carrier_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_ReaverCarrierMove {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_ReaverCarrierMove_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CarrierIgnore2 {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CarrierIgnore2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Reaver {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Reaver_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_TrainFighter {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_TrainFighter_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_InterceptorAttack {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_InterceptorAttack_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_ScarabAttack {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_ScarabAttack_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_RechargeShieldsUnit {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_RechargeShieldsUnit_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_RechargeShieldsBattery {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_RechargeShieldsBattery_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_ShieldBattery {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_ShieldBattery_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_InterceptorReturn {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_InterceptorReturn_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_BuildingLand {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_BuildingLand_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_BuildingLiftOff {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_BuildingLiftOff_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_DroneLiftOff {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_DroneLiftOff_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_LiftingOff {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_LiftingOff_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_ResearchTech {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_ResearchTech_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Upgrade {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Upgrade_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Larva {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Larva_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_SpawningLarva {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_SpawningLarva_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Harvest1 {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Harvest1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Harvest2 {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Harvest2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_MoveToGas {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_MoveToGas_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_WaitForGas {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_WaitForGas_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_HarvestGas {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_HarvestGas_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_ReturnGas {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_ReturnGas_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_MoveToMinerals {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_MoveToMinerals_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_WaitForMinerals {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_WaitForMinerals_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_MiningMinerals {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_MiningMinerals_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Harvest3 {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Harvest3_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Harvest4 {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Harvest4_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_ReturnMinerals {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_ReturnMinerals_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Interrupted {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Interrupted_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_EnterTransport {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_EnterTransport_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_PickupIdle {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_PickupIdle_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_PickupTransport {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_PickupTransport_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_PickupBunker {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_PickupBunker_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Pickup4 {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Pickup4_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_PowerupIdle {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_PowerupIdle_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Sieging {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Sieging_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Unsieging {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Unsieging_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_InitCreepGrowth {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_InitCreepGrowth_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_SpreadCreep {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_SpreadCreep_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_StoppingCreepGrowth {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_StoppingCreepGrowth_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_GuardianAspect {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_GuardianAspect_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_ArchonWarp {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_ArchonWarp_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CompletingArchonsummon {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CompletingArchonsummon_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_HoldPosition {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_HoldPosition_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Cloak {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Cloak_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Decloak {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Decloak_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Unload {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Unload_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_MoveUnload {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_MoveUnload_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_FireYamatoGun {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_FireYamatoGun_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastLockdown {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastLockdown_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Burrowing {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Burrowing_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Burrowed {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Burrowed_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Unburrowing {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Unburrowing_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastDarkSwarm {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastDarkSwarm_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastParasite {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastParasite_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastSpawnBroodlings {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastSpawnBroodlings_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastEMPShockwave {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastEMPShockwave_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_NukeWait {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_NukeWait_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_NukeTrain {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_NukeTrain_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_NukeLaunch {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_NukeLaunch_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_NukeUnit {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_NukeUnit_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastNuclearStrike {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastNuclearStrike_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_NukeTrack {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_NukeTrack_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CloakNearbyUnits {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CloakNearbyUnits_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_PlaceMine {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_PlaceMine_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_RightClickAction {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_RightClickAction_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastRecall {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastRecall_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_TeleporttoLocation {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_TeleporttoLocation_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastScannerSweep {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastScannerSweep_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Scanner {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Scanner_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastDefensiveMatrix {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastDefensiveMatrix_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastPsionicStorm {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastPsionicStorm_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastIrradiate {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastIrradiate_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastPlague {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastPlague_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastConsume {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastConsume_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastEnsnare {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastEnsnare_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastStasisField {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastStasisField_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastHallucination {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastHallucination_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Hallucination2 {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Hallucination2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_ResetCollision {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_ResetCollision_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Patrol {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Patrol_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CTFCOPInit {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CTFCOPInit_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CTFCOP1 {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CTFCOP1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CTFCOP2 {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CTFCOP2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_ComputerAI {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_ComputerAI_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_AtkMoveEP {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_AtkMoveEP_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_HarassMove {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_HarassMove_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_AIPatrol {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_AIPatrol_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_GuardPost {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_GuardPost_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_RescuePassive {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_RescuePassive_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Neutral {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Neutral_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_ComputerReturn {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_ComputerReturn_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_SelfDestrucing {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_SelfDestrucing_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Critter {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Critter_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_HiddenGun {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_HiddenGun_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_OpenDoor {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_OpenDoor_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CloseDoor {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CloseDoor_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_HideTrap {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_HideTrap_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_RevealTrap {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_RevealTrap_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Enabledoodad {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Enabledoodad_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Disabledoodad {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Disabledoodad_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Warpin {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Warpin_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Medic {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Medic_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_MedicHeal1 {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_MedicHeal1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_HealMove {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_HealMove_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_MedicHeal2 {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_MedicHeal2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastRestoration {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastRestoration_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastDisruptionWeb {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastDisruptionWeb_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastMindControl {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastMindControl_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_DarkArchonMeld {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_DarkArchonMeld_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastFeedback {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastFeedback_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastOpticalFlare {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastOpticalFlare_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_CastMaelstrom {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_CastMaelstrom_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_JunkYardDog {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_JunkYardDog_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Fatal {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Fatal_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_None {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_None_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Orders_Unknown {
    get {
      IntPtr cPtr = bridgePINVOKE.Orders_Unknown_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType getPlayerType(string name) {
    PlayerType ret = new PlayerType(bridgePINVOKE.getPlayerType(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PlayerTypeSet allPlayerTypes() {
    PlayerTypeSet ret = new PlayerTypeSet(bridgePINVOKE.allPlayerTypes(), false);
    return ret;
  }

  public static void PlayerTypes_init() {
    bridgePINVOKE.PlayerTypes_init();
  }

  public static PlayerType PlayerTypes_None {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerTypes_None_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypes_Computer {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerTypes_Computer_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypes_Player {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerTypes_Player_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypes_RescuePassive {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerTypes_RescuePassive_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypes_EitherPreferComputer {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerTypes_EitherPreferComputer_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypes_EitherPreferHuman {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerTypes_EitherPreferHuman_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypes_Neutral {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerTypes_Neutral_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypes_Closed {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerTypes_Closed_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypes_PlayerLeft {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerTypes_PlayerLeft_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypes_ComputerLeft {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerTypes_ComputerLeft_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypes_Unknown {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerTypes_Unknown_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType getBulletType(string name) {
    BulletType ret = new BulletType(bridgePINVOKE.getBulletType(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BulletTypeSet allBulletTypes() {
    BulletTypeSet ret = new BulletTypeSet(bridgePINVOKE.allBulletTypes(), false);
    return ret;
  }

  public static void init() {
    bridgePINVOKE.init();
  }

  public static BulletType Melee {
    get {
      IntPtr cPtr = bridgePINVOKE.Melee_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Fusion_Cutter_Hit {
    get {
      IntPtr cPtr = bridgePINVOKE.Fusion_Cutter_Hit_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Gauss_Rifle_Hit {
    get {
      IntPtr cPtr = bridgePINVOKE.Gauss_Rifle_Hit_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType C_10_Canister_Rifle_Hit {
    get {
      IntPtr cPtr = bridgePINVOKE.C_10_Canister_Rifle_Hit_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Gemini_Missiles {
    get {
      IntPtr cPtr = bridgePINVOKE.Gemini_Missiles_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Fragmentation_Grenade {
    get {
      IntPtr cPtr = bridgePINVOKE.Fragmentation_Grenade_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Longbolt_Missile {
    get {
      IntPtr cPtr = bridgePINVOKE.Longbolt_Missile_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType ATS_ATA_Laser_Battery {
    get {
      IntPtr cPtr = bridgePINVOKE.ATS_ATA_Laser_Battery_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Burst_Lasers {
    get {
      IntPtr cPtr = bridgePINVOKE.Burst_Lasers_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Arclite_Shock_Cannon_Hit {
    get {
      IntPtr cPtr = bridgePINVOKE.Arclite_Shock_Cannon_Hit_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType EMP_Missile {
    get {
      IntPtr cPtr = bridgePINVOKE.EMP_Missile_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Dual_Photon_Blasters_Hit {
    get {
      IntPtr cPtr = bridgePINVOKE.Dual_Photon_Blasters_Hit_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Particle_Beam_Hit {
    get {
      IntPtr cPtr = bridgePINVOKE.Particle_Beam_Hit_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Anti_Matter_Missile {
    get {
      IntPtr cPtr = bridgePINVOKE.Anti_Matter_Missile_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Pulse_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKE.Pulse_Cannon_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Psionic_Shockwave_Hit {
    get {
      IntPtr cPtr = bridgePINVOKE.Psionic_Shockwave_Hit_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Psionic_Storm {
    get {
      IntPtr cPtr = bridgePINVOKE.Psionic_Storm_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Yamato_Gun {
    get {
      IntPtr cPtr = bridgePINVOKE.Yamato_Gun_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Phase_Disruptor {
    get {
      IntPtr cPtr = bridgePINVOKE.Phase_Disruptor_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType STA_STS_Cannon_Overlay {
    get {
      IntPtr cPtr = bridgePINVOKE.STA_STS_Cannon_Overlay_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Sunken_Colony_Tentacle {
    get {
      IntPtr cPtr = bridgePINVOKE.Sunken_Colony_Tentacle_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Acid_Spore {
    get {
      IntPtr cPtr = bridgePINVOKE.Acid_Spore_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Glave_Wurm {
    get {
      IntPtr cPtr = bridgePINVOKE.Glave_Wurm_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Seeker_Spores {
    get {
      IntPtr cPtr = bridgePINVOKE.Seeker_Spores_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Queen_Spell_Carrier {
    get {
      IntPtr cPtr = bridgePINVOKE.Queen_Spell_Carrier_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Plague_Cloud {
    get {
      IntPtr cPtr = bridgePINVOKE.Plague_Cloud_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Consume {
    get {
      IntPtr cPtr = bridgePINVOKE.Consume_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Needle_Spine_Hit {
    get {
      IntPtr cPtr = bridgePINVOKE.Needle_Spine_Hit_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Invisible {
    get {
      IntPtr cPtr = bridgePINVOKE.Invisible_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Optical_Flare_Grenade {
    get {
      IntPtr cPtr = bridgePINVOKE.Optical_Flare_Grenade_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Halo_Rockets {
    get {
      IntPtr cPtr = bridgePINVOKE.Halo_Rockets_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Subterranean_Spines {
    get {
      IntPtr cPtr = bridgePINVOKE.Subterranean_Spines_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Corrosive_Acid_Shot {
    get {
      IntPtr cPtr = bridgePINVOKE.Corrosive_Acid_Shot_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Neutron_Flare {
    get {
      IntPtr cPtr = bridgePINVOKE.Neutron_Flare_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType None {
    get {
      IntPtr cPtr = bridgePINVOKE.None_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType Unknown {
    get {
      IntPtr cPtr = bridgePINVOKE.Unknown_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static TilePosition TilePositions_Invalid {
    get {
      IntPtr cPtr = bridgePINVOKE.TilePositions_Invalid_get();
      TilePosition ret = (cPtr == IntPtr.Zero) ? null : new TilePosition(cPtr, false);
      return ret;
    } 
  }

  public static TilePosition TilePositions_None {
    get {
      IntPtr cPtr = bridgePINVOKE.TilePositions_None_get();
      TilePosition ret = (cPtr == IntPtr.Zero) ? null : new TilePosition(cPtr, false);
      return ret;
    } 
  }

  public static TilePosition TilePositions_Unknown {
    get {
      IntPtr cPtr = bridgePINVOKE.TilePositions_Unknown_get();
      TilePosition ret = (cPtr == IntPtr.Zero) ? null : new TilePosition(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType getUnitCommandType(string name) {
    UnitCommandType ret = new UnitCommandType(bridgePINVOKE.getUnitCommandType(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UnitCommandTypeSet allUnitCommandTypes() {
    UnitCommandTypeSet ret = new UnitCommandTypeSet(bridgePINVOKE.allUnitCommandTypes(), false);
    return ret;
  }

  public static void UnitCommandTypes_init() {
    bridgePINVOKE.UnitCommandTypes_init();
  }

  public static UnitCommandType UnitCommandTypes_Attack_Move {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Attack_Move_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Attack_Unit {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Attack_Unit_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Build {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Build_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Build_Addon {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Build_Addon_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Train {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Train_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Morph {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Morph_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Research {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Research_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Upgrade {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Upgrade_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Set_Rally_Position {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Set_Rally_Position_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Set_Rally_Unit {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Set_Rally_Unit_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Move {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Move_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Patrol {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Patrol_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Hold_Position {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Hold_Position_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Stop {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Stop_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Follow {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Follow_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Gather {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Gather_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Return_Cargo {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Return_Cargo_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Repair {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Repair_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Burrow {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Burrow_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Unburrow {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Unburrow_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Cloak {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Cloak_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Decloak {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Decloak_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Siege {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Siege_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Unsiege {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Unsiege_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Lift {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Lift_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Land {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Land_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Load {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Load_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Unload {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Unload_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Unload_All {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Unload_All_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Unload_All_Position {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Unload_All_Position_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Right_Click_Position {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Right_Click_Position_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Right_Click_Unit {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Right_Click_Unit_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Halt_Construction {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Halt_Construction_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Cancel_Construction {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Cancel_Construction_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Cancel_Addon {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Cancel_Addon_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Cancel_Train {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Cancel_Train_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Cancel_Train_Slot {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Cancel_Train_Slot_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Cancel_Morph {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Cancel_Morph_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Cancel_Research {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Cancel_Research_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Cancel_Upgrade {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Cancel_Upgrade_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Use_Tech {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Use_Tech_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Use_Tech_Position {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Use_Tech_Position_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Use_Tech_Unit {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Use_Tech_Unit_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_None {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_None_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypes_Unknown {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypes_Unknown_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitSizeType getUnitSizeType(string name) {
    UnitSizeType ret = new UnitSizeType(bridgePINVOKE.getUnitSizeType(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UnitSizeTypeSet allUnitSizeTypes() {
    UnitSizeTypeSet ret = new UnitSizeTypeSet(bridgePINVOKE.allUnitSizeTypes(), false);
    return ret;
  }

  public static void UnitSizeTypes_init() {
    bridgePINVOKE.UnitSizeTypes_init();
  }

  public static UnitSizeType UnitSizeTypes_Independent {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitSizeTypes_Independent_get();
      UnitSizeType ret = (cPtr == IntPtr.Zero) ? null : new UnitSizeType(cPtr, false);
      return ret;
    } 
  }

  public static UnitSizeType UnitSizeTypes_Small {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitSizeTypes_Small_get();
      UnitSizeType ret = (cPtr == IntPtr.Zero) ? null : new UnitSizeType(cPtr, false);
      return ret;
    } 
  }

  public static UnitSizeType UnitSizeTypes_Medium {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitSizeTypes_Medium_get();
      UnitSizeType ret = (cPtr == IntPtr.Zero) ? null : new UnitSizeType(cPtr, false);
      return ret;
    } 
  }

  public static UnitSizeType UnitSizeTypes_Large {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitSizeTypes_Large_get();
      UnitSizeType ret = (cPtr == IntPtr.Zero) ? null : new UnitSizeType(cPtr, false);
      return ret;
    } 
  }

  public static UnitSizeType UnitSizeTypes_None {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitSizeTypes_None_get();
      UnitSizeType ret = (cPtr == IntPtr.Zero) ? null : new UnitSizeType(cPtr, false);
      return ret;
    } 
  }

  public static UnitSizeType UnitSizeTypes_Unknown {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitSizeTypes_Unknown_get();
      UnitSizeType ret = (cPtr == IntPtr.Zero) ? null : new UnitSizeType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType getUnitType(string name) {
    UnitType ret = new UnitType(bridgePINVOKE.getUnitType(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UnitTypeSet allUnitTypes() {
    UnitTypeSet ret = new UnitTypeSet(bridgePINVOKE.allUnitTypes(), false);
    return ret;
  }

  public static void UnitTypes_init() {
    bridgePINVOKE.UnitTypes_init();
  }

  public static UnitType UnitTypes_Terran_Marine {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Marine_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Ghost {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Ghost_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Vulture {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Vulture_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Goliath {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Goliath_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Siege_Tank_Tank_Mode {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Siege_Tank_Tank_Mode_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_SCV {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_SCV_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Wraith {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Wraith_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Science_Vessel {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Science_Vessel_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Dropship {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Dropship_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Battlecruiser {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Battlecruiser_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Vulture_Spider_Mine {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Vulture_Spider_Mine_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Nuclear_Missile {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Nuclear_Missile_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Siege_Tank_Siege_Mode {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Siege_Tank_Siege_Mode_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Firebat {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Firebat_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Spell_Scanner_Sweep {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Spell_Scanner_Sweep_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Medic {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Medic_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Larva {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Larva_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Egg {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Egg_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Zergling {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Zergling_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Hydralisk {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Hydralisk_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Ultralisk {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Ultralisk_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Broodling {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Broodling_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Drone {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Drone_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Overlord {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Overlord_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Mutalisk {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Mutalisk_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Guardian {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Guardian_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Queen {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Queen_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Defiler {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Defiler_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Scourge {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Scourge_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Infested_Terran {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Infested_Terran_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Valkyrie {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Valkyrie_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Cocoon {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Cocoon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Corsair {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Corsair_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Dark_Templar {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Dark_Templar_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Devourer {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Devourer_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Dark_Archon {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Dark_Archon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Probe {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Probe_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Zealot {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Zealot_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Dragoon {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Dragoon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_High_Templar {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_High_Templar_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Archon {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Archon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Shuttle {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Shuttle_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Scout {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Scout_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Arbiter {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Arbiter_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Carrier {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Carrier_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Interceptor {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Interceptor_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Reaver {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Reaver_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Observer {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Observer_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Scarab {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Scarab_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Critter_Rhynadon {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Critter_Rhynadon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Critter_Bengalaas {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Critter_Bengalaas_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Critter_Scantid {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Critter_Scantid_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Critter_Kakaru {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Critter_Kakaru_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Critter_Ragnasaur {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Critter_Ragnasaur_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Critter_Ursadon {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Critter_Ursadon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Lurker_Egg {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Lurker_Egg_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Lurker {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Lurker_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Spell_Disruption_Web {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Spell_Disruption_Web_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Command_Center {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Command_Center_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Comsat_Station {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Comsat_Station_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Nuclear_Silo {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Nuclear_Silo_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Supply_Depot {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Supply_Depot_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Refinery {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Refinery_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Barracks {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Barracks_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Academy {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Academy_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Factory {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Factory_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Starport {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Starport_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Control_Tower {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Control_Tower_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Science_Facility {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Science_Facility_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Covert_Ops {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Covert_Ops_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Physics_Lab {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Physics_Lab_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Machine_Shop {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Machine_Shop_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Engineering_Bay {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Engineering_Bay_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Armory {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Armory_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Missile_Turret {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Missile_Turret_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Terran_Bunker {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Terran_Bunker_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Special_Crashed_Norad_II {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Special_Crashed_Norad_II_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Special_Ion_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Special_Ion_Cannon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Infested_Command_Center {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Infested_Command_Center_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Hatchery {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Hatchery_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Lair {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Lair_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Hive {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Hive_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Nydus_Canal {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Nydus_Canal_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Hydralisk_Den {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Hydralisk_Den_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Defiler_Mound {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Defiler_Mound_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Greater_Spire {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Greater_Spire_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Queens_Nest {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Queens_Nest_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Evolution_Chamber {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Evolution_Chamber_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Ultralisk_Cavern {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Ultralisk_Cavern_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Spire {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Spire_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Spawning_Pool {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Spawning_Pool_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Creep_Colony {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Creep_Colony_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Spore_Colony {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Spore_Colony_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Sunken_Colony {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Sunken_Colony_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Special_Overmind_With_Shell {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Special_Overmind_With_Shell_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Special_Overmind {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Special_Overmind_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Zerg_Extractor {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Zerg_Extractor_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Special_Mature_Chrysalis {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Special_Mature_Chrysalis_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Special_Cerebrate {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Special_Cerebrate_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Special_Cerebrate_Daggoth {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Special_Cerebrate_Daggoth_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Nexus {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Nexus_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Robotics_Facility {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Robotics_Facility_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Pylon {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Pylon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Assimilator {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Assimilator_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Observatory {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Observatory_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Gateway {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Gateway_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Photon_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Photon_Cannon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Citadel_of_Adun {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Citadel_of_Adun_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Cybernetics_Core {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Cybernetics_Core_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Templar_Archives {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Templar_Archives_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Forge {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Forge_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Stargate {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Stargate_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Special_Stasis_Cell_Prison {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Special_Stasis_Cell_Prison_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Fleet_Beacon {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Fleet_Beacon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Arbiter_Tribunal {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Arbiter_Tribunal_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Robotics_Support_Bay {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Robotics_Support_Bay_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Protoss_Shield_Battery {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Protoss_Shield_Battery_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Special_Khaydarin_Crystal_Form {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Special_Khaydarin_Crystal_Form_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Special_Protoss_Temple {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Special_Protoss_Temple_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Special_XelNaga_Temple {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Special_XelNaga_Temple_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Resource_Mineral_Field {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Resource_Mineral_Field_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Resource_Vespene_Geyser {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Resource_Vespene_Geyser_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Special_Warp_Gate {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Special_Warp_Gate_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Special_Psi_Disrupter {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Special_Psi_Disrupter_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Special_Power_Generator {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Special_Power_Generator_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Special_Overmind_Cocoon {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Special_Overmind_Cocoon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Spell_Dark_Swarm {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Spell_Dark_Swarm_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_None {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_None_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypes_Unknown {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypes_Unknown_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType getWeaponType(string name) {
    WeaponType ret = new WeaponType(bridgePINVOKE.getWeaponType(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WeaponTypeSet allWeaponTypes() {
    WeaponTypeSet ret = new WeaponTypeSet(bridgePINVOKE.allWeaponTypes(), false);
    return ret;
  }

  public static WeaponTypeSet normalWeaponTypes() {
    WeaponTypeSet ret = new WeaponTypeSet(bridgePINVOKE.normalWeaponTypes(), false);
    return ret;
  }

  public static WeaponTypeSet specialWeaponTypes() {
    WeaponTypeSet ret = new WeaponTypeSet(bridgePINVOKE.specialWeaponTypes(), false);
    return ret;
  }

  public static void WeaponTypes_init() {
    bridgePINVOKE.WeaponTypes_init();
  }

  public static WeaponType WeaponTypes_Gauss_Rifle {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Gauss_Rifle_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_C_10_Canister_Rifle {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_C_10_Canister_Rifle_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Fragmentation_Grenade {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Fragmentation_Grenade_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Spider_Mines {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Spider_Mines_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Twin_Autocannons {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Twin_Autocannons_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Hellfire_Missile_Pack {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Hellfire_Missile_Pack_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Arclite_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Arclite_Cannon_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Fusion_Cutter {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Fusion_Cutter_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Gemini_Missiles {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Gemini_Missiles_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Burst_Lasers {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Burst_Lasers_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_ATS_Laser_Battery {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_ATS_Laser_Battery_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_ATA_Laser_Battery {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_ATA_Laser_Battery_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Flame_Thrower {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Flame_Thrower_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Arclite_Shock_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Arclite_Shock_Cannon_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Longbolt_Missile {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Longbolt_Missile_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Claws {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Claws_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Needle_Spines {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Needle_Spines_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Kaiser_Blades {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Kaiser_Blades_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Toxic_Spores {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Toxic_Spores_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Spines {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Spines_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Acid_Spore {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Acid_Spore_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Glave_Wurm {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Glave_Wurm_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Seeker_Spores {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Seeker_Spores_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Subterranean_Tentacle {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Subterranean_Tentacle_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Suicide_Infested_Terran {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Suicide_Infested_Terran_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Suicide_Scourge {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Suicide_Scourge_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Particle_Beam {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Particle_Beam_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Psi_Blades {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Psi_Blades_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Phase_Disruptor {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Phase_Disruptor_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Psionic_Shockwave {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Psionic_Shockwave_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Dual_Photon_Blasters {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Dual_Photon_Blasters_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Anti_Matter_Missiles {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Anti_Matter_Missiles_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Phase_Disruptor_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Phase_Disruptor_Cannon_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Pulse_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Pulse_Cannon_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_STS_Photon_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_STS_Photon_Cannon_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_STA_Photon_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_STA_Photon_Cannon_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Scarab {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Scarab_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Neutron_Flare {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Neutron_Flare_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Halo_Rockets {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Halo_Rockets_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Corrosive_Acid {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Corrosive_Acid_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Subterranean_Spines {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Subterranean_Spines_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Warp_Blades {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Warp_Blades_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Yamato_Gun {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Yamato_Gun_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Nuclear_Strike {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Nuclear_Strike_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Lockdown {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Lockdown_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_EMP_Shockwave {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_EMP_Shockwave_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Irradiate {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Irradiate_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Parasite {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Parasite_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Spawn_Broodlings {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Spawn_Broodlings_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Ensnare {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Ensnare_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Dark_Swarm {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Dark_Swarm_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Plague {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Plague_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Consume {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Consume_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Stasis_Field {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Stasis_Field_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Psionic_Storm {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Psionic_Storm_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Disruption_Web {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Disruption_Web_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Restoration {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Restoration_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Mind_Control {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Mind_Control_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Feedback {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Feedback_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Optical_Flare {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Optical_Flare_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Maelstrom {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Maelstrom_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_None {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_None_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypes_Unknown {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypes_Unknown_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static Client BWAPIClient {
    set {
      bridgePINVOKE.BWAPIClient_set(Client.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.BWAPIClient_get();
      Client ret = (cPtr == IntPtr.Zero) ? null : new Client(cPtr, false);
      return ret;
    } 
  }

  public static void readMap() {
    bridgePINVOKE.readMap();
  }

  public static void analyze() {
    bridgePINVOKE.analyze();
  }

  public static RegionPtrSet getRegions() {
    RegionPtrSet ret = new RegionPtrSet(bridgePINVOKE.getRegions(), false);
    return ret;
  }

  public static ChokepointPtrSet getChokepoints() {
    ChokepointPtrSet ret = new ChokepointPtrSet(bridgePINVOKE.getChokepoints(), false);
    return ret;
  }

  public static BaseLocationPtrSet getBaseLocations() {
    BaseLocationPtrSet ret = new BaseLocationPtrSet(bridgePINVOKE.getBaseLocations(), false);
    return ret;
  }

  public static BaseLocationPtrSet getStartLocations() {
    BaseLocationPtrSet ret = new BaseLocationPtrSet(bridgePINVOKE.getStartLocations(), false);
    return ret;
  }

  public static PolygonPtrSet getUnwalkablePolygons() {
    PolygonPtrSet ret = new PolygonPtrSet(bridgePINVOKE.getUnwalkablePolygons(), false);
    return ret;
  }

  public static BaseLocation getStartLocation(Player player) {
    IntPtr cPtr = bridgePINVOKE.getStartLocation(Player.getCPtr(player));
    BaseLocation ret = (cPtr == IntPtr.Zero) ? null : new BaseLocation(cPtr, false);
    return ret;
  }

  public static Region getRegion(int x, int y) {
    IntPtr cPtr = bridgePINVOKE.getRegion__SWIG_0(x, y);
    Region ret = (cPtr == IntPtr.Zero) ? null : new Region(cPtr, false);
    return ret;
  }

  public static Region getRegion(TilePosition tileposition) {
    IntPtr cPtr = bridgePINVOKE.getRegion__SWIG_1(TilePosition.getCPtr(tileposition));
    Region ret = (cPtr == IntPtr.Zero) ? null : new Region(cPtr, false);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Chokepoint getNearestChokepoint(int x, int y) {
    IntPtr cPtr = bridgePINVOKE.getNearestChokepoint__SWIG_0(x, y);
    Chokepoint ret = (cPtr == IntPtr.Zero) ? null : new Chokepoint(cPtr, false);
    return ret;
  }

  public static Chokepoint getNearestChokepoint(TilePosition tileposition) {
    IntPtr cPtr = bridgePINVOKE.getNearestChokepoint__SWIG_1(TilePosition.getCPtr(tileposition));
    Chokepoint ret = (cPtr == IntPtr.Zero) ? null : new Chokepoint(cPtr, false);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BaseLocation getNearestBaseLocation(int x, int y) {
    IntPtr cPtr = bridgePINVOKE.getNearestBaseLocation__SWIG_0(x, y);
    BaseLocation ret = (cPtr == IntPtr.Zero) ? null : new BaseLocation(cPtr, false);
    return ret;
  }

  public static BaseLocation getNearestBaseLocation(TilePosition tileposition) {
    IntPtr cPtr = bridgePINVOKE.getNearestBaseLocation__SWIG_1(TilePosition.getCPtr(tileposition));
    BaseLocation ret = (cPtr == IntPtr.Zero) ? null : new BaseLocation(cPtr, false);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Polygon getNearestUnwalkablePolygon(int x, int y) {
    IntPtr cPtr = bridgePINVOKE.getNearestUnwalkablePolygon__SWIG_0(x, y);
    Polygon ret = (cPtr == IntPtr.Zero) ? null : new Polygon(cPtr, false);
    return ret;
  }

  public static Polygon getNearestUnwalkablePolygon(TilePosition tileposition) {
    IntPtr cPtr = bridgePINVOKE.getNearestUnwalkablePolygon__SWIG_1(TilePosition.getCPtr(tileposition));
    Polygon ret = (cPtr == IntPtr.Zero) ? null : new Polygon(cPtr, false);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Position getNearestUnwalkablePosition(Position position) {
    Position ret = new Position(bridgePINVOKE.getNearestUnwalkablePosition(Position.getCPtr(position)), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isConnected(int x1, int y1, int x2, int y2) {
    bool ret = bridgePINVOKE.isConnected__SWIG_0(x1, y1, x2, y2);
    return ret;
  }

  public static bool isConnected(TilePosition a, TilePosition b) {
    bool ret = bridgePINVOKE.isConnected__SWIG_1(TilePosition.getCPtr(a), TilePosition.getCPtr(b));
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getGroundDistance(TilePosition start, TilePosition end) {
    double ret = bridgePINVOKE.getGroundDistance(TilePosition.getCPtr(start), TilePosition.getCPtr(end));
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TilePositionDoublePair getNearestTilePosition(TilePosition start, TilePositionSet targets) {
    TilePositionDoublePair ret = new TilePositionDoublePair(bridgePINVOKE.getNearestTilePosition(TilePosition.getCPtr(start), TilePositionSet.getCPtr(targets)), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TilePositionDoubleMap getGroundDistances(TilePosition start, TilePositionSet targets) {
    TilePositionDoubleMap ret = new TilePositionDoubleMap(bridgePINVOKE.getGroundDistances(TilePosition.getCPtr(start), TilePositionSet.getCPtr(targets)), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void getGroundDistanceMap(TilePosition start, RectangleArrayDouble distanceMap) {
    bridgePINVOKE.getGroundDistanceMap(TilePosition.getCPtr(start), RectangleArrayDouble.getCPtr(distanceMap));
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
  }

  public static TilePositionVector getShortestPath(TilePosition start, TilePosition end) {
    TilePositionVector ret = new TilePositionVector(bridgePINVOKE.getShortestPath__SWIG_0(TilePosition.getCPtr(start), TilePosition.getCPtr(end)), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TilePositionVector getShortestPath(TilePosition start, TilePositionSet targets) {
    TilePositionVector ret = new TilePositionVector(bridgePINVOKE.getShortestPath__SWIG_1(TilePosition.getCPtr(start), TilePositionSet.getCPtr(targets)), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly int TILE_SIZE = bridgePINVOKE.TILE_SIZE_get();
  public static readonly int PYLON_X_RADIUS = bridgePINVOKE.PYLON_X_RADIUS_get();
  public static readonly int PYLON_Y_RADIUS = bridgePINVOKE.PYLON_Y_RADIUS_get();
}

}
