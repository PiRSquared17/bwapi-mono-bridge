/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BWAPI {

using System;
using System.Runtime.InteropServices;

public partial class BulletData : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BulletData(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BulletData obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~BulletData() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          bridgePINVOKE.delete_BulletData(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  
public override int GetHashCode()
{
   return this.swigCPtr.Handle.GetHashCode();
}

public override bool Equals(object obj)
{
    bool equal = false;
    if (obj is BulletData)
      equal = (((BulletData)obj).swigCPtr.Handle == this.swigCPtr.Handle);
    return equal;
}
  
public bool Equals(BulletData obj) 
{
    if (obj == null) return false;
    return (obj.swigCPtr.Handle == this.swigCPtr.Handle);
}

public static bool operator ==(BulletData obj1, BulletData obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return true;
    if (object.ReferenceEquals(obj1, null)) return false;
    if (object.ReferenceEquals(obj2, null)) return false;
   
    return obj1.Equals(obj2);
}

public static bool operator !=(BulletData obj1, BulletData obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return false;
    if (object.ReferenceEquals(obj1, null)) return true;
    if (object.ReferenceEquals(obj2, null)) return true;

    return !obj1.Equals(obj2);
}




  public int id {
    set {
      bridgePINVOKE.BulletData_id_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.BulletData_id_get(swigCPtr);
      return ret;
    } 
  }

  public int player {
    set {
      bridgePINVOKE.BulletData_player_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.BulletData_player_get(swigCPtr);
      return ret;
    } 
  }

  public int type {
    set {
      bridgePINVOKE.BulletData_type_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.BulletData_type_get(swigCPtr);
      return ret;
    } 
  }

  public int source {
    set {
      bridgePINVOKE.BulletData_source_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.BulletData_source_get(swigCPtr);
      return ret;
    } 
  }

  public int positionX {
    set {
      bridgePINVOKE.BulletData_positionX_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.BulletData_positionX_get(swigCPtr);
      return ret;
    } 
  }

  public int positionY {
    set {
      bridgePINVOKE.BulletData_positionY_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.BulletData_positionY_get(swigCPtr);
      return ret;
    } 
  }

  public double angle {
    set {
      bridgePINVOKE.BulletData_angle_set(swigCPtr, value);
    } 
    get {
      double ret = bridgePINVOKE.BulletData_angle_get(swigCPtr);
      return ret;
    } 
  }

  public double velocityX {
    set {
      bridgePINVOKE.BulletData_velocityX_set(swigCPtr, value);
    } 
    get {
      double ret = bridgePINVOKE.BulletData_velocityX_get(swigCPtr);
      return ret;
    } 
  }

  public double velocityY {
    set {
      bridgePINVOKE.BulletData_velocityY_set(swigCPtr, value);
    } 
    get {
      double ret = bridgePINVOKE.BulletData_velocityY_get(swigCPtr);
      return ret;
    } 
  }

  public int target {
    set {
      bridgePINVOKE.BulletData_target_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.BulletData_target_get(swigCPtr);
      return ret;
    } 
  }

  public int targetPositionX {
    set {
      bridgePINVOKE.BulletData_targetPositionX_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.BulletData_targetPositionX_get(swigCPtr);
      return ret;
    } 
  }

  public int targetPositionY {
    set {
      bridgePINVOKE.BulletData_targetPositionY_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.BulletData_targetPositionY_get(swigCPtr);
      return ret;
    } 
  }

  public int removeTimer {
    set {
      bridgePINVOKE.BulletData_removeTimer_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.BulletData_removeTimer_get(swigCPtr);
      return ret;
    } 
  }

  public bool exists {
    set {
      bridgePINVOKE.BulletData_exists_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.BulletData_exists_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_bool isVisible {
    set {
      bridgePINVOKE.BulletData_isVisible_set(swigCPtr, SWIGTYPE_p_bool.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.BulletData_isVisible_get(swigCPtr);
      SWIGTYPE_p_bool ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_bool(cPtr, false);
      return ret;
    } 
  }

  public BulletData() : this(bridgePINVOKE.new_BulletData(), true) {
  }

}

}
