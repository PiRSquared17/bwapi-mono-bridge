/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Order : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Order(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Order obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Order() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          bridgePINVOKE.delete_Order(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public Order() : this(bridgePINVOKE.new_Order__SWIG_0(), true) {
  }

  public Order(int id) : this(bridgePINVOKE.new_Order__SWIG_1(id), true) {
  }

  public Order(Order other) : this(bridgePINVOKE.new_Order__SWIG_2(Order.getCPtr(other)), true) {
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
  }

  public Order opAssign(Order other) {
    Order ret = new Order(bridgePINVOKE.Order_opAssign(swigCPtr, Order.getCPtr(other)), false);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool opEquals(Order other) {
    bool ret = bridgePINVOKE.Order_opEquals(swigCPtr, Order.getCPtr(other));
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool opNotEquals(Order other) {
    bool ret = bridgePINVOKE.Order_opNotEquals(swigCPtr, Order.getCPtr(other));
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool opLessThan(Order other) {
    bool ret = bridgePINVOKE.Order_opLessThan(swigCPtr, Order.getCPtr(other));
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getID() {
    int ret = bridgePINVOKE.Order_getID(swigCPtr);
    return ret;
  }

  public string getName() {
    string ret = bridgePINVOKE.Order_getName(swigCPtr);
    return ret;
  }

}
