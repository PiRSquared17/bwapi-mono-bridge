/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BWAPI {

using System;
using System.Runtime.InteropServices;

public class ChokepointGetRegionsPair : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal ChokepointGetRegionsPair(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(ChokepointGetRegionsPair obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~ChokepointGetRegionsPair() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          bridgePINVOKE.delete_ChokepointGetRegionsPair(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public ChokepointGetRegionsPair() : this(bridgePINVOKE.new_ChokepointGetRegionsPair__SWIG_0(), true) {
  }

  public ChokepointGetRegionsPair(Region t, Region u) : this(bridgePINVOKE.new_ChokepointGetRegionsPair__SWIG_1(Region.getCPtr(t), Region.getCPtr(u)), true) {
  }

  public ChokepointGetRegionsPair(ChokepointGetRegionsPair p) : this(bridgePINVOKE.new_ChokepointGetRegionsPair__SWIG_2(ChokepointGetRegionsPair.getCPtr(p)), true) {
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
  }

  public Region first {
    set {
      bridgePINVOKE.ChokepointGetRegionsPair_first_set(swigCPtr, Region.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.ChokepointGetRegionsPair_first_get(swigCPtr);
      Region ret = (cPtr == IntPtr.Zero) ? null : new Region(cPtr, false);
      return ret;
    } 
  }

  public Region second {
    set {
      bridgePINVOKE.ChokepointGetRegionsPair_second_set(swigCPtr, Region.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.ChokepointGetRegionsPair_second_get(swigCPtr);
      Region ret = (cPtr == IntPtr.Zero) ? null : new Region(cPtr, false);
      return ret;
    } 
  }

}

}
