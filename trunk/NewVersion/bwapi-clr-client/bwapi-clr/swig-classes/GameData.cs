/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BWAPI {

using System;
using System.Runtime.InteropServices;

public partial class GameData : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal GameData(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(GameData obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~GameData() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          bridgePINVOKE.delete_GameData(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  
public override int GetHashCode()
{
   return this.swigCPtr.Handle.GetHashCode();
}

public override bool Equals(object obj)
{
    bool equal = false;
    if (obj is GameData)
      equal = (((GameData)obj).swigCPtr.Handle == this.swigCPtr.Handle);
    return equal;
}
  
public bool Equals(GameData obj) 
{
    if (obj == null) return false;
    return (obj.swigCPtr.Handle == this.swigCPtr.Handle);
}

public static bool operator ==(GameData obj1, GameData obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return true;
    if (object.ReferenceEquals(obj1, null)) return false;
    if (object.ReferenceEquals(obj2, null)) return false;
   
    return obj1.Equals(obj2);
}

public static bool operator !=(GameData obj1, GameData obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return false;
    if (object.ReferenceEquals(obj1, null)) return true;
    if (object.ReferenceEquals(obj2, null)) return true;

    return !obj1.Equals(obj2);
}




  public GameData() : this(bridgePINVOKE.new_GameData(), true) {
  }

  public int forceCount {
    set {
      bridgePINVOKE.GameData_forceCount_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_forceCount_get(swigCPtr);
      return ret;
    } 
  }

  public ForceData forces {
    set {
      bridgePINVOKE.GameData_forces_set(swigCPtr, ForceData.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.GameData_forces_get(swigCPtr);
      ForceData ret = (cPtr == IntPtr.Zero) ? null : new ForceData(cPtr, false);
      return ret;
    } 
  }

  public int playerCount {
    set {
      bridgePINVOKE.GameData_playerCount_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_playerCount_get(swigCPtr);
      return ret;
    } 
  }

  public PlayerData players {
    set {
      bridgePINVOKE.GameData_players_set(swigCPtr, PlayerData.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.GameData_players_get(swigCPtr);
      PlayerData ret = (cPtr == IntPtr.Zero) ? null : new PlayerData(cPtr, false);
      return ret;
    } 
  }

  public int initialUnitCount {
    set {
      bridgePINVOKE.GameData_initialUnitCount_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_initialUnitCount_get(swigCPtr);
      return ret;
    } 
  }

  public UnitData units {
    set {
      bridgePINVOKE.GameData_units_set(swigCPtr, UnitData.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.GameData_units_get(swigCPtr);
      UnitData ret = (cPtr == IntPtr.Zero) ? null : new UnitData(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int unitArray {
    set {
      bridgePINVOKE.GameData_unitArray_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.GameData_unitArray_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public BulletData bullets {
    set {
      bridgePINVOKE.GameData_bullets_set(swigCPtr, BulletData.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.GameData_bullets_get(swigCPtr);
      BulletData ret = (cPtr == IntPtr.Zero) ? null : new BulletData(cPtr, false);
      return ret;
    } 
  }

  public int gameType {
    set {
      bridgePINVOKE.GameData_gameType_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_gameType_get(swigCPtr);
      return ret;
    } 
  }

  public int latency {
    set {
      bridgePINVOKE.GameData_latency_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_latency_get(swigCPtr);
      return ret;
    } 
  }

  public int latencyFrames {
    set {
      bridgePINVOKE.GameData_latencyFrames_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_latencyFrames_get(swigCPtr);
      return ret;
    } 
  }

  public int latencyTime {
    set {
      bridgePINVOKE.GameData_latencyTime_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_latencyTime_get(swigCPtr);
      return ret;
    } 
  }

  public int remainingLatencyFrames {
    set {
      bridgePINVOKE.GameData_remainingLatencyFrames_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_remainingLatencyFrames_get(swigCPtr);
      return ret;
    } 
  }

  public int remainingLatencyTime {
    set {
      bridgePINVOKE.GameData_remainingLatencyTime_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_remainingLatencyTime_get(swigCPtr);
      return ret;
    } 
  }

  public int revision {
    set {
      bridgePINVOKE.GameData_revision_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_revision_get(swigCPtr);
      return ret;
    } 
  }

  public bool isDebug {
    set {
      bridgePINVOKE.GameData_isDebug_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.GameData_isDebug_get(swigCPtr);
      return ret;
    } 
  }

  public bool hasLatCom {
    set {
      bridgePINVOKE.GameData_hasLatCom_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.GameData_hasLatCom_get(swigCPtr);
      return ret;
    } 
  }

  public int replayFrameCount {
    set {
      bridgePINVOKE.GameData_replayFrameCount_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_replayFrameCount_get(swigCPtr);
      return ret;
    } 
  }

  public int frameCount {
    set {
      bridgePINVOKE.GameData_frameCount_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_frameCount_get(swigCPtr);
      return ret;
    } 
  }

  public int fps {
    set {
      bridgePINVOKE.GameData_fps_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_fps_get(swigCPtr);
      return ret;
    } 
  }

  public double averageFPS {
    set {
      bridgePINVOKE.GameData_averageFPS_set(swigCPtr, value);
    } 
    get {
      double ret = bridgePINVOKE.GameData_averageFPS_get(swigCPtr);
      return ret;
    } 
  }

  public int mouseX {
    set {
      bridgePINVOKE.GameData_mouseX_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_mouseX_get(swigCPtr);
      return ret;
    } 
  }

  public int mouseY {
    set {
      bridgePINVOKE.GameData_mouseY_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_mouseY_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_bool mouseState {
    set {
      bridgePINVOKE.GameData_mouseState_set(swigCPtr, SWIGTYPE_p_bool.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.GameData_mouseState_get(swigCPtr);
      SWIGTYPE_p_bool ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_bool(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_bool keyState {
    set {
      bridgePINVOKE.GameData_keyState_set(swigCPtr, SWIGTYPE_p_bool.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.GameData_keyState_get(swigCPtr);
      SWIGTYPE_p_bool ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_bool(cPtr, false);
      return ret;
    } 
  }

  public int screenX {
    set {
      bridgePINVOKE.GameData_screenX_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_screenX_get(swigCPtr);
      return ret;
    } 
  }

  public int screenY {
    set {
      bridgePINVOKE.GameData_screenY_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_screenY_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_bool flags {
    set {
      bridgePINVOKE.GameData_flags_set(swigCPtr, SWIGTYPE_p_bool.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.GameData_flags_get(swigCPtr);
      SWIGTYPE_p_bool ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_bool(cPtr, false);
      return ret;
    } 
  }

  public int mapWidth {
    set {
      bridgePINVOKE.GameData_mapWidth_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_mapWidth_get(swigCPtr);
      return ret;
    } 
  }

  public int mapHeight {
    set {
      bridgePINVOKE.GameData_mapHeight_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_mapHeight_get(swigCPtr);
      return ret;
    } 
  }

  public string mapFileName {
    set {
      bridgePINVOKE.GameData_mapFileName_set(swigCPtr, value);
    } 
    get {
      string ret = bridgePINVOKE.GameData_mapFileName_get(swigCPtr);
      return ret;
    } 
  }

  public string mapPathName {
    set {
      bridgePINVOKE.GameData_mapPathName_set(swigCPtr, value);
    } 
    get {
      string ret = bridgePINVOKE.GameData_mapPathName_get(swigCPtr);
      return ret;
    } 
  }

  public string mapName {
    set {
      bridgePINVOKE.GameData_mapName_set(swigCPtr, value);
    } 
    get {
      string ret = bridgePINVOKE.GameData_mapName_get(swigCPtr);
      return ret;
    } 
  }

  public string mapHash {
    set {
      bridgePINVOKE.GameData_mapHash_set(swigCPtr, value);
    } 
    get {
      string ret = bridgePINVOKE.GameData_mapHash_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_a_256__int getGroundHeight {
    set {
      bridgePINVOKE.GameData_getGroundHeight_set(swigCPtr, SWIGTYPE_p_a_256__int.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.GameData_getGroundHeight_get(swigCPtr);
      SWIGTYPE_p_a_256__int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_a_256__int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_a_1024__bool isWalkable {
    set {
      bridgePINVOKE.GameData_isWalkable_set(swigCPtr, SWIGTYPE_p_a_1024__bool.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.GameData_isWalkable_get(swigCPtr);
      SWIGTYPE_p_a_1024__bool ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_a_1024__bool(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_a_256__bool isBuildable {
    set {
      bridgePINVOKE.GameData_isBuildable_set(swigCPtr, SWIGTYPE_p_a_256__bool.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.GameData_isBuildable_get(swigCPtr);
      SWIGTYPE_p_a_256__bool ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_a_256__bool(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_a_256__bool isVisible {
    set {
      bridgePINVOKE.GameData_isVisible_set(swigCPtr, SWIGTYPE_p_a_256__bool.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.GameData_isVisible_get(swigCPtr);
      SWIGTYPE_p_a_256__bool ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_a_256__bool(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_a_256__bool isExplored {
    set {
      bridgePINVOKE.GameData_isExplored_set(swigCPtr, SWIGTYPE_p_a_256__bool.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.GameData_isExplored_get(swigCPtr);
      SWIGTYPE_p_a_256__bool ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_a_256__bool(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_a_256__bool hasCreep {
    set {
      bridgePINVOKE.GameData_hasCreep_set(swigCPtr, SWIGTYPE_p_a_256__bool.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.GameData_hasCreep_get(swigCPtr);
      SWIGTYPE_p_a_256__bool ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_a_256__bool(cPtr, false);
      return ret;
    } 
  }

  public int startLocationCount {
    set {
      bridgePINVOKE.GameData_startLocationCount_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_startLocationCount_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int startLocationsX {
    set {
      bridgePINVOKE.GameData_startLocationsX_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.GameData_startLocationsX_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int startLocationsY {
    set {
      bridgePINVOKE.GameData_startLocationsY_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.GameData_startLocationsY_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public bool isInGame {
    set {
      bridgePINVOKE.GameData_isInGame_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.GameData_isInGame_get(swigCPtr);
      return ret;
    } 
  }

  public bool isMultiplayer {
    set {
      bridgePINVOKE.GameData_isMultiplayer_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.GameData_isMultiplayer_get(swigCPtr);
      return ret;
    } 
  }

  public bool isBattleNet {
    set {
      bridgePINVOKE.GameData_isBattleNet_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.GameData_isBattleNet_get(swigCPtr);
      return ret;
    } 
  }

  public bool isPaused {
    set {
      bridgePINVOKE.GameData_isPaused_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.GameData_isPaused_get(swigCPtr);
      return ret;
    } 
  }

  public bool isReplay {
    set {
      bridgePINVOKE.GameData_isReplay_set(swigCPtr, value);
    } 
    get {
      bool ret = bridgePINVOKE.GameData_isReplay_get(swigCPtr);
      return ret;
    } 
  }

  public int selectedUnitCount {
    set {
      bridgePINVOKE.GameData_selectedUnitCount_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_selectedUnitCount_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_int selectedUnits {
    set {
      bridgePINVOKE.GameData_selectedUnits_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.GameData_selectedUnits_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int self {
    set {
      bridgePINVOKE.GameData_self_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_self_get(swigCPtr);
      return ret;
    } 
  }

  public int eventCount {
    set {
      bridgePINVOKE.GameData_eventCount_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_eventCount_get(swigCPtr);
      return ret;
    } 
  }

  public BWAPIC_Event events {
    set {
      bridgePINVOKE.GameData_events_set(swigCPtr, BWAPIC_Event.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.GameData_events_get(swigCPtr);
      BWAPIC_Event ret = (cPtr == IntPtr.Zero) ? null : new BWAPIC_Event(cPtr, false);
      return ret;
    } 
  }

  public int stringCount {
    set {
      bridgePINVOKE.GameData_stringCount_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_stringCount_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_a_256__char strings {
    set {
      bridgePINVOKE.GameData_strings_set(swigCPtr, SWIGTYPE_p_a_256__char.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.GameData_strings_get(swigCPtr);
      SWIGTYPE_p_a_256__char ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_a_256__char(cPtr, false);
      return ret;
    } 
  }

  public int shapeCount {
    set {
      bridgePINVOKE.GameData_shapeCount_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_shapeCount_get(swigCPtr);
      return ret;
    } 
  }

  public Shape shapes {
    set {
      bridgePINVOKE.GameData_shapes_set(swigCPtr, Shape.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.GameData_shapes_get(swigCPtr);
      Shape ret = (cPtr == IntPtr.Zero) ? null : new Shape(cPtr, false);
      return ret;
    } 
  }

  public int commandCount {
    set {
      bridgePINVOKE.GameData_commandCount_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_commandCount_get(swigCPtr);
      return ret;
    } 
  }

  public Command commands {
    set {
      bridgePINVOKE.GameData_commands_set(swigCPtr, Command.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.GameData_commands_get(swigCPtr);
      Command ret = (cPtr == IntPtr.Zero) ? null : new Command(cPtr, false);
      return ret;
    } 
  }

  public int unitCommandCount {
    set {
      bridgePINVOKE.GameData_unitCommandCount_set(swigCPtr, value);
    } 
    get {
      int ret = bridgePINVOKE.GameData_unitCommandCount_get(swigCPtr);
      return ret;
    } 
  }

  public BWAPIC_UnitCommand unitCommands {
    set {
      bridgePINVOKE.GameData_unitCommands_set(swigCPtr, BWAPIC_UnitCommand.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.GameData_unitCommands_get(swigCPtr);
      BWAPIC_UnitCommand ret = (cPtr == IntPtr.Zero) ? null : new BWAPIC_UnitCommand(cPtr, false);
      return ret;
    } 
  }

}

}
