/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BWAPI {

using System;
using System.Runtime.InteropServices;

public partial class RectangleArrayDouble : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RectangleArrayDouble(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(RectangleArrayDouble obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~RectangleArrayDouble() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          bridgePINVOKE.delete_RectangleArrayDouble(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  
public override int GetHashCode()
{
   return this.swigCPtr.Handle.GetHashCode();
}

public override bool Equals(object obj)
{
    bool equal = false;
    if (obj is RectangleArrayDouble)
      equal = (((RectangleArrayDouble)obj).swigCPtr.Handle == this.swigCPtr.Handle);
    return equal;
}
  
public bool Equals(RectangleArrayDouble obj) 
{
    if (obj == null) return false;
    return (obj.swigCPtr.Handle == this.swigCPtr.Handle);
}

public static bool operator ==(RectangleArrayDouble obj1, RectangleArrayDouble obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return true;
    if (object.ReferenceEquals(obj1, null)) return false;
    if (object.ReferenceEquals(obj2, null)) return false;
   
    return obj1.Equals(obj2);
}

public static bool operator !=(RectangleArrayDouble obj1, RectangleArrayDouble obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return false;
    if (object.ReferenceEquals(obj1, null)) return true;
    if (object.ReferenceEquals(obj2, null)) return true;

    return !obj1.Equals(obj2);
}




  public RectangleArrayDouble(uint width, uint height, SWIGTYPE_p_double data) : this(bridgePINVOKE.new_RectangleArrayDouble__SWIG_0(width, height, SWIGTYPE_p_double.getCPtr(data)), true) {
  }

  public RectangleArrayDouble(uint width, uint height) : this(bridgePINVOKE.new_RectangleArrayDouble__SWIG_1(width, height), true) {
  }

  public RectangleArrayDouble(uint width) : this(bridgePINVOKE.new_RectangleArrayDouble__SWIG_2(width), true) {
  }

  public RectangleArrayDouble() : this(bridgePINVOKE.new_RectangleArrayDouble__SWIG_3(), true) {
  }

  public RectangleArrayDouble(RectangleArrayDouble rectangleArray) : this(bridgePINVOKE.new_RectangleArrayDouble__SWIG_4(RectangleArrayDouble.getCPtr(rectangleArray)), true) {
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
  }

  public uint getWidth() {
    uint ret = bridgePINVOKE.RectangleArrayDouble_getWidth(swigCPtr);
    return ret;
  }

  public uint getHeight() {
    uint ret = bridgePINVOKE.RectangleArrayDouble_getHeight(swigCPtr);
    return ret;
  }

  public SWIGTYPE_p_double getItem(uint x, uint y) {
    IntPtr cPtr = bridgePINVOKE.RectangleArrayDouble_getItem(swigCPtr, x, y);
    SWIGTYPE_p_double ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_double(cPtr, false);
    return ret;
  }

  public void setItem(uint x, uint y, SWIGTYPE_p_double item) {
    bridgePINVOKE.RectangleArrayDouble_setItem(swigCPtr, x, y, SWIGTYPE_p_double.getCPtr(item));
  }

  public void resize(uint width, uint height) {
    bridgePINVOKE.RectangleArrayDouble_resize(swigCPtr, width, height);
  }

  public void printToFile(SWIGTYPE_p_FILE f) {
    bridgePINVOKE.RectangleArrayDouble_printToFile(swigCPtr, SWIGTYPE_p_FILE.getCPtr(f));
  }

  public void saveToFile(string fileName) {
    bridgePINVOKE.RectangleArrayDouble_saveToFile(swigCPtr, fileName);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
  }

  public void setTo(double value) {
    bridgePINVOKE.RectangleArrayDouble_setTo(swigCPtr, value);
  }

  public void setBorderTo(double value) {
    bridgePINVOKE.RectangleArrayDouble_setBorderTo(swigCPtr, value);
  }

}

}
