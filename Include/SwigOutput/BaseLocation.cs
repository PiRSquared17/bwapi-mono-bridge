/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BWAPI {

using System;
using System.Runtime.InteropServices;

public class BaseLocation : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal BaseLocation(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(BaseLocation obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~BaseLocation() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          bridgePINVOKE.delete_BaseLocation(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual Position getPosition() {
    Position ret = new Position(bridgePINVOKE.BaseLocation_getPosition(swigCPtr), true);
    return ret;
  }

  public virtual TilePosition getTilePosition() {
    TilePosition ret = new TilePosition(bridgePINVOKE.BaseLocation_getTilePosition(swigCPtr), true);
    return ret;
  }

  public virtual Region getRegion() {
    IntPtr cPtr = bridgePINVOKE.BaseLocation_getRegion(swigCPtr);
    Region ret = (cPtr == IntPtr.Zero) ? null : new Region(cPtr, false);
    return ret;
  }

  public virtual int minerals() {
    int ret = bridgePINVOKE.BaseLocation_minerals(swigCPtr);
    return ret;
  }

  public virtual int gas() {
    int ret = bridgePINVOKE.BaseLocation_gas(swigCPtr);
    return ret;
  }

  public virtual UnitSet getMinerals() {
    UnitSet ret = new UnitSet(bridgePINVOKE.BaseLocation_getMinerals(swigCPtr), false);
    return ret;
  }

  public virtual UnitSet getStaticMinerals() {
    UnitSet ret = new UnitSet(bridgePINVOKE.BaseLocation_getStaticMinerals(swigCPtr), false);
    return ret;
  }

  public virtual UnitSet getGeysers() {
    UnitSet ret = new UnitSet(bridgePINVOKE.BaseLocation_getGeysers(swigCPtr), false);
    return ret;
  }

  public virtual double getGroundDistance(BaseLocation other) {
    double ret = bridgePINVOKE.BaseLocation_getGroundDistance(swigCPtr, BaseLocation.getCPtr(other));
    return ret;
  }

  public virtual double getAirDistance(BaseLocation other) {
    double ret = bridgePINVOKE.BaseLocation_getAirDistance(swigCPtr, BaseLocation.getCPtr(other));
    return ret;
  }

  public virtual bool isIsland() {
    bool ret = bridgePINVOKE.BaseLocation_isIsland(swigCPtr);
    return ret;
  }

  public virtual bool isMineralOnly() {
    bool ret = bridgePINVOKE.BaseLocation_isMineralOnly(swigCPtr);
    return ret;
  }

  public virtual bool isStartLocation() {
    bool ret = bridgePINVOKE.BaseLocation_isStartLocation(swigCPtr);
    return ret;
  }

}

}
