/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Region : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Region(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Region obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Region() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          bridgePINVOKE.delete_Region(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual Polygon getPolygon() {
    Polygon ret = new Polygon(bridgePINVOKE.Region_getPolygon(swigCPtr), false);
    return ret;
  }

  public virtual Position getCenter() {
    Position ret = new Position(bridgePINVOKE.Region_getCenter(swigCPtr), false);
    return ret;
  }

  public virtual SWIGTYPE_p_std__setT_BWTA__Chokepoint_p_t getChokepoints() {
    SWIGTYPE_p_std__setT_BWTA__Chokepoint_p_t ret = new SWIGTYPE_p_std__setT_BWTA__Chokepoint_p_t(bridgePINVOKE.Region_getChokepoints(swigCPtr), false);
    return ret;
  }

  public virtual SWIGTYPE_p_std__setT_BWTA__BaseLocation_p_t getBaseLocations() {
    SWIGTYPE_p_std__setT_BWTA__BaseLocation_p_t ret = new SWIGTYPE_p_std__setT_BWTA__BaseLocation_p_t(bridgePINVOKE.Region_getBaseLocations(swigCPtr), false);
    return ret;
  }

}
