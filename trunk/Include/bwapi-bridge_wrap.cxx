/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL }
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_bridge(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_bridge(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_bridge(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/*  Errors in SWIG */
#define  SWIG_UnknownError    	   -1 
#define  SWIG_IOError        	   -2 
#define  SWIG_RuntimeError   	   -3 
#define  SWIG_IndexError     	   -4 
#define  SWIG_TypeError      	   -5 
#define  SWIG_DivisionByZero 	   -6 
#define  SWIG_OverflowError  	   -7 
#define  SWIG_SyntaxError    	   -8 
#define  SWIG_ValueError     	   -9 
#define  SWIG_SystemError    	   -10
#define  SWIG_AttributeError 	   -11
#define  SWIG_MemoryError    	   -12 
#define  SWIG_NullReferenceError   -13




#include <stdexcept>


#include <string>


#include <vector>
#include <algorithm>
#include <stdexcept>


#include <map>
#include <algorithm>
#include <stdexcept>


SWIGINTERN void SWIG_CSharpException(int code, const char *msg) {
  if (code == SWIG_ValueError) {
    SWIG_CSharpExceptionArgumentCodes exception_code = SWIG_CSharpArgumentOutOfRangeException;
    SWIG_CSharpSetPendingExceptionArgument(exception_code, msg, 0);
  } else {
    SWIG_CSharpExceptionCodes exception_code = SWIG_CSharpApplicationException;
    switch(code) {
    case SWIG_MemoryError:
      exception_code = SWIG_CSharpOutOfMemoryException;
      break;
    case SWIG_IndexError:
      exception_code = SWIG_CSharpIndexOutOfRangeException;
      break;
    case SWIG_DivisionByZero:
      exception_code = SWIG_CSharpDivideByZeroException;
      break;
    case SWIG_IOError:
      exception_code = SWIG_CSharpIOException;
      break;
    case SWIG_OverflowError:
      exception_code = SWIG_CSharpOverflowException;
      break;
    case SWIG_RuntimeError:
    case SWIG_TypeError:
    case SWIG_SyntaxError:
    case SWIG_SystemError:
    case SWIG_UnknownError:
    default:
      exception_code = SWIG_CSharpApplicationException;
      break;
    }
    SWIG_CSharpSetPendingException(exception_code, msg);
  }
}


#include <stdexcept>


#include <utility>


#include <set>
#include <algorithm>
#include <stdexcept>


#include <list>
#include <algorithm>
#include <stdexcept>


#include "BWAPI.h"
#include "BWTA.h"
#include "monobridge.h"
using namespace BWAPI;


using namespace BWAPI;

SWIGINTERN std::vector< BWAPI::Position > *new_std_vector_Sl_BWAPI_Position_Sg___SWIG_2(int capacity){
        std::vector<BWAPI::Position >* pv = 0;
        if (capacity >= 0) {
          pv = new std::vector<BWAPI::Position >();
          pv->reserve(capacity);
       } else {
          throw std::out_of_range("capacity");
       }
       return pv;
      }
SWIGINTERN BWAPI::Position std_vector_Sl_BWAPI_Position_Sg__getitemcopy(std::vector< BWAPI::Position > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN std::vector< BWAPI::Position >::const_reference std_vector_Sl_BWAPI_Position_Sg__getitem(std::vector< BWAPI::Position > *self,int index){
        if (index>=0 && index<(int)self->size())
          return (*self)[index];
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg__setitem(std::vector< BWAPI::Position > *self,int index,std::vector< BWAPI::Position >::value_type const &val){
        if (index>=0 && index<(int)self->size())
          (*self)[index] = val;
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg__AddRange(std::vector< BWAPI::Position > *self,std::vector< BWAPI::Position > const &values){
        self->insert(self->end(), values.begin(), values.end());
      }
SWIGINTERN std::vector< BWAPI::Position > *std_vector_Sl_BWAPI_Position_Sg__GetRange(std::vector< BWAPI::Position > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        return new std::vector<BWAPI::Position >(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg__Insert(std::vector< BWAPI::Position > *self,int index,std::vector< BWAPI::Position >::value_type const &x){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, x);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg__InsertRange(std::vector< BWAPI::Position > *self,int index,std::vector< BWAPI::Position > const &values){
        if (index>=0 && index<(int)self->size()+1)
          self->insert(self->begin()+index, values.begin(), values.end());
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg__RemoveAt(std::vector< BWAPI::Position > *self,int index){
        if (index>=0 && index<(int)self->size())
          self->erase(self->begin() + index);
        else
          throw std::out_of_range("index");
      }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg__RemoveRange(std::vector< BWAPI::Position > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        self->erase(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN std::vector< BWAPI::Position > *std_vector_Sl_BWAPI_Position_Sg__Repeat(std::vector< BWAPI::Position >::value_type const &value,int count){
        if (count < 0)
          throw std::out_of_range("count");
        return new std::vector<BWAPI::Position >(count, value);
      }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg__Reverse__SWIG_0(std::vector< BWAPI::Position > *self){
        std::reverse(self->begin(), self->end());
      }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg__Reverse__SWIG_1(std::vector< BWAPI::Position > *self,int index,int count){
        if (index < 0)
          throw std::out_of_range("index");
        if (count < 0)
          throw std::out_of_range("count");
        if (index >= (int)self->size()+1 || index+count > (int)self->size())
          throw std::invalid_argument("invalid range");
        std::reverse(self->begin()+index, self->begin()+index+count);
      }
SWIGINTERN void std_vector_Sl_BWAPI_Position_Sg__SetRange(std::vector< BWAPI::Position > *self,int index,std::vector< BWAPI::Position > const &values){
        if (index < 0)
          throw std::out_of_range("index");
        if (index+values.size() > self->size())
          throw std::out_of_range("index");
        std::copy(values.begin(), values.end(), self->begin()+index);
      }
SWIGINTERN std::set< BWAPI::Unit * >::key_type const &std_set_Sl_BWAPI_Unit_Sm__Sg__getitem(std::set< BWAPI::Unit * > *self,std::set< BWAPI::Unit * >::key_type const &key){
        std::set< BWAPI::Unit * >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_Unit_Sm__Sg__ContainsKey(std::set< BWAPI::Unit * > *self,std::set< BWAPI::Unit * >::key_type const &key){
        std::set< BWAPI::Unit * >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_Unit_Sm__Sg__Add(std::set< BWAPI::Unit * > *self,std::set< BWAPI::Unit * >::key_type const &key){
        std::set< BWAPI::Unit * >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_Unit_Sm__Sg__Remove(std::set< BWAPI::Unit * > *self,std::set< BWAPI::Unit * >::key_type const &key){
        std::set< BWAPI::Unit * >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::Unit * >::iterator *std_set_Sl_BWAPI_Unit_Sm__Sg__create_iterator_begin(std::set< BWAPI::Unit * > *self){
        return new std::set< BWAPI::Unit * >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::Unit * >::key_type const &std_set_Sl_BWAPI_Unit_Sm__Sg__get_next_key(std::set< BWAPI::Unit * > *self,std::set< BWAPI::Unit * >::iterator *swigiterator){
        std::set< BWAPI::Unit * >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::AttackType >::key_type const &std_set_Sl_BWAPI_AttackType_Sg__getitem(std::set< BWAPI::AttackType > *self,std::set< BWAPI::AttackType >::key_type const &key){
        std::set< BWAPI::AttackType >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_AttackType_Sg__ContainsKey(std::set< BWAPI::AttackType > *self,std::set< BWAPI::AttackType >::key_type const &key){
        std::set< BWAPI::AttackType >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_AttackType_Sg__Add(std::set< BWAPI::AttackType > *self,std::set< BWAPI::AttackType >::key_type const &key){
        std::set< BWAPI::AttackType >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_AttackType_Sg__Remove(std::set< BWAPI::AttackType > *self,std::set< BWAPI::AttackType >::key_type const &key){
        std::set< BWAPI::AttackType >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::AttackType >::iterator *std_set_Sl_BWAPI_AttackType_Sg__create_iterator_begin(std::set< BWAPI::AttackType > *self){
        return new std::set< BWAPI::AttackType >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::AttackType >::key_type const &std_set_Sl_BWAPI_AttackType_Sg__get_next_key(std::set< BWAPI::AttackType > *self,std::set< BWAPI::AttackType >::iterator *swigiterator){
        std::set< BWAPI::AttackType >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::DamageType >::key_type const &std_set_Sl_BWAPI_DamageType_Sg__getitem(std::set< BWAPI::DamageType > *self,std::set< BWAPI::DamageType >::key_type const &key){
        std::set< BWAPI::DamageType >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_DamageType_Sg__ContainsKey(std::set< BWAPI::DamageType > *self,std::set< BWAPI::DamageType >::key_type const &key){
        std::set< BWAPI::DamageType >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_DamageType_Sg__Add(std::set< BWAPI::DamageType > *self,std::set< BWAPI::DamageType >::key_type const &key){
        std::set< BWAPI::DamageType >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_DamageType_Sg__Remove(std::set< BWAPI::DamageType > *self,std::set< BWAPI::DamageType >::key_type const &key){
        std::set< BWAPI::DamageType >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::DamageType >::iterator *std_set_Sl_BWAPI_DamageType_Sg__create_iterator_begin(std::set< BWAPI::DamageType > *self){
        return new std::set< BWAPI::DamageType >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::DamageType >::key_type const &std_set_Sl_BWAPI_DamageType_Sg__get_next_key(std::set< BWAPI::DamageType > *self,std::set< BWAPI::DamageType >::iterator *swigiterator){
        std::set< BWAPI::DamageType >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::Error >::key_type const &std_set_Sl_BWAPI_Error_Sg__getitem(std::set< BWAPI::Error > *self,std::set< BWAPI::Error >::key_type const &key){
        std::set< BWAPI::Error >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_Error_Sg__ContainsKey(std::set< BWAPI::Error > *self,std::set< BWAPI::Error >::key_type const &key){
        std::set< BWAPI::Error >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_Error_Sg__Add(std::set< BWAPI::Error > *self,std::set< BWAPI::Error >::key_type const &key){
        std::set< BWAPI::Error >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_Error_Sg__Remove(std::set< BWAPI::Error > *self,std::set< BWAPI::Error >::key_type const &key){
        std::set< BWAPI::Error >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::Error >::iterator *std_set_Sl_BWAPI_Error_Sg__create_iterator_begin(std::set< BWAPI::Error > *self){
        return new std::set< BWAPI::Error >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::Error >::key_type const &std_set_Sl_BWAPI_Error_Sg__get_next_key(std::set< BWAPI::Error > *self,std::set< BWAPI::Error >::iterator *swigiterator){
        std::set< BWAPI::Error >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::ExplosionType >::key_type const &std_set_Sl_BWAPI_ExplosionType_Sg__getitem(std::set< BWAPI::ExplosionType > *self,std::set< BWAPI::ExplosionType >::key_type const &key){
        std::set< BWAPI::ExplosionType >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_ExplosionType_Sg__ContainsKey(std::set< BWAPI::ExplosionType > *self,std::set< BWAPI::ExplosionType >::key_type const &key){
        std::set< BWAPI::ExplosionType >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_ExplosionType_Sg__Add(std::set< BWAPI::ExplosionType > *self,std::set< BWAPI::ExplosionType >::key_type const &key){
        std::set< BWAPI::ExplosionType >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_ExplosionType_Sg__Remove(std::set< BWAPI::ExplosionType > *self,std::set< BWAPI::ExplosionType >::key_type const &key){
        std::set< BWAPI::ExplosionType >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::ExplosionType >::iterator *std_set_Sl_BWAPI_ExplosionType_Sg__create_iterator_begin(std::set< BWAPI::ExplosionType > *self){
        return new std::set< BWAPI::ExplosionType >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::ExplosionType >::key_type const &std_set_Sl_BWAPI_ExplosionType_Sg__get_next_key(std::set< BWAPI::ExplosionType > *self,std::set< BWAPI::ExplosionType >::iterator *swigiterator){
        std::set< BWAPI::ExplosionType >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::Force * >::key_type const &std_set_Sl_BWAPI_Force_Sm__Sg__getitem(std::set< BWAPI::Force * > *self,std::set< BWAPI::Force * >::key_type const &key){
        std::set< BWAPI::Force * >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_Force_Sm__Sg__ContainsKey(std::set< BWAPI::Force * > *self,std::set< BWAPI::Force * >::key_type const &key){
        std::set< BWAPI::Force * >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_Force_Sm__Sg__Add(std::set< BWAPI::Force * > *self,std::set< BWAPI::Force * >::key_type const &key){
        std::set< BWAPI::Force * >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_Force_Sm__Sg__Remove(std::set< BWAPI::Force * > *self,std::set< BWAPI::Force * >::key_type const &key){
        std::set< BWAPI::Force * >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::Force * >::iterator *std_set_Sl_BWAPI_Force_Sm__Sg__create_iterator_begin(std::set< BWAPI::Force * > *self){
        return new std::set< BWAPI::Force * >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::Force * >::key_type const &std_set_Sl_BWAPI_Force_Sm__Sg__get_next_key(std::set< BWAPI::Force * > *self,std::set< BWAPI::Force * >::iterator *swigiterator){
        std::set< BWAPI::Force * >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::Order >::key_type const &std_set_Sl_BWAPI_Order_Sg__getitem(std::set< BWAPI::Order > *self,std::set< BWAPI::Order >::key_type const &key){
        std::set< BWAPI::Order >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_Order_Sg__ContainsKey(std::set< BWAPI::Order > *self,std::set< BWAPI::Order >::key_type const &key){
        std::set< BWAPI::Order >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_Order_Sg__Add(std::set< BWAPI::Order > *self,std::set< BWAPI::Order >::key_type const &key){
        std::set< BWAPI::Order >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_Order_Sg__Remove(std::set< BWAPI::Order > *self,std::set< BWAPI::Order >::key_type const &key){
        std::set< BWAPI::Order >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::Order >::iterator *std_set_Sl_BWAPI_Order_Sg__create_iterator_begin(std::set< BWAPI::Order > *self){
        return new std::set< BWAPI::Order >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::Order >::key_type const &std_set_Sl_BWAPI_Order_Sg__get_next_key(std::set< BWAPI::Order > *self,std::set< BWAPI::Order >::iterator *swigiterator){
        std::set< BWAPI::Order >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::Player * >::key_type const &std_set_Sl_BWAPI_Player_Sm__Sg__getitem(std::set< BWAPI::Player * > *self,std::set< BWAPI::Player * >::key_type const &key){
        std::set< BWAPI::Player * >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_Player_Sm__Sg__ContainsKey(std::set< BWAPI::Player * > *self,std::set< BWAPI::Player * >::key_type const &key){
        std::set< BWAPI::Player * >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_Player_Sm__Sg__Add(std::set< BWAPI::Player * > *self,std::set< BWAPI::Player * >::key_type const &key){
        std::set< BWAPI::Player * >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_Player_Sm__Sg__Remove(std::set< BWAPI::Player * > *self,std::set< BWAPI::Player * >::key_type const &key){
        std::set< BWAPI::Player * >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::Player * >::iterator *std_set_Sl_BWAPI_Player_Sm__Sg__create_iterator_begin(std::set< BWAPI::Player * > *self){
        return new std::set< BWAPI::Player * >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::Player * >::key_type const &std_set_Sl_BWAPI_Player_Sm__Sg__get_next_key(std::set< BWAPI::Player * > *self,std::set< BWAPI::Player * >::iterator *swigiterator){
        std::set< BWAPI::Player * >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::PlayerType >::key_type const &std_set_Sl_BWAPI_PlayerType_Sg__getitem(std::set< BWAPI::PlayerType > *self,std::set< BWAPI::PlayerType >::key_type const &key){
        std::set< BWAPI::PlayerType >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_PlayerType_Sg__ContainsKey(std::set< BWAPI::PlayerType > *self,std::set< BWAPI::PlayerType >::key_type const &key){
        std::set< BWAPI::PlayerType >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_PlayerType_Sg__Add(std::set< BWAPI::PlayerType > *self,std::set< BWAPI::PlayerType >::key_type const &key){
        std::set< BWAPI::PlayerType >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_PlayerType_Sg__Remove(std::set< BWAPI::PlayerType > *self,std::set< BWAPI::PlayerType >::key_type const &key){
        std::set< BWAPI::PlayerType >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::PlayerType >::iterator *std_set_Sl_BWAPI_PlayerType_Sg__create_iterator_begin(std::set< BWAPI::PlayerType > *self){
        return new std::set< BWAPI::PlayerType >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::PlayerType >::key_type const &std_set_Sl_BWAPI_PlayerType_Sg__get_next_key(std::set< BWAPI::PlayerType > *self,std::set< BWAPI::PlayerType >::iterator *swigiterator){
        std::set< BWAPI::PlayerType >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::Race >::key_type const &std_set_Sl_BWAPI_Race_Sg__getitem(std::set< BWAPI::Race > *self,std::set< BWAPI::Race >::key_type const &key){
        std::set< BWAPI::Race >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_Race_Sg__ContainsKey(std::set< BWAPI::Race > *self,std::set< BWAPI::Race >::key_type const &key){
        std::set< BWAPI::Race >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_Race_Sg__Add(std::set< BWAPI::Race > *self,std::set< BWAPI::Race >::key_type const &key){
        std::set< BWAPI::Race >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_Race_Sg__Remove(std::set< BWAPI::Race > *self,std::set< BWAPI::Race >::key_type const &key){
        std::set< BWAPI::Race >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::Race >::iterator *std_set_Sl_BWAPI_Race_Sg__create_iterator_begin(std::set< BWAPI::Race > *self){
        return new std::set< BWAPI::Race >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::Race >::key_type const &std_set_Sl_BWAPI_Race_Sg__get_next_key(std::set< BWAPI::Race > *self,std::set< BWAPI::Race >::iterator *swigiterator){
        std::set< BWAPI::Race >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::TechType const * >::key_type const &std_set_Sl_BWAPI_TechType_SS_const_Sm__Sg__getitem(std::set< BWAPI::TechType const * > *self,std::set< BWAPI::TechType const * >::key_type const &key){
        std::set< BWAPI::TechType const * >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_TechType_SS_const_Sm__Sg__ContainsKey(std::set< BWAPI::TechType const * > *self,std::set< BWAPI::TechType const * >::key_type const &key){
        std::set< BWAPI::TechType const * >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_TechType_SS_const_Sm__Sg__Add(std::set< BWAPI::TechType const * > *self,std::set< BWAPI::TechType const * >::key_type const &key){
        std::set< BWAPI::TechType const * >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_TechType_SS_const_Sm__Sg__Remove(std::set< BWAPI::TechType const * > *self,std::set< BWAPI::TechType const * >::key_type const &key){
        std::set< BWAPI::TechType const * >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::TechType const * >::iterator *std_set_Sl_BWAPI_TechType_SS_const_Sm__Sg__create_iterator_begin(std::set< BWAPI::TechType const * > *self){
        return new std::set< BWAPI::TechType const * >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::TechType const * >::key_type const &std_set_Sl_BWAPI_TechType_SS_const_Sm__Sg__get_next_key(std::set< BWAPI::TechType const * > *self,std::set< BWAPI::TechType const * >::iterator *swigiterator){
        std::set< BWAPI::TechType const * >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::TechType >::key_type const &std_set_Sl_BWAPI_TechType_Sg__getitem(std::set< BWAPI::TechType > *self,std::set< BWAPI::TechType >::key_type const &key){
        std::set< BWAPI::TechType >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_TechType_Sg__ContainsKey(std::set< BWAPI::TechType > *self,std::set< BWAPI::TechType >::key_type const &key){
        std::set< BWAPI::TechType >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_TechType_Sg__Add(std::set< BWAPI::TechType > *self,std::set< BWAPI::TechType >::key_type const &key){
        std::set< BWAPI::TechType >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_TechType_Sg__Remove(std::set< BWAPI::TechType > *self,std::set< BWAPI::TechType >::key_type const &key){
        std::set< BWAPI::TechType >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::TechType >::iterator *std_set_Sl_BWAPI_TechType_Sg__create_iterator_begin(std::set< BWAPI::TechType > *self){
        return new std::set< BWAPI::TechType >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::TechType >::key_type const &std_set_Sl_BWAPI_TechType_Sg__get_next_key(std::set< BWAPI::TechType > *self,std::set< BWAPI::TechType >::iterator *swigiterator){
        std::set< BWAPI::TechType >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::UnitSizeType >::key_type const &std_set_Sl_BWAPI_UnitSizeType_Sg__getitem(std::set< BWAPI::UnitSizeType > *self,std::set< BWAPI::UnitSizeType >::key_type const &key){
        std::set< BWAPI::UnitSizeType >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_UnitSizeType_Sg__ContainsKey(std::set< BWAPI::UnitSizeType > *self,std::set< BWAPI::UnitSizeType >::key_type const &key){
        std::set< BWAPI::UnitSizeType >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_UnitSizeType_Sg__Add(std::set< BWAPI::UnitSizeType > *self,std::set< BWAPI::UnitSizeType >::key_type const &key){
        std::set< BWAPI::UnitSizeType >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_UnitSizeType_Sg__Remove(std::set< BWAPI::UnitSizeType > *self,std::set< BWAPI::UnitSizeType >::key_type const &key){
        std::set< BWAPI::UnitSizeType >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::UnitSizeType >::iterator *std_set_Sl_BWAPI_UnitSizeType_Sg__create_iterator_begin(std::set< BWAPI::UnitSizeType > *self){
        return new std::set< BWAPI::UnitSizeType >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::UnitSizeType >::key_type const &std_set_Sl_BWAPI_UnitSizeType_Sg__get_next_key(std::set< BWAPI::UnitSizeType > *self,std::set< BWAPI::UnitSizeType >::iterator *swigiterator){
        std::set< BWAPI::UnitSizeType >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::UnitType const * >::key_type const &std_set_Sl_BWAPI_UnitType_SS_const_Sm__Sg__getitem(std::set< BWAPI::UnitType const * > *self,std::set< BWAPI::UnitType const * >::key_type const &key){
        std::set< BWAPI::UnitType const * >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_UnitType_SS_const_Sm__Sg__ContainsKey(std::set< BWAPI::UnitType const * > *self,std::set< BWAPI::UnitType const * >::key_type const &key){
        std::set< BWAPI::UnitType const * >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_UnitType_SS_const_Sm__Sg__Add(std::set< BWAPI::UnitType const * > *self,std::set< BWAPI::UnitType const * >::key_type const &key){
        std::set< BWAPI::UnitType const * >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_UnitType_SS_const_Sm__Sg__Remove(std::set< BWAPI::UnitType const * > *self,std::set< BWAPI::UnitType const * >::key_type const &key){
        std::set< BWAPI::UnitType const * >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::UnitType const * >::iterator *std_set_Sl_BWAPI_UnitType_SS_const_Sm__Sg__create_iterator_begin(std::set< BWAPI::UnitType const * > *self){
        return new std::set< BWAPI::UnitType const * >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::UnitType const * >::key_type const &std_set_Sl_BWAPI_UnitType_SS_const_Sm__Sg__get_next_key(std::set< BWAPI::UnitType const * > *self,std::set< BWAPI::UnitType const * >::iterator *swigiterator){
        std::set< BWAPI::UnitType const * >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::UnitType >::key_type const &std_set_Sl_BWAPI_UnitType_Sg__getitem(std::set< BWAPI::UnitType > *self,std::set< BWAPI::UnitType >::key_type const &key){
        std::set< BWAPI::UnitType >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_UnitType_Sg__ContainsKey(std::set< BWAPI::UnitType > *self,std::set< BWAPI::UnitType >::key_type const &key){
        std::set< BWAPI::UnitType >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_UnitType_Sg__Add(std::set< BWAPI::UnitType > *self,std::set< BWAPI::UnitType >::key_type const &key){
        std::set< BWAPI::UnitType >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_UnitType_Sg__Remove(std::set< BWAPI::UnitType > *self,std::set< BWAPI::UnitType >::key_type const &key){
        std::set< BWAPI::UnitType >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::UnitType >::iterator *std_set_Sl_BWAPI_UnitType_Sg__create_iterator_begin(std::set< BWAPI::UnitType > *self){
        return new std::set< BWAPI::UnitType >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::UnitType >::key_type const &std_set_Sl_BWAPI_UnitType_Sg__get_next_key(std::set< BWAPI::UnitType > *self,std::set< BWAPI::UnitType >::iterator *swigiterator){
        std::set< BWAPI::UnitType >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::UpgradeType const * >::key_type const &std_set_Sl_BWAPI_UpgradeType_SS_const_Sm__Sg__getitem(std::set< BWAPI::UpgradeType const * > *self,std::set< BWAPI::UpgradeType const * >::key_type const &key){
        std::set< BWAPI::UpgradeType const * >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_UpgradeType_SS_const_Sm__Sg__ContainsKey(std::set< BWAPI::UpgradeType const * > *self,std::set< BWAPI::UpgradeType const * >::key_type const &key){
        std::set< BWAPI::UpgradeType const * >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_UpgradeType_SS_const_Sm__Sg__Add(std::set< BWAPI::UpgradeType const * > *self,std::set< BWAPI::UpgradeType const * >::key_type const &key){
        std::set< BWAPI::UpgradeType const * >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_UpgradeType_SS_const_Sm__Sg__Remove(std::set< BWAPI::UpgradeType const * > *self,std::set< BWAPI::UpgradeType const * >::key_type const &key){
        std::set< BWAPI::UpgradeType const * >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::UpgradeType const * >::iterator *std_set_Sl_BWAPI_UpgradeType_SS_const_Sm__Sg__create_iterator_begin(std::set< BWAPI::UpgradeType const * > *self){
        return new std::set< BWAPI::UpgradeType const * >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::UpgradeType const * >::key_type const &std_set_Sl_BWAPI_UpgradeType_SS_const_Sm__Sg__get_next_key(std::set< BWAPI::UpgradeType const * > *self,std::set< BWAPI::UpgradeType const * >::iterator *swigiterator){
        std::set< BWAPI::UpgradeType const * >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::UpgradeType >::key_type const &std_set_Sl_BWAPI_UpgradeType_Sg__getitem(std::set< BWAPI::UpgradeType > *self,std::set< BWAPI::UpgradeType >::key_type const &key){
        std::set< BWAPI::UpgradeType >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_UpgradeType_Sg__ContainsKey(std::set< BWAPI::UpgradeType > *self,std::set< BWAPI::UpgradeType >::key_type const &key){
        std::set< BWAPI::UpgradeType >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_UpgradeType_Sg__Add(std::set< BWAPI::UpgradeType > *self,std::set< BWAPI::UpgradeType >::key_type const &key){
        std::set< BWAPI::UpgradeType >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_UpgradeType_Sg__Remove(std::set< BWAPI::UpgradeType > *self,std::set< BWAPI::UpgradeType >::key_type const &key){
        std::set< BWAPI::UpgradeType >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::UpgradeType >::iterator *std_set_Sl_BWAPI_UpgradeType_Sg__create_iterator_begin(std::set< BWAPI::UpgradeType > *self){
        return new std::set< BWAPI::UpgradeType >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::UpgradeType >::key_type const &std_set_Sl_BWAPI_UpgradeType_Sg__get_next_key(std::set< BWAPI::UpgradeType > *self,std::set< BWAPI::UpgradeType >::iterator *swigiterator){
        std::set< BWAPI::UpgradeType >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::WeaponType >::key_type const &std_set_Sl_BWAPI_WeaponType_Sg__getitem(std::set< BWAPI::WeaponType > *self,std::set< BWAPI::WeaponType >::key_type const &key){
        std::set< BWAPI::WeaponType >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_WeaponType_Sg__ContainsKey(std::set< BWAPI::WeaponType > *self,std::set< BWAPI::WeaponType >::key_type const &key){
        std::set< BWAPI::WeaponType >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_WeaponType_Sg__Add(std::set< BWAPI::WeaponType > *self,std::set< BWAPI::WeaponType >::key_type const &key){
        std::set< BWAPI::WeaponType >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_WeaponType_Sg__Remove(std::set< BWAPI::WeaponType > *self,std::set< BWAPI::WeaponType >::key_type const &key){
        std::set< BWAPI::WeaponType >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::WeaponType >::iterator *std_set_Sl_BWAPI_WeaponType_Sg__create_iterator_begin(std::set< BWAPI::WeaponType > *self){
        return new std::set< BWAPI::WeaponType >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::WeaponType >::key_type const &std_set_Sl_BWAPI_WeaponType_Sg__get_next_key(std::set< BWAPI::WeaponType > *self,std::set< BWAPI::WeaponType >::iterator *swigiterator){
        std::set< BWAPI::WeaponType >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWAPI::TilePosition >::key_type const &std_set_Sl_BWAPI_TilePosition_Sg__getitem(std::set< BWAPI::TilePosition > *self,std::set< BWAPI::TilePosition >::key_type const &key){
        std::set< BWAPI::TilePosition >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWAPI_TilePosition_Sg__ContainsKey(std::set< BWAPI::TilePosition > *self,std::set< BWAPI::TilePosition >::key_type const &key){
        std::set< BWAPI::TilePosition >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWAPI_TilePosition_Sg__Add(std::set< BWAPI::TilePosition > *self,std::set< BWAPI::TilePosition >::key_type const &key){
        std::set< BWAPI::TilePosition >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWAPI_TilePosition_Sg__Remove(std::set< BWAPI::TilePosition > *self,std::set< BWAPI::TilePosition >::key_type const &key){
        std::set< BWAPI::TilePosition >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWAPI::TilePosition >::iterator *std_set_Sl_BWAPI_TilePosition_Sg__create_iterator_begin(std::set< BWAPI::TilePosition > *self){
        return new std::set< BWAPI::TilePosition >::iterator(self->begin());
      }
SWIGINTERN std::set< BWAPI::TilePosition >::key_type const &std_set_Sl_BWAPI_TilePosition_Sg__get_next_key(std::set< BWAPI::TilePosition > *self,std::set< BWAPI::TilePosition >::iterator *swigiterator){
        std::set< BWAPI::TilePosition >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::map< BWAPI::UnitType const *,int >::mapped_type const &std_map_Sl_BWAPI_UnitType_SS_const_Sm__Sc_int_Sg__getitem(std::map< BWAPI::UnitType const *,int > *self,std::map< BWAPI::UnitType const *,int >::key_type const &key){
        std::map< BWAPI::UnitType const *,int >::iterator iter = self->find(key);
        if (iter != self->end())
          return iter->second;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN void std_map_Sl_BWAPI_UnitType_SS_const_Sm__Sc_int_Sg__setitem(std::map< BWAPI::UnitType const *,int > *self,std::map< BWAPI::UnitType const *,int >::key_type const &key,std::map< BWAPI::UnitType const *,int >::mapped_type const &x){
        (*self)[key] = x;
      }
SWIGINTERN bool std_map_Sl_BWAPI_UnitType_SS_const_Sm__Sc_int_Sg__ContainsKey(std::map< BWAPI::UnitType const *,int > *self,std::map< BWAPI::UnitType const *,int >::key_type const &key){
        std::map< BWAPI::UnitType const *, int >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_map_Sl_BWAPI_UnitType_SS_const_Sm__Sc_int_Sg__Add(std::map< BWAPI::UnitType const *,int > *self,std::map< BWAPI::UnitType const *,int >::key_type const &key,std::map< BWAPI::UnitType const *,int >::mapped_type const &val){
        std::map< BWAPI::UnitType const *, int >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(std::pair< BWAPI::UnitType const *, int >(key, val));
      }
SWIGINTERN bool std_map_Sl_BWAPI_UnitType_SS_const_Sm__Sc_int_Sg__Remove(std::map< BWAPI::UnitType const *,int > *self,std::map< BWAPI::UnitType const *,int >::key_type const &key){
        std::map< BWAPI::UnitType const *, int >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::map< BWAPI::UnitType const *,int >::iterator *std_map_Sl_BWAPI_UnitType_SS_const_Sm__Sc_int_Sg__create_iterator_begin(std::map< BWAPI::UnitType const *,int > *self){
        return new std::map< BWAPI::UnitType const *, int >::iterator(self->begin());
      }
SWIGINTERN std::map< BWAPI::UnitType const *,int >::key_type const &std_map_Sl_BWAPI_UnitType_SS_const_Sm__Sc_int_Sg__get_next_key(std::map< BWAPI::UnitType const *,int > *self,std::map< BWAPI::UnitType const *,int >::iterator *swigiterator){
        std::map< BWAPI::UnitType const *, int >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more map elements");
        }
        (*swigiterator)++;
        return (*iter).first;
      }
SWIGINTERN std::list< BWAPI::Unit * >::iterator *std_list_Sl_BWAPI_Unit_Sm__Sg__create_iterator_begin(std::list< BWAPI::Unit * > *self){
        return new std::list< BWAPI::Unit* >::iterator(self->begin());
      }
SWIGINTERN std::list< BWAPI::Unit * >::value_type const &std_list_Sl_BWAPI_Unit_Sm__Sg__get_next_key(std::list< BWAPI::Unit * > *self,std::list< BWAPI::Unit * >::iterator *swigiterator){
        std::list< BWAPI::Unit* >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN bool std_list_Sl_BWAPI_Unit_Sm__Sg__Contains(std::list< BWAPI::Unit * > *self,std::list< BWAPI::Unit * >::value_type const &value){
        return std::find(self->begin(), self->end(), value) != self->end();
      }
SWIGINTERN bool std_list_Sl_BWAPI_Unit_Sm__Sg__Remove(std::list< BWAPI::Unit * > *self,std::list< BWAPI::Unit * >::value_type const &value){
        std::list<BWAPI::Unit* >::iterator it = std::find(self->begin(), self->end(), value);
        if (it != self->end()) {
          self->erase(it);
	  return true;
        }
        return false;
      }
SWIGINTERN std::list< BWAPI::UnitType >::iterator *std_list_Sl_BWAPI_UnitType_Sg__create_iterator_begin(std::list< BWAPI::UnitType > *self){
        return new std::list< BWAPI::UnitType >::iterator(self->begin());
      }
SWIGINTERN std::list< BWAPI::UnitType >::value_type const &std_list_Sl_BWAPI_UnitType_Sg__get_next_key(std::list< BWAPI::UnitType > *self,std::list< BWAPI::UnitType >::iterator *swigiterator){
        std::list< BWAPI::UnitType >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWTA::BaseLocation * >::key_type const &std_set_Sl_BWTA_BaseLocation_Sm__Sg__getitem(std::set< BWTA::BaseLocation * > *self,std::set< BWTA::BaseLocation * >::key_type const &key){
        std::set< BWTA::BaseLocation * >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWTA_BaseLocation_Sm__Sg__ContainsKey(std::set< BWTA::BaseLocation * > *self,std::set< BWTA::BaseLocation * >::key_type const &key){
        std::set< BWTA::BaseLocation * >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWTA_BaseLocation_Sm__Sg__Add(std::set< BWTA::BaseLocation * > *self,std::set< BWTA::BaseLocation * >::key_type const &key){
        std::set< BWTA::BaseLocation * >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWTA_BaseLocation_Sm__Sg__Remove(std::set< BWTA::BaseLocation * > *self,std::set< BWTA::BaseLocation * >::key_type const &key){
        std::set< BWTA::BaseLocation * >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWTA::BaseLocation * >::iterator *std_set_Sl_BWTA_BaseLocation_Sm__Sg__create_iterator_begin(std::set< BWTA::BaseLocation * > *self){
        return new std::set< BWTA::BaseLocation * >::iterator(self->begin());
      }
SWIGINTERN std::set< BWTA::BaseLocation * >::key_type const &std_set_Sl_BWTA_BaseLocation_Sm__Sg__get_next_key(std::set< BWTA::BaseLocation * > *self,std::set< BWTA::BaseLocation * >::iterator *swigiterator){
        std::set< BWTA::BaseLocation * >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWTA::Chokepoint * >::key_type const &std_set_Sl_BWTA_Chokepoint_Sm__Sg__getitem(std::set< BWTA::Chokepoint * > *self,std::set< BWTA::Chokepoint * >::key_type const &key){
        std::set< BWTA::Chokepoint * >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWTA_Chokepoint_Sm__Sg__ContainsKey(std::set< BWTA::Chokepoint * > *self,std::set< BWTA::Chokepoint * >::key_type const &key){
        std::set< BWTA::Chokepoint * >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWTA_Chokepoint_Sm__Sg__Add(std::set< BWTA::Chokepoint * > *self,std::set< BWTA::Chokepoint * >::key_type const &key){
        std::set< BWTA::Chokepoint * >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWTA_Chokepoint_Sm__Sg__Remove(std::set< BWTA::Chokepoint * > *self,std::set< BWTA::Chokepoint * >::key_type const &key){
        std::set< BWTA::Chokepoint * >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWTA::Chokepoint * >::iterator *std_set_Sl_BWTA_Chokepoint_Sm__Sg__create_iterator_begin(std::set< BWTA::Chokepoint * > *self){
        return new std::set< BWTA::Chokepoint * >::iterator(self->begin());
      }
SWIGINTERN std::set< BWTA::Chokepoint * >::key_type const &std_set_Sl_BWTA_Chokepoint_Sm__Sg__get_next_key(std::set< BWTA::Chokepoint * > *self,std::set< BWTA::Chokepoint * >::iterator *swigiterator){
        std::set< BWTA::Chokepoint * >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWTA::Polygon * >::key_type const &std_set_Sl_BWTA_Polygon_Sm__Sg__getitem(std::set< BWTA::Polygon * > *self,std::set< BWTA::Polygon * >::key_type const &key){
        std::set< BWTA::Polygon * >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWTA_Polygon_Sm__Sg__ContainsKey(std::set< BWTA::Polygon * > *self,std::set< BWTA::Polygon * >::key_type const &key){
        std::set< BWTA::Polygon * >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWTA_Polygon_Sm__Sg__Add(std::set< BWTA::Polygon * > *self,std::set< BWTA::Polygon * >::key_type const &key){
        std::set< BWTA::Polygon * >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWTA_Polygon_Sm__Sg__Remove(std::set< BWTA::Polygon * > *self,std::set< BWTA::Polygon * >::key_type const &key){
        std::set< BWTA::Polygon * >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWTA::Polygon * >::iterator *std_set_Sl_BWTA_Polygon_Sm__Sg__create_iterator_begin(std::set< BWTA::Polygon * > *self){
        return new std::set< BWTA::Polygon * >::iterator(self->begin());
      }
SWIGINTERN std::set< BWTA::Polygon * >::key_type const &std_set_Sl_BWTA_Polygon_Sm__Sg__get_next_key(std::set< BWTA::Polygon * > *self,std::set< BWTA::Polygon * >::iterator *swigiterator){
        std::set< BWTA::Polygon * >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }
SWIGINTERN std::set< BWTA::Region * >::key_type const &std_set_Sl_BWTA_Region_Sm__Sg__getitem(std::set< BWTA::Region * > *self,std::set< BWTA::Region * >::key_type const &key){
        std::set< BWTA::Region * >::iterator iter = self->find(key);
        if (iter != self->end())
          return *iter;
        else
          throw std::out_of_range("key not found");
      }
SWIGINTERN bool std_set_Sl_BWTA_Region_Sm__Sg__ContainsKey(std::set< BWTA::Region * > *self,std::set< BWTA::Region * >::key_type const &key){
        std::set< BWTA::Region * >::iterator iter = self->find(key);
        return iter != self->end();
      }
SWIGINTERN void std_set_Sl_BWTA_Region_Sm__Sg__Add(std::set< BWTA::Region * > *self,std::set< BWTA::Region * >::key_type const &key){
        std::set< BWTA::Region * >::iterator iter = self->find(key);
        if (iter != self->end())
          throw std::out_of_range("key already exists");
        self->insert(key);
      }
SWIGINTERN bool std_set_Sl_BWTA_Region_Sm__Sg__Remove(std::set< BWTA::Region * > *self,std::set< BWTA::Region * >::key_type const &key){
        std::set< BWTA::Region * >::iterator iter = self->find(key);
        if (iter != self->end()) {
          self->erase(iter);
          return true;
        }                
        return false;
      }
SWIGINTERN std::set< BWTA::Region * >::iterator *std_set_Sl_BWTA_Region_Sm__Sg__create_iterator_begin(std::set< BWTA::Region * > *self){
        return new std::set< BWTA::Region * >::iterator(self->begin());
      }
SWIGINTERN std::set< BWTA::Region * >::key_type const &std_set_Sl_BWTA_Region_Sm__Sg__get_next_key(std::set< BWTA::Region * > *self,std::set< BWTA::Region * >::iterator *swigiterator){
        std::set< BWTA::Region * >::iterator iter = *swigiterator;
        if (iter == self->end()) {
          delete swigiterator;
          throw std::out_of_range("no more set elements");
        }
        (*swigiterator)++;
        return (*iter);
      }

#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void SWIGSTDCALL CSharp_BWAPI_init() {
  BWAPI::BWAPI_init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Race__SWIG_0() {
  void * jresult ;
  BWAPI::Race *result = 0 ;
  
  result = (BWAPI::Race *)new BWAPI::Race();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Race__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::Race *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::Race *)new BWAPI::Race(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Race__SWIG_2(void * jarg1) {
  void * jresult ;
  BWAPI::Race *arg1 = 0 ;
  BWAPI::Race *result = 0 ;
  
  arg1 = (BWAPI::Race *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Race const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::Race *)new BWAPI::Race((BWAPI::Race const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Race_opAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::Race *arg2 = 0 ;
  BWAPI::Race *result = 0 ;
  
  arg1 = (BWAPI::Race *)jarg1; 
  arg2 = (BWAPI::Race *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Race const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::Race *) &(arg1)->operator =((BWAPI::Race const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Race_opEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::Race *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::Race *)jarg1; 
  arg2 = (BWAPI::Race *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Race const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::Race const *)arg1)->operator ==((BWAPI::Race const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Race_opNotEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::Race *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::Race *)jarg1; 
  arg2 = (BWAPI::Race *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Race const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::Race const *)arg1)->operator !=((BWAPI::Race const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Race_opLessThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::Race *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::Race *)jarg1; 
  arg2 = (BWAPI::Race *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Race const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::Race const *)arg1)->operator <((BWAPI::Race const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Race_getID(void * jarg1) {
  int jresult ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  int result;
  
  arg1 = (BWAPI::Race *)jarg1; 
  result = (int)((BWAPI::Race const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Race_getName(void * jarg1) {
  char * jresult ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::Race *)jarg1; 
  result = ((BWAPI::Race const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Race_getWorker(void * jarg1) {
  void * jresult ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::UnitType *result = 0 ;
  
  arg1 = (BWAPI::Race *)jarg1; 
  result = (BWAPI::UnitType *)((BWAPI::Race const *)arg1)->getWorker();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Race_getCenter(void * jarg1) {
  void * jresult ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::UnitType *result = 0 ;
  
  arg1 = (BWAPI::Race *)jarg1; 
  result = (BWAPI::UnitType *)((BWAPI::Race const *)arg1)->getCenter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Race_getRefinery(void * jarg1) {
  void * jresult ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::UnitType *result = 0 ;
  
  arg1 = (BWAPI::Race *)jarg1; 
  result = (BWAPI::UnitType *)((BWAPI::Race const *)arg1)->getRefinery();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Race_getTransport(void * jarg1) {
  void * jresult ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::UnitType *result = 0 ;
  
  arg1 = (BWAPI::Race *)jarg1; 
  result = (BWAPI::UnitType *)((BWAPI::Race const *)arg1)->getTransport();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Race_getSupplyProvider(void * jarg1) {
  void * jresult ;
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  BWAPI::UnitType *result = 0 ;
  
  arg1 = (BWAPI::Race *)jarg1; 
  result = (BWAPI::UnitType *)((BWAPI::Race const *)arg1)->getSupplyProvider();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Race(void * jarg1) {
  BWAPI::Race *arg1 = (BWAPI::Race *) 0 ;
  
  arg1 = (BWAPI::Race *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getRace(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  BWAPI::Race result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = BWAPI::Races::getRace(*arg1);
  jresult = new BWAPI::Race((const BWAPI::Race &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allRaces() {
  void * jresult ;
  std::set< BWAPI::Race > *result = 0 ;
  
  result = (std::set< BWAPI::Race > *) &BWAPI::Races::allRaces();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_initRaces() {
  BWAPI::Races::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_get() {
  void * jresult ;
  BWAPI::Race *result = 0 ;
  
  result = (BWAPI::Race *)&BWAPI::Races::Zerg;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_get() {
  void * jresult ;
  BWAPI::Race *result = 0 ;
  
  result = (BWAPI::Race *)&BWAPI::Races::Terran;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_get() {
  void * jresult ;
  BWAPI::Race *result = 0 ;
  
  result = (BWAPI::Race *)&BWAPI::Races::Protoss;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Random_get() {
  void * jresult ;
  BWAPI::Race *result = 0 ;
  
  result = (BWAPI::Race *)&BWAPI::Races::Random;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Other_get() {
  void * jresult ;
  BWAPI::Race *result = 0 ;
  
  result = (BWAPI::Race *)&BWAPI::Races::Other;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RaceNone_get() {
  void * jresult ;
  BWAPI::Race *result = 0 ;
  
  result = (BWAPI::Race *)&BWAPI::Races::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RaceUnknown_get() {
  void * jresult ;
  BWAPI::Race *result = 0 ;
  
  result = (BWAPI::Race *)&BWAPI::Races::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TechType__SWIG_0() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)new BWAPI::TechType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TechType__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::TechType *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::TechType *)new BWAPI::TechType(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TechType__SWIG_2(void * jarg1) {
  void * jresult ;
  BWAPI::TechType *arg1 = 0 ;
  BWAPI::TechType *result = 0 ;
  
  arg1 = (BWAPI::TechType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TechType const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::TechType *)new BWAPI::TechType((BWAPI::TechType const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechType_opAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  BWAPI::TechType *arg2 = 0 ;
  BWAPI::TechType *result = 0 ;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  arg2 = (BWAPI::TechType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TechType const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::TechType *) &(arg1)->operator =((BWAPI::TechType const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TechType_opEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  BWAPI::TechType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  arg2 = (BWAPI::TechType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TechType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::TechType const *)arg1)->operator ==((BWAPI::TechType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TechType_opNotEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  BWAPI::TechType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  arg2 = (BWAPI::TechType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TechType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::TechType const *)arg1)->operator !=((BWAPI::TechType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TechType_opLessThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  BWAPI::TechType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  arg2 = (BWAPI::TechType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TechType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::TechType const *)arg1)->operator <((BWAPI::TechType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TechType_getID(void * jarg1) {
  int jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  int result;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  result = (int)((BWAPI::TechType const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_TechType_getName(void * jarg1) {
  char * jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  result = ((BWAPI::TechType const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TechType_mineralPrice(void * jarg1) {
  int jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  int result;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  result = (int)((BWAPI::TechType const *)arg1)->mineralPrice();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TechType_gasPrice(void * jarg1) {
  int jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  int result;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  result = (int)((BWAPI::TechType const *)arg1)->gasPrice();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TechType_energyUsed(void * jarg1) {
  int jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  int result;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  result = (int)((BWAPI::TechType const *)arg1)->energyUsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechType_whatResearches(void * jarg1) {
  void * jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  BWAPI::UnitType *result = 0 ;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  result = (BWAPI::UnitType *)((BWAPI::TechType const *)arg1)->whatResearches();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechType_getWeapon(void * jarg1) {
  void * jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  result = (BWAPI::WeaponType *)((BWAPI::TechType const *)arg1)->getWeapon();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechType_whatUses(void * jarg1) {
  void * jresult ;
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  std::set< BWAPI::UnitType const * > *result = 0 ;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  result = (std::set< BWAPI::UnitType const * > *) &((BWAPI::TechType const *)arg1)->whatUses();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TechType(void * jarg1) {
  BWAPI::TechType *arg1 = (BWAPI::TechType *) 0 ;
  
  arg1 = (BWAPI::TechType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getTechType(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  BWAPI::TechType result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = BWAPI::TechTypes::getTechType(*arg1);
  jresult = new BWAPI::TechType((const BWAPI::TechType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allTechTypes() {
  void * jresult ;
  std::set< BWAPI::TechType > *result = 0 ;
  
  result = (std::set< BWAPI::TechType > *) &BWAPI::TechTypes::allTechTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_initTechTypes() {
  BWAPI::TechTypes::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Stim_Packs_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Stim_Packs;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeLockdown_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Lockdown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeEMP_Shockwave_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::EMP_Shockwave;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Spider_Mines_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Spider_Mines;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scanner_Sweep_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Scanner_Sweep;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Tank_Siege_Mode_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Tank_Siege_Mode;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Defensive_Matrix_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Defensive_Matrix;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeIrradiate_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Irradiate;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeYamato_Gun_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Yamato_Gun;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Cloaking_Field_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Cloaking_Field;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Personnel_Cloaking_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Personnel_Cloaking;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Burrowing_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Burrowing;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Infestation_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Infestation;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeSpawn_Broodlings_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Spawn_Broodlings;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeDark_Swarm_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Dark_Swarm;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypePlague_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Plague;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeConsume_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Consume;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeEnsnare_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Ensnare;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeParasite_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Parasite;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypePsionic_Storm_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Psionic_Storm;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hallucination_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Hallucination;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Recall_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Recall;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeStasis_Field_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Stasis_Field;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Archon_Warp_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Archon_Warp;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeRestoration_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Restoration;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeDisruption_Web_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Disruption_Web;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeMind_Control_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Mind_Control;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dark_Archon_Meld_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Dark_Archon_Meld;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeFeedback_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Feedback;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeOptical_Flare_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Optical_Flare;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeMaelstrom_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Maelstrom;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Lurker_Aspect_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Lurker_Aspect;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Healing_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Healing;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeNone_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeUnknown_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeNuclear_Strike_get() {
  void * jresult ;
  BWAPI::TechType *result = 0 ;
  
  result = (BWAPI::TechType *)&BWAPI::TechTypes::Nuclear_Strike;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UpgradeType__SWIG_0() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)new BWAPI::UpgradeType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UpgradeType__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::UpgradeType *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::UpgradeType *)new BWAPI::UpgradeType(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UpgradeType__SWIG_2(void * jarg1) {
  void * jresult ;
  BWAPI::UpgradeType *arg1 = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  arg1 = (BWAPI::UpgradeType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::UpgradeType const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::UpgradeType *)new BWAPI::UpgradeType((BWAPI::UpgradeType const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeType_opAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  BWAPI::UpgradeType *arg2 = 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  arg2 = (BWAPI::UpgradeType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::UpgradeType const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::UpgradeType *) &(arg1)->operator =((BWAPI::UpgradeType const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UpgradeType_opEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  BWAPI::UpgradeType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  arg2 = (BWAPI::UpgradeType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::UpgradeType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::UpgradeType const *)arg1)->operator ==((BWAPI::UpgradeType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UpgradeType_opNotEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  BWAPI::UpgradeType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  arg2 = (BWAPI::UpgradeType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::UpgradeType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::UpgradeType const *)arg1)->operator !=((BWAPI::UpgradeType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UpgradeType_opLessThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  BWAPI::UpgradeType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  arg2 = (BWAPI::UpgradeType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::UpgradeType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::UpgradeType const *)arg1)->operator <((BWAPI::UpgradeType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UpgradeType_getID(void * jarg1) {
  int jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_UpgradeType_getName(void * jarg1) {
  char * jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = ((BWAPI::UpgradeType const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeType_getRace(void * jarg1) {
  void * jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  BWAPI::Race result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = ((BWAPI::UpgradeType const *)arg1)->getRace();
  jresult = new BWAPI::Race((const BWAPI::Race &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UpgradeType_mineralPriceBase(void * jarg1) {
  int jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->mineralPriceBase();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UpgradeType_mineralPriceFactor(void * jarg1) {
  int jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->mineralPriceFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UpgradeType_gasPriceBase(void * jarg1) {
  int jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->gasPriceBase();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UpgradeType_gasPriceFactor(void * jarg1) {
  int jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->gasPriceFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UpgradeType_upgradeTimeBase(void * jarg1) {
  int jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->upgradeTimeBase();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UpgradeType_upgradeTimeFactor(void * jarg1) {
  int jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->upgradeTimeFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UpgradeType_maxRepeats(void * jarg1) {
  int jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = (int)((BWAPI::UpgradeType const *)arg1)->maxRepeats();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeType_whatUpgrades(void * jarg1) {
  void * jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  BWAPI::UnitType *result = 0 ;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = (BWAPI::UnitType *)((BWAPI::UpgradeType const *)arg1)->whatUpgrades();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeType_whatUses(void * jarg1) {
  void * jresult ;
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  std::set< BWAPI::UnitType const * > *result = 0 ;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  result = (std::set< BWAPI::UnitType const * > *) &((BWAPI::UpgradeType const *)arg1)->whatUses();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UpgradeType(void * jarg1) {
  BWAPI::UpgradeType *arg1 = (BWAPI::UpgradeType *) 0 ;
  
  arg1 = (BWAPI::UpgradeType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getUpgradeType(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  BWAPI::UpgradeType result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = BWAPI::UpgradeTypes::getUpgradeType(*arg1);
  jresult = new BWAPI::UpgradeType((const BWAPI::UpgradeType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allUpgradeTypes() {
  void * jresult ;
  std::set< BWAPI::UpgradeType > *result = 0 ;
  
  result = (std::set< BWAPI::UpgradeType > *) &BWAPI::UpgradeTypes::allUpgradeTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_initUpgradeTypes() {
  BWAPI::UpgradeTypes::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Infantry_Armor_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Terran_Infantry_Armor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Vehicle_Plating_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Terran_Vehicle_Plating;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Ship_Plating_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Terran_Ship_Plating;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Carapace_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Zerg_Carapace;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Flyer_Carapace_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Zerg_Flyer_Carapace;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Armor_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Protoss_Armor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Plating_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Protoss_Plating;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Infantry_Weapons_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Terran_Infantry_Weapons;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Vehicle_Weapons_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Terran_Vehicle_Weapons;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Ship_Weapons_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Terran_Ship_Weapons;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Melee_Attacks_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Zerg_Melee_Attacks;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Missile_Attacks_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Zerg_Missile_Attacks;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Flyer_Attacks_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Zerg_Flyer_Attacks;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Ground_Weapons_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Protoss_Ground_Weapons;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Air_Weapons_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Protoss_Air_Weapons;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Plasma_Shields_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Protoss_Plasma_Shields;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_U_238_Shells_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::U_238_Shells;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Ion_Thrusters_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Ion_Thrusters;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Titan_Reactor_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Titan_Reactor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Ocular_Implants_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Ocular_Implants;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Moebius_Reactor_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Moebius_Reactor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Apollo_Reactor_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Apollo_Reactor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Colossus_Reactor_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Colossus_Reactor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Ventral_Sacs_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Ventral_Sacs;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Antennae_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Antennae;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Pneumatized_Carapace_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Pneumatized_Carapace;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Metabolic_Boost_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Metabolic_Boost;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Adrenal_Glands_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Adrenal_Glands;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Muscular_Augments_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Muscular_Augments;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Grooved_Spines_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Grooved_Spines;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gamete_Meiosis_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Gamete_Meiosis;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Metasynaptic_Node_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Metasynaptic_Node;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Singularity_Charge_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Singularity_Charge;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Leg_Enhancements_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Leg_Enhancements;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scarab_Damage_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Scarab_Damage;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Reaver_Capacity_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Reaver_Capacity;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gravitic_Drive_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Gravitic_Drive;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sensor_Array_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Sensor_Array;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gravitic_Boosters_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Gravitic_Boosters;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Khaydarin_Amulet_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Khaydarin_Amulet;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Apial_Sensors_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Apial_Sensors;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gravitic_Thrusters_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Gravitic_Thrusters;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Carrier_Capacity_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Carrier_Capacity;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Khaydarin_Core_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Khaydarin_Core;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Argus_Jewel_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Argus_Jewel;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Argus_Talisman_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Argus_Talisman;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Caduceus_Reactor_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Caduceus_Reactor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Chitinous_Plating_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Chitinous_Plating;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Anabolic_Synthesis_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Anabolic_Synthesis;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Charon_Booster_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Charon_Booster;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypeNone_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypeUnknown_get() {
  void * jresult ;
  BWAPI::UpgradeType *result = 0 ;
  
  result = (BWAPI::UpgradeType *)&BWAPI::UpgradeTypes::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Position__SWIG_0() {
  void * jresult ;
  BWAPI::Position *result = 0 ;
  
  result = (BWAPI::Position *)new BWAPI::Position();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Position__SWIG_1(void * jarg1) {
  void * jresult ;
  BWAPI::TilePosition *arg1 = 0 ;
  BWAPI::Position *result = 0 ;
  
  arg1 = (BWAPI::TilePosition *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::Position *)new BWAPI::Position((BWAPI::TilePosition const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Position__SWIG_2(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  BWAPI::Position *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (BWAPI::Position *)new BWAPI::Position(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Position_opEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::Position *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::Position const *)arg1)->operator ==((BWAPI::Position const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Position_opNotEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::Position *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::Position const *)arg1)->operator !=((BWAPI::Position const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Position_opLessThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::Position *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::Position const *)arg1)->operator <((BWAPI::Position const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Position_opPlus(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::Position *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return 0;
  } 
  result = ((BWAPI::Position const *)arg1)->operator +((BWAPI::Position const &)*arg2);
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Position_opMinus(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::Position *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return 0;
  } 
  result = ((BWAPI::Position const *)arg1)->operator -((BWAPI::Position const &)*arg2);
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Position_opAdd(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  BWAPI::Position *result = 0 ;
  
  arg1 = (BWAPI::Position *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::Position *) &(arg1)->operator +=((BWAPI::Position const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Position_opSubtract(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  BWAPI::Position *result = 0 ;
  
  arg1 = (BWAPI::Position *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::Position *) &(arg1)->operator -=((BWAPI::Position const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Position_getDistance(void * jarg1, void * jarg2) {
  double jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  BWAPI::Position *arg2 = 0 ;
  double result;
  
  arg1 = (BWAPI::Position *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return 0;
  } 
  result = (double)((BWAPI::Position const *)arg1)->getDistance((BWAPI::Position const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Position_getLength(void * jarg1) {
  double jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  double result;
  
  arg1 = (BWAPI::Position *)jarg1; 
  result = (double)((BWAPI::Position const *)arg1)->getLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Position_x(void * jarg1) {
  void * jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  int *result = 0 ;
  
  arg1 = (BWAPI::Position *)jarg1; 
  result = (int *) &(arg1)->x();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Position_y(void * jarg1) {
  void * jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  int *result = 0 ;
  
  arg1 = (BWAPI::Position *)jarg1; 
  result = (int *) &(arg1)->y();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Position_xConst(void * jarg1) {
  int jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  int result;
  
  arg1 = (BWAPI::Position *)jarg1; 
  result = (int)((BWAPI::Position const *)arg1)->x();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Position_yConst(void * jarg1) {
  int jresult ;
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  int result;
  
  arg1 = (BWAPI::Position *)jarg1; 
  result = (int)((BWAPI::Position const *)arg1)->y();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Position(void * jarg1) {
  BWAPI::Position *arg1 = (BWAPI::Position *) 0 ;
  
  arg1 = (BWAPI::Position *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PositionInvalid_get() {
  void * jresult ;
  BWAPI::Position *result = 0 ;
  
  result = (BWAPI::Position *)&BWAPI::Positions::Invalid;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PositionNone_get() {
  void * jresult ;
  BWAPI::Position *result = 0 ;
  
  result = (BWAPI::Position *)&BWAPI::Positions::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PositionUnknown_get() {
  void * jresult ;
  BWAPI::Position *result = 0 ;
  
  result = (BWAPI::Position *)&BWAPI::Positions::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AIModule() {
  void * jresult ;
  BWAPI::AIModule *result = 0 ;
  
  result = (BWAPI::AIModule *)new BWAPI::AIModule();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AIModule(void * jarg1) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onStart(void * jarg1) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  (arg1)->onStart();
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onEnd(void * jarg1, unsigned int jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  bool arg2 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->onEnd(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onFrame(void * jarg1) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  (arg1)->onFrame();
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AIModule_onSendText(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  std::string arg2 ;
  bool result;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  if (!jarg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  (&arg2)->assign(jarg2); 
  result = (bool)(arg1)->onSendText(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onPlayerLeft(void * jarg1, void * jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  (arg1)->onPlayerLeft(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onNukeDetect(void * jarg1, void * jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->onNukeDetect(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onUnitCreate(void * jarg1, void * jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  (arg1)->onUnitCreate(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onUnitDestroy(void * jarg1, void * jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  (arg1)->onUnitDestroy(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onUnitMorph(void * jarg1, void * jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  (arg1)->onUnitMorph(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onUnitShow(void * jarg1, void * jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  (arg1)->onUnitShow(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onUnitHide(void * jarg1, void * jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  (arg1)->onUnitHide(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_AIModule_onUnitRenegade(void * jarg1, void * jarg2) {
  BWAPI::AIModule *arg1 = (BWAPI::AIModule *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  
  arg1 = (BWAPI::AIModule *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  (arg1)->onUnitRenegade(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AttackType__SWIG_0() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)new BWAPI::AttackType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AttackType__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::AttackType *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::AttackType *)new BWAPI::AttackType(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AttackType__SWIG_2(void * jarg1) {
  void * jresult ;
  BWAPI::AttackType *arg1 = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  arg1 = (BWAPI::AttackType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::AttackType const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::AttackType *)new BWAPI::AttackType((BWAPI::AttackType const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttackType_opAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::AttackType *arg1 = (BWAPI::AttackType *) 0 ;
  BWAPI::AttackType *arg2 = 0 ;
  BWAPI::AttackType *result = 0 ;
  
  arg1 = (BWAPI::AttackType *)jarg1; 
  arg2 = (BWAPI::AttackType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::AttackType const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::AttackType *) &(arg1)->operator =((BWAPI::AttackType const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AttackType_opEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::AttackType *arg1 = (BWAPI::AttackType *) 0 ;
  BWAPI::AttackType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::AttackType *)jarg1; 
  arg2 = (BWAPI::AttackType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::AttackType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::AttackType const *)arg1)->operator ==((BWAPI::AttackType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AttackType_opNotEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::AttackType *arg1 = (BWAPI::AttackType *) 0 ;
  BWAPI::AttackType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::AttackType *)jarg1; 
  arg2 = (BWAPI::AttackType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::AttackType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::AttackType const *)arg1)->operator !=((BWAPI::AttackType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AttackType_opLessThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::AttackType *arg1 = (BWAPI::AttackType *) 0 ;
  BWAPI::AttackType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::AttackType *)jarg1; 
  arg2 = (BWAPI::AttackType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::AttackType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::AttackType const *)arg1)->operator <((BWAPI::AttackType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_AttackType_getID(void * jarg1) {
  int jresult ;
  BWAPI::AttackType *arg1 = (BWAPI::AttackType *) 0 ;
  int result;
  
  arg1 = (BWAPI::AttackType *)jarg1; 
  result = (int)((BWAPI::AttackType const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_AttackType_getName(void * jarg1) {
  char * jresult ;
  BWAPI::AttackType *arg1 = (BWAPI::AttackType *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::AttackType *)jarg1; 
  result = ((BWAPI::AttackType const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AttackType(void * jarg1) {
  BWAPI::AttackType *arg1 = (BWAPI::AttackType *) 0 ;
  
  arg1 = (BWAPI::AttackType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getAttackType(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  BWAPI::AttackType result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = BWAPI::AttackTypes::getAttackType(*arg1);
  jresult = new BWAPI::AttackType((const BWAPI::AttackType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allAttackTypes() {
  void * jresult ;
  std::set< BWAPI::AttackType > *result = 0 ;
  
  result = (std::set< BWAPI::AttackType > *) &BWAPI::AttackTypes::allAttackTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_initAttackTypes() {
  BWAPI::AttackTypes::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Melee_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Melee;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Fusion_Cutter_Hit_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Fusion_Cutter_Hit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gauss_Rifle_Hit_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Gauss_Rifle_Hit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_C_10_Canister_Rifle_Hit_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::C_10_Canister_Rifle_Hit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttackTypeGemeni_Missiles_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Gemini_Missiles;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttackTypeFragmentation_Grenade_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Fragmentation_Grenade;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttackTypeLongbolt_Missile_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Longbolt_Missile;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ATS_ATA_Laser_Battery_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::ATS_ATA_Laser_Battery;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttackTypeBurst_Lasers_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Burst_Lasers;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Arclite_Shock_Cannon_Hit_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Arclite_Shock_Cannon_Hit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EMP_Missile_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::EMP_Missile;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dual_Photon_Blasters_Hit_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Dual_Photon_Blasters_Hit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particle_Beam_Hit_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Particle_Beam_Hit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Anti_Matter_Missile_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Anti_Matter_Missile;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttackTypePulse_Cannon_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Pulse_Cannon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Psionic_Shockwave_Hit_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Psionic_Shockwave_Hit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Psionic_Storm_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Psionic_Storm;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttackTypeYamato_Gun_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Yamato_Gun;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttackTypePhase_Disruptor_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Phase_Disruptor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STA_STS_Cannon_Overlay_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::STA_STS_Cannon_Overlay;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Sunken_Colony_Tentacle_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Sunken_Colony_Tentacle;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttackTypeAcid_Spore_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Acid_Spore;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttackTypeGlave_Wurm_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Glave_Wurm;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttackTypeSeeker_Spores_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Seeker_Spores;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Queen_Spell_Carrier_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Queen_Spell_Carrier;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Plague_Cloud_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Plague_Cloud;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Consume_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Consume;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Needle_Spine_Hit_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Needle_Spine_Hit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Invisible_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Invisible;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Optical_Flare_Grenade_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Optical_Flare_Grenade;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttackTypeHalo_Rockets_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Halo_Rockets;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttackTypeSubterranean_Spines_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Subterranean_Spines;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Corrosive_Acid_Shot_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Corrosive_Acid_Shot;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Neutron_Flare_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Neutron_Flare;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttackTypeNone_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttackTypeUnknown_get() {
  void * jresult ;
  BWAPI::AttackType *result = 0 ;
  
  result = (BWAPI::AttackType *)&BWAPI::AttackTypes::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_0() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)new BWAPI::Color();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::Color *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::Color *)new BWAPI::Color(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_2(void * jarg1) {
  void * jresult ;
  BWAPI::Color *arg1 = 0 ;
  BWAPI::Color *result = 0 ;
  
  arg1 = (BWAPI::Color *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Color const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::Color *)new BWAPI::Color((BWAPI::Color const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Color__SWIG_3(int jarg1, int jarg2, int jarg3) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  BWAPI::Color *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (BWAPI::Color *)new BWAPI::Color(arg1,arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Color_opAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  BWAPI::Color *arg2 = 0 ;
  BWAPI::Color *result = 0 ;
  
  arg1 = (BWAPI::Color *)jarg1; 
  arg2 = (BWAPI::Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Color const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::Color *) &(arg1)->operator =((BWAPI::Color const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Color_opEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  BWAPI::Color *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::Color *)jarg1; 
  arg2 = (BWAPI::Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Color const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::Color const *)arg1)->operator ==((BWAPI::Color const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Color_opNotEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  BWAPI::Color *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::Color *)jarg1; 
  arg2 = (BWAPI::Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Color const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::Color const *)arg1)->operator !=((BWAPI::Color const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Color_opLessThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  BWAPI::Color *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::Color *)jarg1; 
  arg2 = (BWAPI::Color *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Color const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::Color const *)arg1)->operator <((BWAPI::Color const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Color_getID(void * jarg1) {
  int jresult ;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  int result;
  
  arg1 = (BWAPI::Color *)jarg1; 
  result = (int)((BWAPI::Color const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Color_red(void * jarg1) {
  int jresult ;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  int result;
  
  arg1 = (BWAPI::Color *)jarg1; 
  result = (int)((BWAPI::Color const *)arg1)->red();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Color_green(void * jarg1) {
  int jresult ;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  int result;
  
  arg1 = (BWAPI::Color *)jarg1; 
  result = (int)((BWAPI::Color const *)arg1)->green();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Color_blue(void * jarg1) {
  int jresult ;
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  int result;
  
  arg1 = (BWAPI::Color *)jarg1; 
  result = (int)((BWAPI::Color const *)arg1)->blue();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Color(void * jarg1) {
  BWAPI::Color *arg1 = (BWAPI::Color *) 0 ;
  
  arg1 = (BWAPI::Color *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_initColors() {
  BWAPI::Colors::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Red_get() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)&BWAPI::Colors::Red;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Green_get() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)&BWAPI::Colors::Green;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Blue_get() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)&BWAPI::Colors::Blue;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Yellow_get() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)&BWAPI::Colors::Yellow;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Cyan_get() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)&BWAPI::Colors::Cyan;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Purple_get() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)&BWAPI::Colors::Purple;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Orange_get() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)&BWAPI::Colors::Orange;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Black_get() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)&BWAPI::Colors::Black;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_White_get() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)&BWAPI::Colors::White;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Grey_get() {
  void * jresult ;
  BWAPI::Color *result = 0 ;
  
  result = (BWAPI::Color *)&BWAPI::Colors::Grey;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TILE_SIZE_get() {
  int jresult ;
  int result;
  
  result = (int)(int)BWAPI::TILE_SIZE;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PYLON_X_RADIUS_get() {
  int jresult ;
  int result;
  
  result = (int)(int)BWAPI::PYLON_X_RADIUS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PYLON_Y_RADIUS_get() {
  int jresult ;
  int result;
  
  result = (int)(int)BWAPI::PYLON_Y_RADIUS;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DamageType__SWIG_0() {
  void * jresult ;
  BWAPI::DamageType *result = 0 ;
  
  result = (BWAPI::DamageType *)new BWAPI::DamageType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DamageType__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::DamageType *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::DamageType *)new BWAPI::DamageType(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DamageType__SWIG_2(void * jarg1) {
  void * jresult ;
  BWAPI::DamageType *arg1 = 0 ;
  BWAPI::DamageType *result = 0 ;
  
  arg1 = (BWAPI::DamageType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::DamageType const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::DamageType *)new BWAPI::DamageType((BWAPI::DamageType const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DamageType_opAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  BWAPI::DamageType *arg2 = 0 ;
  BWAPI::DamageType *result = 0 ;
  
  arg1 = (BWAPI::DamageType *)jarg1; 
  arg2 = (BWAPI::DamageType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::DamageType const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::DamageType *) &(arg1)->operator =((BWAPI::DamageType const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DamageType_opEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  BWAPI::DamageType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::DamageType *)jarg1; 
  arg2 = (BWAPI::DamageType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::DamageType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::DamageType const *)arg1)->operator ==((BWAPI::DamageType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DamageType_opNotEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  BWAPI::DamageType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::DamageType *)jarg1; 
  arg2 = (BWAPI::DamageType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::DamageType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::DamageType const *)arg1)->operator !=((BWAPI::DamageType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DamageType_opLessThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  BWAPI::DamageType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::DamageType *)jarg1; 
  arg2 = (BWAPI::DamageType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::DamageType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::DamageType const *)arg1)->operator <((BWAPI::DamageType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DamageType_getID(void * jarg1) {
  int jresult ;
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  int result;
  
  arg1 = (BWAPI::DamageType *)jarg1; 
  result = (int)((BWAPI::DamageType const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_DamageType_getName(void * jarg1) {
  char * jresult ;
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::DamageType *)jarg1; 
  result = ((BWAPI::DamageType const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DamageType(void * jarg1) {
  BWAPI::DamageType *arg1 = (BWAPI::DamageType *) 0 ;
  
  arg1 = (BWAPI::DamageType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getDamageType(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  BWAPI::DamageType result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = BWAPI::DamageTypes::getDamageType(*arg1);
  jresult = new BWAPI::DamageType((const BWAPI::DamageType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allDamageTypes() {
  void * jresult ;
  std::set< BWAPI::DamageType > *result = 0 ;
  
  result = (std::set< BWAPI::DamageType > *) &BWAPI::DamageTypes::allDamageTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_initDamageTypes() {
  BWAPI::DamageTypes::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DamageTypeIndependent_get() {
  void * jresult ;
  BWAPI::DamageType *result = 0 ;
  
  result = (BWAPI::DamageType *)&BWAPI::DamageTypes::Independent;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Explosive_get() {
  void * jresult ;
  BWAPI::DamageType *result = 0 ;
  
  result = (BWAPI::DamageType *)&BWAPI::DamageTypes::Explosive;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Concussive_get() {
  void * jresult ;
  BWAPI::DamageType *result = 0 ;
  
  result = (BWAPI::DamageType *)&BWAPI::DamageTypes::Concussive;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DamageTypeNormal_get() {
  void * jresult ;
  BWAPI::DamageType *result = 0 ;
  
  result = (BWAPI::DamageType *)&BWAPI::DamageTypes::Normal;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Ignore_Armor_get() {
  void * jresult ;
  BWAPI::DamageType *result = 0 ;
  
  result = (BWAPI::DamageType *)&BWAPI::DamageTypes::Ignore_Armor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DamageTypeNone_get() {
  void * jresult ;
  BWAPI::DamageType *result = 0 ;
  
  result = (BWAPI::DamageType *)&BWAPI::DamageTypes::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DamageTypeUnknown_get() {
  void * jresult ;
  BWAPI::DamageType *result = 0 ;
  
  result = (BWAPI::DamageType *)&BWAPI::DamageTypes::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Error__SWIG_0() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)new BWAPI::Error();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Error__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::Error *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::Error *)new BWAPI::Error(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Error__SWIG_2(void * jarg1) {
  void * jresult ;
  BWAPI::Error *arg1 = 0 ;
  BWAPI::Error *result = 0 ;
  
  arg1 = (BWAPI::Error *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Error const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::Error *)new BWAPI::Error((BWAPI::Error const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Error_opAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  BWAPI::Error *arg2 = 0 ;
  BWAPI::Error *result = 0 ;
  
  arg1 = (BWAPI::Error *)jarg1; 
  arg2 = (BWAPI::Error *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Error const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::Error *) &(arg1)->operator =((BWAPI::Error const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Error_opEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  BWAPI::Error *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::Error *)jarg1; 
  arg2 = (BWAPI::Error *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Error const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::Error const *)arg1)->operator ==((BWAPI::Error const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Error_opNotEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  BWAPI::Error *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::Error *)jarg1; 
  arg2 = (BWAPI::Error *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Error const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::Error const *)arg1)->operator !=((BWAPI::Error const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Error_opLessThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  BWAPI::Error *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::Error *)jarg1; 
  arg2 = (BWAPI::Error *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Error const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::Error const *)arg1)->operator <((BWAPI::Error const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Error_getID(void * jarg1) {
  int jresult ;
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  int result;
  
  arg1 = (BWAPI::Error *)jarg1; 
  result = (int)((BWAPI::Error const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Error_toErrorString(void * jarg1) {
  char * jresult ;
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::Error *)jarg1; 
  result = ((BWAPI::Error const *)arg1)->toString();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Error(void * jarg1) {
  BWAPI::Error *arg1 = (BWAPI::Error *) 0 ;
  
  arg1 = (BWAPI::Error *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getError(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  BWAPI::Error result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = BWAPI::Errors::getError(*arg1);
  jresult = new BWAPI::Error((const BWAPI::Error &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allErrors() {
  void * jresult ;
  std::set< BWAPI::Error > *result = 0 ;
  
  result = (std::set< BWAPI::Error > *) &BWAPI::Errors::allErrors();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_initErrors() {
  BWAPI::Errors::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_Does_Not_Exist_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Unit_Does_Not_Exist;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_Not_Visible_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Unit_Not_Visible;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_Not_Owned_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Unit_Not_Owned;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_Busy_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Unit_Busy;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Incompatible_UnitType_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Incompatible_UnitType;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Incompatible_TechType_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Incompatible_TechType;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Already_Researched_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Already_Researched;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Fully_Upgraded_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Fully_Upgraded;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Insufficient_Minerals_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Insufficient_Minerals;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Insufficient_Gas_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Insufficient_Gas;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Insufficient_Supply_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Insufficient_Supply;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Insufficient_Energy_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Insufficient_Energy;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Insufficient_Tech_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Insufficient_Tech;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Insufficient_Ammo_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Insufficient_Ammo;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Insufficient_Space_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Insufficient_Space;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unbuildable_Location_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Unbuildable_Location;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Out_Of_Range_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Out_Of_Range;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unable_To_Hit_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Unable_To_Hit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Access_Denied_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Access_Denied;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ErrorNone_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ErrorUnknown_get() {
  void * jresult ;
  BWAPI::Error *result = 0 ;
  
  result = (BWAPI::Error *)&BWAPI::Errors::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ExplosionType__SWIG_0() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)new BWAPI::ExplosionType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ExplosionType__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::ExplosionType *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::ExplosionType *)new BWAPI::ExplosionType(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ExplosionType__SWIG_2(void * jarg1) {
  void * jresult ;
  BWAPI::ExplosionType *arg1 = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  arg1 = (BWAPI::ExplosionType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::ExplosionType const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::ExplosionType *)new BWAPI::ExplosionType((BWAPI::ExplosionType const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionType_opAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  BWAPI::ExplosionType *arg2 = 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  arg1 = (BWAPI::ExplosionType *)jarg1; 
  arg2 = (BWAPI::ExplosionType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::ExplosionType const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::ExplosionType *) &(arg1)->operator =((BWAPI::ExplosionType const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExplosionType_opEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  BWAPI::ExplosionType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::ExplosionType *)jarg1; 
  arg2 = (BWAPI::ExplosionType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::ExplosionType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::ExplosionType const *)arg1)->operator ==((BWAPI::ExplosionType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExplosionType_opNotEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  BWAPI::ExplosionType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::ExplosionType *)jarg1; 
  arg2 = (BWAPI::ExplosionType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::ExplosionType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::ExplosionType const *)arg1)->operator !=((BWAPI::ExplosionType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExplosionType_opLessThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  BWAPI::ExplosionType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::ExplosionType *)jarg1; 
  arg2 = (BWAPI::ExplosionType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::ExplosionType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::ExplosionType const *)arg1)->operator <((BWAPI::ExplosionType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ExplosionType_getID(void * jarg1) {
  int jresult ;
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  int result;
  
  arg1 = (BWAPI::ExplosionType *)jarg1; 
  result = (int)((BWAPI::ExplosionType const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_ExplosionType_getName(void * jarg1) {
  char * jresult ;
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::ExplosionType *)jarg1; 
  result = ((BWAPI::ExplosionType const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ExplosionType(void * jarg1) {
  BWAPI::ExplosionType *arg1 = (BWAPI::ExplosionType *) 0 ;
  
  arg1 = (BWAPI::ExplosionType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getExplosionType(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  BWAPI::ExplosionType result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = BWAPI::ExplosionTypes::getExplosionType(*arg1);
  jresult = new BWAPI::ExplosionType((const BWAPI::ExplosionType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allExplosionTypes() {
  void * jresult ;
  std::set< BWAPI::ExplosionType > *result = 0 ;
  
  result = (std::set< BWAPI::ExplosionType > *) &BWAPI::ExplosionTypes::allExplosionTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_initExplosionTypes() {
  BWAPI::ExplosionTypes::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeNone_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeNormal_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Normal;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Radial_Splash_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Radial_Splash;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Enemy_Splash_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Enemy_Splash;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeLockdown_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Lockdown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Nuclear_Missile_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Nuclear_Missile;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeParasite_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Parasite;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Broodlings_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Broodlings;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeEMP_Shockwave_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::EMP_Shockwave;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeIrradiate_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Irradiate;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeEnsnare_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Ensnare;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypePlague_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Plague;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeStasis_Field_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Stasis_Field;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeDark_Swarm_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Dark_Swarm;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeConsume_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Consume;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeYamato_Gun_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Yamato_Gun;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeRestoration_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Restoration;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeDisruption_Web_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Disruption_Web;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeCorrosive_Acid_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Corrosive_Acid;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeMind_Control_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Mind_Control;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeFeedback_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Feedback;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeOptical_Flare_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Optical_Flare;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeMaelstrom_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Maelstrom;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Air_Splash_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Air_Splash;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeUnknown_get() {
  void * jresult ;
  BWAPI::ExplosionType *result = 0 ;
  
  result = (BWAPI::ExplosionType *)&BWAPI::ExplosionTypes::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_FLAG_COUNT_get() {
  int jresult ;
  int result;
  
  result = (int)(int)BWAPI::FLAG_COUNT;
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Force_getName(void * jarg1) {
  char * jresult ;
  BWAPI::Force *arg1 = (BWAPI::Force *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::Force *)jarg1; 
  result = ((BWAPI::Force const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Force_getPlayers(void * jarg1) {
  void * jresult ;
  BWAPI::Force *arg1 = (BWAPI::Force *) 0 ;
  std::set< BWAPI::Player * > result;
  
  arg1 = (BWAPI::Force *)jarg1; 
  result = ((BWAPI::Force const *)arg1)->getPlayers();
  jresult = new std::set< BWAPI::Player * >((const std::set< BWAPI::Player * > &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Force(void * jarg1) {
  BWAPI::Force *arg1 = (BWAPI::Force *) 0 ;
  
  arg1 = (BWAPI::Force *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getForces(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Force * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Force * > *) &(arg1)->getForces();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getPlayers(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Player * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Player * > *) &(arg1)->getPlayers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getAllUnits(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getAllUnits();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getMinerals(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getMinerals();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getGeysers(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getGeysers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getNeutralUnits(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getNeutralUnits();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getStaticMinerals(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getStaticMinerals();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getStaticGeysers(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getStaticGeysers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getStaticNeutralUnits(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getStaticNeutralUnits();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getLatency(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)(arg1)->getLatency();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getFrameCount(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)(arg1)->getFrameCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getMouseX(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)(arg1)->getMouseX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getMouseY(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)(arg1)->getMouseY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getScreenX(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)(arg1)->getScreenX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getScreenY(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)(arg1)->getScreenY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isFlagEnabled(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->isFlagEnabled(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_enableFlag(void * jarg1, int jarg2) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->enableFlag(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_unitsOnTile(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->unitsOnTile(arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getLastError(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Error result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = ((BWAPI::Game const *)arg1)->getLastError();
  jresult = new BWAPI::Error((const BWAPI::Error &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_mapWidth(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)(arg1)->mapWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_mapHeight(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)(arg1)->mapHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Game_mapFilename(void * jarg1) {
  char * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (arg1)->mapFilename();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Game_mapName(void * jarg1) {
  char * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (arg1)->mapName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getMapHash(void * jarg1) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (int)(arg1)->getMapHash();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Game_getGroundHeight(void * jarg1, int jarg2, int jarg3) {
  int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (int)(arg1)->getGroundHeight(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isWalkable(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->isWalkable(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isBuildable__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->isBuildable(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isVisible__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->isVisible(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isExplored__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->isExplored(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_hasCreep__SWIG_0(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->hasCreep(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_hasPower__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  result = (bool)(arg1)->hasPower(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isBuildable__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->isBuildable(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isVisible__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->isVisible(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isExplored__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->isExplored(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_hasCreep__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->hasCreep(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_hasPower__SWIG_1(void * jarg1, void * jarg2, int jarg3, int jarg4) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::TilePosition arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (bool)(arg1)->hasPower(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_canBuildHere(void * jarg1, void * jarg2, void * jarg3, void * jarg4) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition arg3 ;
  BWAPI::UnitType arg4 ;
  BWAPI::TilePosition *argp3 ;
  BWAPI::UnitType *argp4 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  argp3 = (BWAPI::TilePosition *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg3 = *argp3; 
  argp4 = (BWAPI::UnitType *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg4 = *argp4; 
  result = (bool)(arg1)->canBuildHere(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_canMake(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg3 ;
  BWAPI::UnitType *argp3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  argp3 = (BWAPI::UnitType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->canMake(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_canResearch(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg3 ;
  BWAPI::TechType *argp3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  argp3 = (BWAPI::TechType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->canResearch(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_canUpgrade(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  BWAPI::UpgradeType arg3 ;
  BWAPI::UpgradeType *argp3 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  argp3 = (BWAPI::UpgradeType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UpgradeType", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->canUpgrade(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getStartLocations(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::TilePosition > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::TilePosition > *) &(arg1)->getStartLocations();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_printf(void * jarg1, char * jarg2) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->printf((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_sendText(void * jarg1, char * jarg2) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  char *arg2 = (char *) 0 ;
  void *arg3 = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (char *)jarg2; 
  (arg1)->sendText((char const *)arg2,arg3);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_changeRace(void * jarg1, void * jarg2) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Race arg2 ;
  BWAPI::Race *argp2 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  argp2 = (BWAPI::Race *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Race", 0);
    return ;
  }
  arg2 = *argp2; 
  (arg1)->changeRace(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isMultiplayer(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (bool)(arg1)->isMultiplayer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isPaused(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (bool)(arg1)->isPaused();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Game_isReplay(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (bool)(arg1)->isReplay();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_startGame(void * jarg1) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  (arg1)->startGame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_pauseGame(void * jarg1) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  (arg1)->pauseGame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_resumeGame(void * jarg1) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  (arg1)->resumeGame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_leaveGame(void * jarg1) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  (arg1)->leaveGame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_restartGame(void * jarg1) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  (arg1)->restartGame();
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_setLocalSpeed__SWIG_0(void * jarg1, int jarg2) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  (arg1)->setLocalSpeed(arg2);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_setLocalSpeed__SWIG_1(void * jarg1) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  (arg1)->setLocalSpeed();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_getSelectedUnits(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getSelectedUnits();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_self(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Player *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (BWAPI::Player *)(arg1)->self();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Game_enemy(void * jarg1) {
  void * jresult ;
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  BWAPI::Player *result = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  result = (BWAPI::Player *)(arg1)->enemy();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawText(void * jarg1, int jarg2, int jarg3, int jarg4, char * jarg5) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  char *arg5 = (char *) 0 ;
  void *arg6 = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (char *)jarg5; 
  (arg1)->drawText(arg2,arg3,arg4,(char const *)arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawTextMap(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->drawTextMap(arg2,arg3,(char const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawTextMouse(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->drawTextMouse(arg2,arg3,(char const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawTextScreen(void * jarg1, int jarg2, int jarg3, char * jarg4) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  char *arg4 = (char *) 0 ;
  void *arg5 = 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (char *)jarg4; 
  (arg1)->drawTextScreen(arg2,arg3,(char const *)arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawBox__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, void * jarg7, unsigned int jarg8) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  bool arg8 ;
  BWAPI::Color *argp7 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  argp7 = (BWAPI::Color *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg7 = *argp7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->drawBox(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawBox__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, void * jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  BWAPI::Color *argp7 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  argp7 = (BWAPI::Color *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg7 = *argp7; 
  (arg1)->drawBox(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawBoxMap__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawBoxMap(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawBoxMap__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawBoxMap(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawBoxMouse__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawBoxMouse(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawBoxMouse__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawBoxMouse(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawBoxScreen__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawBoxScreen(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawBoxScreen__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawBoxScreen(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawTriangle__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, void * jarg9, unsigned int jarg10) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  BWAPI::Color arg9 ;
  bool arg10 ;
  BWAPI::Color *argp9 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  argp9 = (BWAPI::Color *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg9 = *argp9; 
  arg10 = jarg10 ? true : false; 
  (arg1)->drawTriangle(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawTriangle__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, int jarg8, void * jarg9) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  int arg8 ;
  BWAPI::Color arg9 ;
  BWAPI::Color *argp9 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  arg8 = (int)jarg8; 
  argp9 = (BWAPI::Color *)jarg9; 
  if (!argp9) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg9 = *argp9; 
  (arg1)->drawTriangle(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawTriangleMap__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, void * jarg8, unsigned int jarg9) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  bool arg9 ;
  BWAPI::Color *argp8 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = (BWAPI::Color *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg8 = *argp8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->drawTriangleMap(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawTriangleMap__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, void * jarg8) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  BWAPI::Color *argp8 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = (BWAPI::Color *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg8 = *argp8; 
  (arg1)->drawTriangleMap(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawTriangleMouse__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, void * jarg8, unsigned int jarg9) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  bool arg9 ;
  BWAPI::Color *argp8 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = (BWAPI::Color *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg8 = *argp8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->drawTriangleMouse(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawTriangleMouse__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, void * jarg8) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  BWAPI::Color *argp8 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = (BWAPI::Color *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg8 = *argp8; 
  (arg1)->drawTriangleMouse(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawTriangleScreen__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, void * jarg8, unsigned int jarg9) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  bool arg9 ;
  BWAPI::Color *argp8 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = (BWAPI::Color *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg8 = *argp8; 
  arg9 = jarg9 ? true : false; 
  (arg1)->drawTriangleScreen(arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawTriangleScreen__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, int jarg7, void * jarg8) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  int arg7 ;
  BWAPI::Color arg8 ;
  BWAPI::Color *argp8 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  arg7 = (int)jarg7; 
  argp8 = (BWAPI::Color *)jarg8; 
  if (!argp8) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg8 = *argp8; 
  (arg1)->drawTriangleScreen(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawCircle__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawCircle(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawCircle__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawCircle(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawCircleMap__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, unsigned int jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  bool arg6 ;
  BWAPI::Color *argp5 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->drawCircleMap(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawCircleMap__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  BWAPI::Color *argp5 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->drawCircleMap(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawCircleMouse__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, unsigned int jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  bool arg6 ;
  BWAPI::Color *argp5 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->drawCircleMouse(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawCircleMouse__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  BWAPI::Color *argp5 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->drawCircleMouse(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawCircleScreen__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5, unsigned int jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  bool arg6 ;
  BWAPI::Color *argp5 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg5 = *argp5; 
  arg6 = jarg6 ? true : false; 
  (arg1)->drawCircleScreen(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawCircleScreen__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  BWAPI::Color *argp5 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->drawCircleScreen(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawEllipse__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, void * jarg7, unsigned int jarg8) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  bool arg8 ;
  BWAPI::Color *argp7 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  argp7 = (BWAPI::Color *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg7 = *argp7; 
  arg8 = jarg8 ? true : false; 
  (arg1)->drawEllipse(arg2,arg3,arg4,arg5,arg6,arg7,arg8);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawEllipse__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, void * jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  BWAPI::Color *argp7 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  argp7 = (BWAPI::Color *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg7 = *argp7; 
  (arg1)->drawEllipse(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawEllipseMap__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawEllipseMap(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawEllipseMap__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawEllipseMap(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawEllipseMouse__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawEllipseMouse(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawEllipseMouse__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawEllipseMouse(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawEllipseScreen__SWIG_0(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6, unsigned int jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  bool arg7 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  arg7 = jarg7 ? true : false; 
  (arg1)->drawEllipseScreen(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawEllipseScreen__SWIG_1(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawEllipseScreen(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawDot(void * jarg1, int jarg2, int jarg3, int jarg4, void * jarg5) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  BWAPI::Color arg5 ;
  BWAPI::Color *argp5 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  argp5 = (BWAPI::Color *)jarg5; 
  if (!argp5) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg5 = *argp5; 
  (arg1)->drawDot(arg2,arg3,arg4,arg5);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawDotMap(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  BWAPI::Color arg4 ;
  BWAPI::Color *argp4 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (BWAPI::Color *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->drawDotMap(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawDotMouse(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  BWAPI::Color arg4 ;
  BWAPI::Color *argp4 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (BWAPI::Color *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->drawDotMouse(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawDotScreen(void * jarg1, int jarg2, int jarg3, void * jarg4) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  BWAPI::Color arg4 ;
  BWAPI::Color *argp4 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  argp4 = (BWAPI::Color *)jarg4; 
  if (!argp4) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg4 = *argp4; 
  (arg1)->drawDotScreen(arg2,arg3,arg4);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawLine(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, int jarg6, void * jarg7) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  int arg6 ;
  BWAPI::Color arg7 ;
  BWAPI::Color *argp7 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  arg6 = (int)jarg6; 
  argp7 = (BWAPI::Color *)jarg7; 
  if (!argp7) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg7 = *argp7; 
  (arg1)->drawLine(arg2,arg3,arg4,arg5,arg6,arg7);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawLineMap(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawLineMap(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawLineMouse(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawLineMouse(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_Game_drawLineScreen(void * jarg1, int jarg2, int jarg3, int jarg4, int jarg5, void * jarg6) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int arg5 ;
  BWAPI::Color arg6 ;
  BWAPI::Color *argp6 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  arg5 = (int)jarg5; 
  argp6 = (BWAPI::Color *)jarg6; 
  if (!argp6) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Color", 0);
    return ;
  }
  arg6 = *argp6; 
  (arg1)->drawLineScreen(arg2,arg3,arg4,arg5,arg6);
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Game(void * jarg1) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_Broodwar_set(void * jarg1) {
  BWAPI::Game *arg1 = (BWAPI::Game *) 0 ;
  
  arg1 = (BWAPI::Game *)jarg1; 
  BWAPI::Broodwar = arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Broodwar_get() {
  void * jresult ;
  BWAPI::Game *result = 0 ;
  
  result = (BWAPI::Game *)BWAPI::Broodwar;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Order__SWIG_0() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)new BWAPI::Order();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Order__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::Order *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::Order *)new BWAPI::Order(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Order__SWIG_2(void * jarg1) {
  void * jresult ;
  BWAPI::Order *arg1 = 0 ;
  BWAPI::Order *result = 0 ;
  
  arg1 = (BWAPI::Order *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Order const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::Order *)new BWAPI::Order((BWAPI::Order const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Order_opAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  BWAPI::Order *arg2 = 0 ;
  BWAPI::Order *result = 0 ;
  
  arg1 = (BWAPI::Order *)jarg1; 
  arg2 = (BWAPI::Order *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Order const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::Order *) &(arg1)->operator =((BWAPI::Order const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Order_opEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  BWAPI::Order *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::Order *)jarg1; 
  arg2 = (BWAPI::Order *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Order const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::Order const *)arg1)->operator ==((BWAPI::Order const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Order_opNotEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  BWAPI::Order *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::Order *)jarg1; 
  arg2 = (BWAPI::Order *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Order const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::Order const *)arg1)->operator !=((BWAPI::Order const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Order_opLessThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  BWAPI::Order *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::Order *)jarg1; 
  arg2 = (BWAPI::Order *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Order const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::Order const *)arg1)->operator <((BWAPI::Order const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Order_getID(void * jarg1) {
  int jresult ;
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  int result;
  
  arg1 = (BWAPI::Order *)jarg1; 
  result = (int)((BWAPI::Order const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Order_getName(void * jarg1) {
  char * jresult ;
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::Order *)jarg1; 
  result = ((BWAPI::Order const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Order(void * jarg1) {
  BWAPI::Order *arg1 = (BWAPI::Order *) 0 ;
  
  arg1 = (BWAPI::Order *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getOrder(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  BWAPI::Order result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = BWAPI::Orders::getOrder(*arg1);
  jresult = new BWAPI::Order((const BWAPI::Order &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allOrders() {
  void * jresult ;
  std::set< BWAPI::Order > *result = 0 ;
  
  result = (std::set< BWAPI::Order > *) &BWAPI::Orders::allOrders();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_initOrders() {
  BWAPI::Orders::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Die_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Die;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Stop_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Stop;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Guard_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Guard;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerGuard_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::PlayerGuard;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TurretGuard_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::TurretGuard;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BunkerGuard_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::BunkerGuard;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Move_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Move;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReaverStop_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ReaverStop;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Attack1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Attack1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Attack2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Attack2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttackUnit_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::AttackUnit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttackFixedRange_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::AttackFixedRange;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttackTile_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::AttackTile;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hover_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Hover;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttackMove_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::AttackMove;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InfestMine1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::InfestMine1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Nothing1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Nothing1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Powerup1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Powerup1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TowerGuard_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::TowerGuard;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TowerAttack_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::TowerAttack;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_VultureMine_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::VultureMine;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StayinRange_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::StayinRange;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TurretAttack_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::TurretAttack;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Nothing2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Nothing2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Nothing3_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Nothing3;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DroneStartBuild_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::DroneStartBuild;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DroneBuild_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::DroneBuild;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InfestMine2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::InfestMine2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InfestMine3_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::InfestMine3;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InfestMine4_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::InfestMine4;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BuildTerran_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::BuildTerran;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BuildProtoss1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::BuildProtoss1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BuildProtoss2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::BuildProtoss2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ConstructingBuilding_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ConstructingBuilding;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Repair1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Repair1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Repair2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Repair2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlaceAddon_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::PlaceAddon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BuildAddon_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::BuildAddon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Train_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Train;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RallyPoint1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::RallyPoint1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RallyPoint2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::RallyPoint2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZergBirth_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ZergBirth;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Morph1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Morph1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Morph2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Morph2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BuildSelf1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::BuildSelf1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ZergBuildSelf_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ZergBuildSelf;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Build5_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Build5;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Enternyduscanal_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Enternyduscanal;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BuildSelf2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::BuildSelf2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Follow_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Follow;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Carrier_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Carrier;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CarrierIgnore1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CarrierIgnore1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CarrierStop_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CarrierStop;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CarrierAttack1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CarrierAttack1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CarrierAttack2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CarrierAttack2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CarrierIgnore2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CarrierIgnore2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CarrierFight_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CarrierFight;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HoldPosition1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::HoldPosition1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Reaver_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Reaver;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReaverAttack1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ReaverAttack1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReaverAttack2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ReaverAttack2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReaverFight_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ReaverFight;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReaverHold_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ReaverHold;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TrainFighter_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::TrainFighter;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StrafeUnit1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::StrafeUnit1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StrafeUnit2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::StrafeUnit2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RechargeShields1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::RechargeShields1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Rechargeshields2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Rechargeshields2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ShieldBattery_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ShieldBattery;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Return_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Return;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DroneLand_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::DroneLand;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BuildingLand_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::BuildingLand;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BuildingLiftoff_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::BuildingLiftoff;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DroneLiftoff_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::DroneLiftoff;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Liftoff_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Liftoff;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResearchTech_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ResearchTech;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Upgrade_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Upgrade;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Larva_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Larva;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpawningLarva_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::SpawningLarva;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Harvest1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Harvest1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Harvest2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Harvest2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MoveToGas_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::MoveToGas;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaitForGas_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::WaitForGas;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HarvestGas_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::HarvestGas;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReturnGas_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ReturnGas;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MoveToMinerals_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::MoveToMinerals;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WaitForMinerals_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::WaitForMinerals;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MiningMinerals_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::MiningMinerals;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Harvest3_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Harvest3;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Harvest4_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Harvest4;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ReturnMinerals_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ReturnMinerals;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Harvest5_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Harvest5;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EnterTransport_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::EnterTransport;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Pickup1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Pickup1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Pickup2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Pickup2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Pickup3_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Pickup3;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Pickup4_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Pickup4;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Powerup2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Powerup2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SiegeMode_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::SiegeMode;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TankMode_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::TankMode;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WatchTarget_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::WatchTarget;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InitCreepGrowth_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::InitCreepGrowth;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SpreadCreep_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::SpreadCreep;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StoppingCreepGrowth_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::StoppingCreepGrowth;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GuardianAspect_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::GuardianAspect;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WarpingArchon_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::WarpingArchon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CompletingArchonsummon_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CompletingArchonsummon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HoldPosition2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::HoldPosition2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HoldPosition3_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::HoldPosition3;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Cloak_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Cloak;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Decloak_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Decloak;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unload_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Unload;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MoveUnload_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::MoveUnload;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FireYamatoGun1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::FireYamatoGun1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_FireYamatoGun2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::FireYamatoGun2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MagnaPulse_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::MagnaPulse;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Burrow_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Burrow;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Burrowed_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Burrowed;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unburrow_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Unburrow;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DarkSwarm_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::DarkSwarm;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastParasite_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastParasite;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SummonBroodlings_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::SummonBroodlings;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EmpShockwave_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::EmpShockwave;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NukeWait_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::NukeWait;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NukeTrain_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::NukeTrain;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NukeLaunch_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::NukeLaunch;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NukePaint_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::NukePaint;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NukeUnit_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::NukeUnit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NukeGround_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::NukeGround;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NukeTrack_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::NukeTrack;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InitArbiter_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::InitArbiter;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CloakNearbyUnits_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CloakNearbyUnits;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlaceMine_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::PlaceMine;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Rightclickaction_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Rightclickaction;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SapUnit_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::SapUnit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SapLocation_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::SapLocation;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HoldPosition4_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::HoldPosition4;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Teleport_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Teleport;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TeleporttoLocation_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::TeleporttoLocation;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlaceScanner_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::PlaceScanner;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scanner_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Scanner;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DefensiveMatrix_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::DefensiveMatrix;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PsiStorm_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::PsiStorm;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OrderIrradiate_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Irradiate;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OrderPlague_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Plague;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OrderConsume_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Consume;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OrderEnsnare_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Ensnare;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_StasisField_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::StasisField;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hallucination1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Hallucination1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hallucination2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Hallucination2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResetCollision1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ResetCollision1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ResetCollision2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ResetCollision2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Patrol_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Patrol;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTFCOPInit_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CTFCOPInit;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTFCOP1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CTFCOP1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CTFCOP2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CTFCOP2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ComputerAI_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ComputerAI;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AtkMoveEP_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::AtkMoveEP;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HarassMove_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::HarassMove;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AIPatrol_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::AIPatrol;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_GuardPost_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::GuardPost;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RescuePassive_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::RescuePassive;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OrderNeutral_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Neutral;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ComputerReturn_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::ComputerReturn;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_InitPsiProvider_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::InitPsiProvider;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SelfDestrucing_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::SelfDestrucing;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Critter_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Critter;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HiddenGun_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::HiddenGun;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenDoor_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::OpenDoor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CloseDoor_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CloseDoor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HideTrap_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::HideTrap;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RevealTrap_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::RevealTrap;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Enabledoodad_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Enabledoodad;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Disabledoodad_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Disabledoodad;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Warpin_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Warpin;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Medic_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Medic;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MedicHeal1_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::MedicHeal1;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HealMove_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::HealMove;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MedicHoldPosition_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::MedicHoldPosition;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MedicHeal2_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::MedicHeal2;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OrderRestoration_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Restoration;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastDisruptionWeb_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastDisruptionWeb;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastMindControl_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastMindControl;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WarpingDarkArchon_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::WarpingDarkArchon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastFeedback_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastFeedback;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastOpticalFlare_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastOpticalFlare;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CastMaelstrom_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::CastMaelstrom;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_JunkYardDog_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::JunkYardDog;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Fatal_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Fatal;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OrderNone_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OrderUnknown_get() {
  void * jresult ;
  BWAPI::Order *result = 0 ;
  
  result = (BWAPI::Order *)&BWAPI::Orders::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlayerType__SWIG_0() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)new BWAPI::PlayerType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlayerType__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::PlayerType *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::PlayerType *)new BWAPI::PlayerType(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlayerType__SWIG_2(void * jarg1) {
  void * jresult ;
  BWAPI::PlayerType *arg1 = 0 ;
  BWAPI::PlayerType *result = 0 ;
  
  arg1 = (BWAPI::PlayerType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::PlayerType const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::PlayerType *)new BWAPI::PlayerType((BWAPI::PlayerType const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerType_opAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  BWAPI::PlayerType *arg2 = 0 ;
  BWAPI::PlayerType *result = 0 ;
  
  arg1 = (BWAPI::PlayerType *)jarg1; 
  arg2 = (BWAPI::PlayerType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::PlayerType const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::PlayerType *) &(arg1)->operator =((BWAPI::PlayerType const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerType_opEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  BWAPI::PlayerType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::PlayerType *)jarg1; 
  arg2 = (BWAPI::PlayerType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::PlayerType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::PlayerType const *)arg1)->operator ==((BWAPI::PlayerType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerType_opNotEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  BWAPI::PlayerType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::PlayerType *)jarg1; 
  arg2 = (BWAPI::PlayerType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::PlayerType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::PlayerType const *)arg1)->operator !=((BWAPI::PlayerType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerType_opLessThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  BWAPI::PlayerType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::PlayerType *)jarg1; 
  arg2 = (BWAPI::PlayerType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::PlayerType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::PlayerType const *)arg1)->operator <((BWAPI::PlayerType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PlayerType_getID(void * jarg1) {
  int jresult ;
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  int result;
  
  arg1 = (BWAPI::PlayerType *)jarg1; 
  result = (int)((BWAPI::PlayerType const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_PlayerType_getName(void * jarg1) {
  char * jresult ;
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::PlayerType *)jarg1; 
  result = ((BWAPI::PlayerType const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PlayerType(void * jarg1) {
  BWAPI::PlayerType *arg1 = (BWAPI::PlayerType *) 0 ;
  
  arg1 = (BWAPI::PlayerType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getPlayerType(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  BWAPI::PlayerType result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = BWAPI::PlayerTypes::getPlayerType(*arg1);
  jresult = new BWAPI::PlayerType((const BWAPI::PlayerType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allPlayerTypes() {
  void * jresult ;
  std::set< BWAPI::PlayerType > *result = 0 ;
  
  result = (std::set< BWAPI::PlayerType > *) &BWAPI::PlayerTypes::allPlayerTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_initPlayerTypes() {
  BWAPI::PlayerTypes::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_NotUsed_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::NotUsed;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Computer_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::Computer;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Human_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::Human;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Rescuable_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::Rescuable;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ComputerSlot_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::ComputerSlot;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OpenSlot_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::OpenSlot;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerTypeNeutral_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::Neutral;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ClosedSlot_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::ClosedSlot;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_HumanDefeated_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::HumanDefeated;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ComputerDefeated_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::ComputerDefeated;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerTypeNone_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerTypeUnknown_get() {
  void * jresult ;
  BWAPI::PlayerType *result = 0 ;
  
  result = (BWAPI::PlayerType *)&BWAPI::PlayerTypes::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_getID(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_Player_getName(void * jarg1) {
  char * jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = ((BWAPI::Player const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Player_getUnits(void * jarg1) {
  void * jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &((BWAPI::Player const *)arg1)->getUnits();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Player_getRace(void * jarg1) {
  void * jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::Race result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = ((BWAPI::Player const *)arg1)->getRace();
  jresult = new BWAPI::Race((const BWAPI::Race &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Player_playerType(void * jarg1) {
  void * jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::PlayerType result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = ((BWAPI::Player const *)arg1)->playerType();
  jresult = new BWAPI::PlayerType((const BWAPI::PlayerType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Player_getForce(void * jarg1) {
  void * jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::Force *result = 0 ;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (BWAPI::Force *)((BWAPI::Player const *)arg1)->getForce();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Player_isAlly(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  result = (bool)((BWAPI::Player const *)arg1)->isAlly(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Player_isEnemy(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::Player *arg2 = (BWAPI::Player *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  arg2 = (BWAPI::Player *)jarg2; 
  result = (bool)((BWAPI::Player const *)arg1)->isEnemy(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Player_isNeutral(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (bool)((BWAPI::Player const *)arg1)->isNeutral();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Player_getStartLocation(void * jarg1) {
  void * jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::TilePosition result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = ((BWAPI::Player const *)arg1)->getStartLocation();
  jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Player_leftGame(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (bool)((BWAPI::Player const *)arg1)->leftGame();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_minerals(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->minerals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_gas(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->gas();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_cumulativeMinerals(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->cumulativeMinerals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_cumulativeGas(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->cumulativeGas();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_supplyTotal__SWIG_0(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->supplyTotal();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_supplyUsed__SWIG_0(void * jarg1) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (int)((BWAPI::Player const *)arg1)->supplyUsed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_supplyTotal__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::Race arg2 ;
  BWAPI::Race *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::Race *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Race", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->supplyTotal(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_supplyUsed__SWIG_1(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::Race arg2 ;
  BWAPI::Race *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::Race *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Race", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->supplyUsed(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_allUnitCount(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->allUnitCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_completedUnitCount(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->completedUnitCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_incompleteUnitCount(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->incompleteUnitCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_deadUnitCount(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->deadUnitCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_killedUnitCount(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->killedUnitCount(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Player_getUpgradeLevel(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UpgradeType arg2 ;
  BWAPI::UpgradeType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UpgradeType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UpgradeType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Player const *)arg1)->getUpgradeLevel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Player_hasResearched(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::Player const *)arg1)->hasResearched(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Player_isResearching(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::Player const *)arg1)->isResearching(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Player_isUpgrading(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWAPI::UpgradeType arg2 ;
  BWAPI::UpgradeType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Player *)jarg1; 
  argp2 = (BWAPI::UpgradeType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UpgradeType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWAPI::Player const *)arg1)->isUpgrading(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Player(void * jarg1) {
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  
  arg1 = (BWAPI::Player *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TilePosition__SWIG_0() {
  void * jresult ;
  BWAPI::TilePosition *result = 0 ;
  
  result = (BWAPI::TilePosition *)new BWAPI::TilePosition();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TilePosition__SWIG_1(void * jarg1) {
  void * jresult ;
  BWAPI::Position *arg1 = 0 ;
  BWAPI::TilePosition *result = 0 ;
  
  arg1 = (BWAPI::Position *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::Position const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::TilePosition *)new BWAPI::TilePosition((BWAPI::Position const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TilePosition__SWIG_2(int jarg1, int jarg2) {
  void * jresult ;
  int arg1 ;
  int arg2 ;
  BWAPI::TilePosition *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (int)jarg2; 
  result = (BWAPI::TilePosition *)new BWAPI::TilePosition(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TilePosition_opEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  arg2 = (BWAPI::TilePosition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::TilePosition const *)arg1)->operator ==((BWAPI::TilePosition const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TilePosition_opNotEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  arg2 = (BWAPI::TilePosition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::TilePosition const *)arg1)->operator !=((BWAPI::TilePosition const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TilePosition_opLessThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  arg2 = (BWAPI::TilePosition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::TilePosition const *)arg1)->operator <((BWAPI::TilePosition const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePosition_opPlus(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  BWAPI::TilePosition result;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  arg2 = (BWAPI::TilePosition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return 0;
  } 
  result = ((BWAPI::TilePosition const *)arg1)->operator +((BWAPI::TilePosition const &)*arg2);
  jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePosition_opMinus(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  BWAPI::TilePosition result;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  arg2 = (BWAPI::TilePosition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return 0;
  } 
  result = ((BWAPI::TilePosition const *)arg1)->operator -((BWAPI::TilePosition const &)*arg2);
  jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePosition_opAdd(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  BWAPI::TilePosition *result = 0 ;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  arg2 = (BWAPI::TilePosition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::TilePosition *) &(arg1)->operator +=((BWAPI::TilePosition const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePosition_opSubtract(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  BWAPI::TilePosition *result = 0 ;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  arg2 = (BWAPI::TilePosition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::TilePosition *) &(arg1)->operator -=((BWAPI::TilePosition const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TilePosition_getDistance(void * jarg1, void * jarg2) {
  double jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  BWAPI::TilePosition *arg2 = 0 ;
  double result;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  arg2 = (BWAPI::TilePosition *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::TilePosition const & type is null", 0);
    return 0;
  } 
  result = (double)((BWAPI::TilePosition const *)arg1)->getDistance((BWAPI::TilePosition const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_TilePosition_getLength(void * jarg1) {
  double jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  double result;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  result = (double)((BWAPI::TilePosition const *)arg1)->getLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TilePosition_isValid(void * jarg1) {
  unsigned int jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  bool result;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  result = (bool)((BWAPI::TilePosition const *)arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePosition_x(void * jarg1) {
  void * jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  int *result = 0 ;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  result = (int *) &(arg1)->x();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePosition_y(void * jarg1) {
  void * jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  int *result = 0 ;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  result = (int *) &(arg1)->y();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TilePosition_xConst(void * jarg1) {
  int jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  int result;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  result = (int)((BWAPI::TilePosition const *)arg1)->x();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_TilePosition_yConst(void * jarg1) {
  int jresult ;
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  int result;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  result = (int)((BWAPI::TilePosition const *)arg1)->y();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TilePosition(void * jarg1) {
  BWAPI::TilePosition *arg1 = (BWAPI::TilePosition *) 0 ;
  
  arg1 = (BWAPI::TilePosition *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePositionInvalid_get() {
  void * jresult ;
  BWAPI::TilePosition *result = 0 ;
  
  result = (BWAPI::TilePosition *)&BWAPI::TilePositions::Invalid;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePositionNone_get() {
  void * jresult ;
  BWAPI::TilePosition *result = 0 ;
  
  result = (BWAPI::TilePosition *)&BWAPI::TilePositions::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePositionUnknown_get() {
  void * jresult ;
  BWAPI::TilePosition *result = 0 ;
  
  result = (BWAPI::TilePosition *)&BWAPI::TilePositions::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getPlayer(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Player *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (BWAPI::Player *)((BWAPI::Unit const *)arg1)->getPlayer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getType(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getType();
  jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getInitialType(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getInitialType();
  jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getHitPoints(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getHitPoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getInitialHitPoints(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getInitialHitPoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getShields(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getShields();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getEnergy(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getEnergy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getResources(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getResources();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getInitialResources(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getInitialResources();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getKillCount(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getKillCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getGroundWeaponCooldown(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getGroundWeaponCooldown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getAirWeaponCooldown(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getAirWeaponCooldown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getSpellCooldown(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getSpellCooldown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getDefenseMatrixPoints(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getDefenseMatrixPoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getDefenseMatrixTimer(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getDefenseMatrixTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getEnsnareTimer(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getEnsnareTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getIrradiateTimer(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getIrradiateTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getLockdownTimer(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getLockdownTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getMaelstromTimer(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getMaelstromTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getPlagueTimer(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getPlagueTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getRemoveTimer(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getRemoveTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getStasisTimer(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getStasisTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getStimTimer(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getStimTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getPosition(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getPosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getInitialPosition(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getInitialPosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getTilePosition(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getTilePosition();
  jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getInitialTilePosition(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getInitialTilePosition();
  jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Unit_getDistance__SWIG_0(void * jarg1, void * jarg2) {
  double jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  double result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (double)((BWAPI::Unit const *)arg1)->getDistance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Unit_getDistance__SWIG_1(void * jarg1, void * jarg2) {
  double jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  double result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (double)((BWAPI::Unit const *)arg1)->getDistance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Unit_getAngle(void * jarg1) {
  double jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  double result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (double)((BWAPI::Unit const *)arg1)->getAngle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Unit_getVelocityX(void * jarg1) {
  double jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  double result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (double)((BWAPI::Unit const *)arg1)->getVelocityX();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Unit_getVelocityY(void * jarg1) {
  double jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  double result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (double)((BWAPI::Unit const *)arg1)->getVelocityY();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getTarget(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getTarget();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getTargetPosition(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getTargetPosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getOrder(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Order result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getOrder();
  jresult = new BWAPI::Order((const BWAPI::Order &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getOrderTarget(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getOrderTarget();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getOrderTimer(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getOrderTimer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getSecondaryOrder(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Order result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getSecondaryOrder();
  jresult = new BWAPI::Order((const BWAPI::Order &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getBuildUnit(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getBuildUnit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getRemainingBuildTime(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getRemainingBuildTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getRemainingTrainTime(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getRemainingTrainTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getChild(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getChild();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getTrainingQueue(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  std::list< BWAPI::UnitType > result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getTrainingQueue();
  jresult = new std::list< BWAPI::UnitType >((const std::list< BWAPI::UnitType > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getTransport(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getTransport();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getLoadedUnits(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  std::list< BWAPI::Unit * > result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getLoadedUnits();
  jresult = new std::list< BWAPI::Unit * >((const std::list< BWAPI::Unit * > &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getInterceptorCount(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getInterceptorCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getScarabCount(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getScarabCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getSpiderMineCount(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getSpiderMineCount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getTech(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getTech();
  jresult = new BWAPI::TechType((const BWAPI::TechType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getUpgrade(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UpgradeType result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getUpgrade();
  jresult = new BWAPI::UpgradeType((const BWAPI::UpgradeType &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getRemainingResearchTime(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getRemainingResearchTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getRemainingUpgradeTime(void * jarg1) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (int)((BWAPI::Unit const *)arg1)->getRemainingUpgradeTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getRallyPosition(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = ((BWAPI::Unit const *)arg1)->getRallyPosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getRallyUnit(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getRallyUnit();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Unit_getAddon(void * jarg1) {
  void * jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *result = 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (BWAPI::Unit *)((BWAPI::Unit const *)arg1)->getAddon();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_Unit_getUpgradeLevel(void * jarg1, void * jarg2) {
  int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UpgradeType arg2 ;
  BWAPI::UpgradeType *argp2 ;
  int result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::UpgradeType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UpgradeType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (int)((BWAPI::Unit const *)arg1)->getUpgradeLevel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_exists(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->exists();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isAccelerating(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isAccelerating();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isBeingConstructed(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isBeingConstructed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isBeingHealed(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isBeingHealed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isBlind(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isBlind();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isBraking(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isBraking();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isBurrowed(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isBurrowed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isCarryingGas(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isCarryingGas();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isCarryingMinerals(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isCarryingMinerals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isCloaked(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isCloaked();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isCompleted(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isCompleted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isConstructing(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isConstructing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isDefenseMatrixed(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isDefenseMatrixed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isEnsnared(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isEnsnared();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isFollowing(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isFollowing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isGatheringGas(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isGatheringGas();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isGatheringMinerals(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isGatheringMinerals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isHallucination(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isHallucination();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isIdle(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isIdle();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isIrradiated(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isIrradiated();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isLifted(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isLifted();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isLoaded(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isLoaded();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isLockedDown(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isLockedDown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isMaelstrommed(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isMaelstrommed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isMorphing(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isMorphing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isMoving(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isMoving();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isParasited(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isParasited();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isPatrolling(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isPatrolling();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isPlagued(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isPlagued();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isRepairing(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isRepairing();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isResearching(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isResearching();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isSelected(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isSelected();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isSieged(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isSieged();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isStartingAttack(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isStartingAttack();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isStasised(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isStasised();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isStimmed(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isStimmed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isTraining(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isTraining();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isUnderStorm(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isUnderStorm();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isUnpowered(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isUnpowered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isUpgrading(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isUpgrading();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isVisible(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isVisible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_isBeingGathered(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)((BWAPI::Unit const *)arg1)->isBeingGathered();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_attackMove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->attackMove(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_attackUnit(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->attackUnit(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_rightClick__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->rightClick(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_rightClick__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->rightClick(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_train(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->train(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_build(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::UnitType arg3 ;
  BWAPI::TilePosition *argp2 ;
  BWAPI::UnitType *argp3 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (BWAPI::UnitType *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->build(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_buildAddon(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->buildAddon(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_research(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->research(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_upgrade(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UpgradeType arg2 ;
  BWAPI::UpgradeType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::UpgradeType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UpgradeType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->upgrade(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_stop(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->stop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_holdPosition(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->holdPosition();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_patrol(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->patrol(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_follow(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->follow(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_setRallyPosition(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->setRallyPosition(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_setRallyUnit(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->setRallyUnit(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_repair(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->repair(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_morph(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::UnitType arg2 ;
  BWAPI::UnitType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::UnitType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::UnitType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->morph(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_burrow(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->burrow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_unburrow(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->unburrow();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_siege(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->siege();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_unsiege(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->unsiege();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_cloak(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->cloak();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_decloak(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->decloak();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_lift(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->lift();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_land(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TilePosition arg2 ;
  BWAPI::TilePosition *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::TilePosition *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->land(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_load(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->load(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_unload(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Unit *arg2 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (BWAPI::Unit *)jarg2; 
  result = (bool)(arg1)->unload(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_unloadAll__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->unloadAll();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_unloadAll__SWIG_1(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->unloadAll(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_cancelConstruction(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->cancelConstruction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_haltConstruction(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->haltConstruction();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_cancelMorph(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->cancelMorph();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_cancelTrain__SWIG_0(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->cancelTrain();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_cancelTrain__SWIG_1(void * jarg1, int jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->cancelTrain(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_cancelAddon(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->cancelAddon();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_cancelResearch(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->cancelResearch();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_cancelUpgrade(void * jarg1) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  result = (bool)(arg1)->cancelUpgrade();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_useTech__SWIG_0(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)(arg1)->useTech(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_useTech__SWIG_1(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::Position arg3 ;
  BWAPI::TechType *argp2 ;
  BWAPI::Position *argp3 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  argp3 = (BWAPI::Position *)jarg3; 
  if (!argp3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg3 = *argp3; 
  result = (bool)(arg1)->useTech(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Unit_useTech__SWIG_2(void * jarg1, void * jarg2, void * jarg3) {
  unsigned int jresult ;
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType arg2 ;
  BWAPI::Unit *arg3 = (BWAPI::Unit *) 0 ;
  BWAPI::TechType *argp2 ;
  bool result;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  argp2 = (BWAPI::TechType *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TechType", 0);
    return 0;
  }
  arg2 = *argp2; 
  arg3 = (BWAPI::Unit *)jarg3; 
  result = (bool)(arg1)->useTech(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Unit(void * jarg1) {
  BWAPI::Unit *arg1 = (BWAPI::Unit *) 0 ;
  
  arg1 = (BWAPI::Unit *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitSizeType__SWIG_0() {
  void * jresult ;
  BWAPI::UnitSizeType *result = 0 ;
  
  result = (BWAPI::UnitSizeType *)new BWAPI::UnitSizeType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitSizeType__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::UnitSizeType *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::UnitSizeType *)new BWAPI::UnitSizeType(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitSizeType__SWIG_2(void * jarg1) {
  void * jresult ;
  BWAPI::UnitSizeType *arg1 = 0 ;
  BWAPI::UnitSizeType *result = 0 ;
  
  arg1 = (BWAPI::UnitSizeType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::UnitSizeType const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::UnitSizeType *)new BWAPI::UnitSizeType((BWAPI::UnitSizeType const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitSizeType_opAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  BWAPI::UnitSizeType *arg2 = 0 ;
  BWAPI::UnitSizeType *result = 0 ;
  
  arg1 = (BWAPI::UnitSizeType *)jarg1; 
  arg2 = (BWAPI::UnitSizeType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::UnitSizeType const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::UnitSizeType *) &(arg1)->operator =((BWAPI::UnitSizeType const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitSizeType_opEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  BWAPI::UnitSizeType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitSizeType *)jarg1; 
  arg2 = (BWAPI::UnitSizeType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::UnitSizeType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::UnitSizeType const *)arg1)->operator ==((BWAPI::UnitSizeType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitSizeType_opNotEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  BWAPI::UnitSizeType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitSizeType *)jarg1; 
  arg2 = (BWAPI::UnitSizeType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::UnitSizeType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::UnitSizeType const *)arg1)->operator !=((BWAPI::UnitSizeType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitSizeType_opLessThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  BWAPI::UnitSizeType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitSizeType *)jarg1; 
  arg2 = (BWAPI::UnitSizeType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::UnitSizeType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::UnitSizeType const *)arg1)->operator <((BWAPI::UnitSizeType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitSizeType_getID(void * jarg1) {
  int jresult ;
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitSizeType *)jarg1; 
  result = (int)((BWAPI::UnitSizeType const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_UnitSizeType_getName(void * jarg1) {
  char * jresult ;
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::UnitSizeType *)jarg1; 
  result = ((BWAPI::UnitSizeType const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitSizeType(void * jarg1) {
  BWAPI::UnitSizeType *arg1 = (BWAPI::UnitSizeType *) 0 ;
  
  arg1 = (BWAPI::UnitSizeType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getUnitSizeType(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  BWAPI::UnitSizeType result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = BWAPI::UnitSizeTypes::getUnitSizeType(*arg1);
  jresult = new BWAPI::UnitSizeType((const BWAPI::UnitSizeType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allUnitSizeTypes() {
  void * jresult ;
  std::set< BWAPI::UnitSizeType > *result = 0 ;
  
  result = (std::set< BWAPI::UnitSizeType > *) &BWAPI::UnitSizeTypes::allUnitSizeTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_initUnitSizeTypes() {
  BWAPI::UnitSizeTypes::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitSizeTypeIndependent_get() {
  void * jresult ;
  BWAPI::UnitSizeType *result = 0 ;
  
  result = (BWAPI::UnitSizeType *)&BWAPI::UnitSizeTypes::Independent;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Small_get() {
  void * jresult ;
  BWAPI::UnitSizeType *result = 0 ;
  
  result = (BWAPI::UnitSizeType *)&BWAPI::UnitSizeTypes::Small;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Medium_get() {
  void * jresult ;
  BWAPI::UnitSizeType *result = 0 ;
  
  result = (BWAPI::UnitSizeType *)&BWAPI::UnitSizeTypes::Medium;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Large_get() {
  void * jresult ;
  BWAPI::UnitSizeType *result = 0 ;
  
  result = (BWAPI::UnitSizeType *)&BWAPI::UnitSizeTypes::Large;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitSizeTypeNone_get() {
  void * jresult ;
  BWAPI::UnitSizeType *result = 0 ;
  
  result = (BWAPI::UnitSizeType *)&BWAPI::UnitSizeTypes::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitSizeTypeUnknown_get() {
  void * jresult ;
  BWAPI::UnitSizeType *result = 0 ;
  
  result = (BWAPI::UnitSizeType *)&BWAPI::UnitSizeTypes::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitType__SWIG_0() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)new BWAPI::UnitType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitType__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::UnitType *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::UnitType *)new BWAPI::UnitType(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitType__SWIG_2(void * jarg1) {
  void * jresult ;
  BWAPI::UnitType *arg1 = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  arg1 = (BWAPI::UnitType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::UnitType const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::UnitType *)new BWAPI::UnitType((BWAPI::UnitType const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitType_opAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::UnitType *arg2 = 0 ;
  BWAPI::UnitType *result = 0 ;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  arg2 = (BWAPI::UnitType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::UnitType const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::UnitType *) &(arg1)->operator =((BWAPI::UnitType const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_opEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::UnitType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  arg2 = (BWAPI::UnitType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::UnitType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::UnitType const *)arg1)->operator ==((BWAPI::UnitType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_opNotEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::UnitType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  arg2 = (BWAPI::UnitType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::UnitType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::UnitType const *)arg1)->operator !=((BWAPI::UnitType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_opLessThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::UnitType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  arg2 = (BWAPI::UnitType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::UnitType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::UnitType const *)arg1)->operator <((BWAPI::UnitType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_getID(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_UnitType_getName(void * jarg1) {
  char * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = ((BWAPI::UnitType const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_UnitType_getSubLabel(void * jarg1) {
  char * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = ((BWAPI::UnitType const *)arg1)->getSubLabel();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitType_getRace(void * jarg1) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::Race result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = ((BWAPI::UnitType const *)arg1)->getRace();
  jresult = new BWAPI::Race((const BWAPI::Race &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitType_whatBuilds(void * jarg1) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  std::pair< BWAPI::UnitType const *,int > result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = ((BWAPI::UnitType const *)arg1)->whatBuilds();
  jresult = new std::pair< BWAPI::UnitType const *,int >((const std::pair< BWAPI::UnitType const *,int > &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitType_requiredUnits(void * jarg1) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  std::map< BWAPI::UnitType const *,int > *result = 0 ;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (std::map< BWAPI::UnitType const *,int > *) &((BWAPI::UnitType const *)arg1)->requiredUnits();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitType_requiredTech(void * jarg1) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::TechType *result = 0 ;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (BWAPI::TechType *)((BWAPI::UnitType const *)arg1)->requiredTech();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitType_abilities(void * jarg1) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  std::set< BWAPI::TechType const * > *result = 0 ;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (std::set< BWAPI::TechType const * > *) &((BWAPI::UnitType const *)arg1)->abilities();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitType_upgrades(void * jarg1) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  std::set< BWAPI::UpgradeType const * > *result = 0 ;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (std::set< BWAPI::UpgradeType const * > *) &((BWAPI::UnitType const *)arg1)->upgrades();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitType_armorUpgrade(void * jarg1) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (BWAPI::UpgradeType *)((BWAPI::UnitType const *)arg1)->armorUpgrade();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_maxHitPoints(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->maxHitPoints();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_maxShields(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->maxShields();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_maxEnergy(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->maxEnergy();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_armor(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->armor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_mineralPrice(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->mineralPrice();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_gasPrice(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->gasPrice();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_buildTime(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->buildTime();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_supplyRequired(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->supplyRequired();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_supplyProvided(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->supplyProvided();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_spaceRequired(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->spaceRequired();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_spaceProvided(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->spaceProvided();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_buildScore(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->buildScore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_destroyScore(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->destroyScore();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitType_size(void * jarg1) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::UnitSizeType result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = ((BWAPI::UnitType const *)arg1)->size();
  jresult = new BWAPI::UnitSizeType((const BWAPI::UnitSizeType &)result); 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_tileWidth(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->tileWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_tileHeight(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->tileHeight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_dimensionLeft(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->dimensionLeft();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_dimensionUp(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->dimensionUp();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_dimensionRight(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->dimensionRight();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_dimensionDown(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->dimensionDown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_seekRange(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->seekRange();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_sightRange(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->sightRange();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitType_groundWeapon(void * jarg1) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (BWAPI::WeaponType *)((BWAPI::UnitType const *)arg1)->groundWeapon();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_maxGroundHits(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->maxGroundHits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitType_airWeapon(void * jarg1) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (BWAPI::WeaponType *)((BWAPI::UnitType const *)arg1)->airWeapon();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_maxAirHits(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->maxAirHits();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_UnitType_topSpeed(void * jarg1) {
  double jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  double result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (double)((BWAPI::UnitType const *)arg1)->topSpeed();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_acceleration(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->acceleration();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_haltDistance(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->haltDistance();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitType_turnRadius(void * jarg1) {
  int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (int)((BWAPI::UnitType const *)arg1)->turnRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_canProduce(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->canProduce();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_canAttack(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->canAttack();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_canMove(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->canMove();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isFlyer(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isFlyer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_regeneratesHP(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->regeneratesHP();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isSpellcaster(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isSpellcaster();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_hasPermanentCloak(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->hasPermanentCloak();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isInvincible(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isInvincible();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isOrganic(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isOrganic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isMechanical(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isMechanical();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isRobotic(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isRobotic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isDetector(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isDetector();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isResourceContainer(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isResourceContainer();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isResourceDepot(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isResourceDepot();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isRefinery(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isRefinery();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isWorker(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isWorker();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_requiresPsi(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->requiresPsi();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_requiresCreep(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->requiresCreep();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isTwoUnitsInOneEgg(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isTwoUnitsInOneEgg();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isBurrowable(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isBurrowable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isCloakable(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isCloakable();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isBuilding(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isBuilding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isAddon(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isAddon();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isFlyingBuilding(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isFlyingBuilding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitType_isNeutral(void * jarg1) {
  unsigned int jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  result = (bool)((BWAPI::UnitType const *)arg1)->isNeutral();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitType(void * jarg1) {
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getUnitType(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  BWAPI::UnitType result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = BWAPI::UnitTypes::getUnitType(*arg1);
  jresult = new BWAPI::UnitType((const BWAPI::UnitType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allUnitTypes() {
  void * jresult ;
  std::set< BWAPI::UnitType > *result = 0 ;
  
  result = (std::set< BWAPI::UnitType > *) &BWAPI::UnitTypes::allUnitTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_initUnitTypes() {
  BWAPI::UnitTypes::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Marine_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Marine;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Ghost_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Ghost;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Vulture_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Vulture;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Goliath_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Goliath;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Siege_Tank_Tank_Mode_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Siege_Tank_Tank_Mode;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_SCV_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_SCV;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Wraith_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Wraith;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Science_Vessel_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Science_Vessel;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Dropship_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Dropship;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Battlecruiser_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Battlecruiser;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Vulture_Spider_Mine_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Vulture_Spider_Mine;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Nuclear_Missile_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Nuclear_Missile;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Siege_Tank_Siege_Mode_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Siege_Tank_Siege_Mode;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Firebat_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Firebat;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Spell_Scanner_Sweep_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Spell_Scanner_Sweep;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Medic_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Medic;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Larva_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Larva;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Egg_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Egg;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Zergling_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Zergling;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Hydralisk_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Hydralisk;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Ultralisk_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Ultralisk;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Broodling_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Broodling;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Drone_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Drone;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Overlord_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Overlord;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Mutalisk_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Mutalisk;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Guardian_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Guardian;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Queen_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Queen;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Defiler_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Defiler;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Scourge_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Scourge;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Infested_Terran_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Infested_Terran;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Valkyrie_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Valkyrie;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Cocoon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Cocoon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Corsair_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Corsair;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Dark_Templar_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Dark_Templar;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Devourer_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Devourer;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Dark_Archon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Dark_Archon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Probe_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Probe;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Zealot_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Zealot;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Dragoon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Dragoon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_High_Templar_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_High_Templar;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Archon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Archon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Shuttle_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Shuttle;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Scout_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Scout;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Arbiter_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Arbiter;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Carrier_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Carrier;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Interceptor_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Interceptor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Reaver_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Reaver;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Observer_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Observer;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Scarab_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Scarab;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Critter_Rhynadon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Critter_Rhynadon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Critter_Bengalaas_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Critter_Bengalaas;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Critter_Scantid_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Critter_Scantid;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Critter_Kakaru_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Critter_Kakaru;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Critter_Ragnasaur_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Critter_Ragnasaur;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Critter_Ursadon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Critter_Ursadon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Lurker_Egg_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Lurker_Egg;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Lurker_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Lurker;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Spell_Disruption_Web_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Spell_Disruption_Web;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Command_Center_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Command_Center;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Comsat_Station_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Comsat_Station;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Nuclear_Silo_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Nuclear_Silo;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Supply_Depot_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Supply_Depot;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Refinery_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Refinery;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Barracks_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Barracks;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Academy_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Academy;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Factory_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Factory;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Starport_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Starport;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Control_Tower_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Control_Tower;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Science_Facility_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Science_Facility;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Covert_Ops_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Covert_Ops;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Physics_Lab_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Physics_Lab;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Machine_Shop_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Machine_Shop;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Engineering_Bay_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Engineering_Bay;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Armory_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Armory;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Missile_Turret_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Missile_Turret;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Terran_Bunker_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Terran_Bunker;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Crashed_Norad_II_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Crashed_Norad_II;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Ion_Cannon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Ion_Cannon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Infested_Command_Center_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Infested_Command_Center;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Hatchery_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Hatchery;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Lair_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Lair;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Hive_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Hive;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Nydus_Canal_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Nydus_Canal;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Hydralisk_Den_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Hydralisk_Den;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Defiler_Mound_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Defiler_Mound;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Greater_Spire_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Greater_Spire;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Queens_Nest_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Queens_Nest;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Evolution_Chamber_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Evolution_Chamber;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Ultralisk_Cavern_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Ultralisk_Cavern;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Spire_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Spire;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Spawning_Pool_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Spawning_Pool;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Creep_Colony_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Creep_Colony;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Spore_Colony_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Spore_Colony;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Sunken_Colony_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Sunken_Colony;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Overmind_With_Shell_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Overmind_With_Shell;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Overmind_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Overmind;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Zerg_Extractor_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Zerg_Extractor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Mature_Chrysalis_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Mature_Chrysalis;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Cerebrate_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Cerebrate;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Cerebrate_Daggoth_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Cerebrate_Daggoth;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Nexus_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Nexus;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Robotics_Facility_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Robotics_Facility;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Pylon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Pylon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Assimilator_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Assimilator;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Observatory_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Observatory;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Gateway_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Gateway;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Photon_Cannon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Photon_Cannon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Citadel_of_Adun_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Citadel_of_Adun;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Cybernetics_Core_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Cybernetics_Core;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Templar_Archives_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Templar_Archives;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Forge_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Forge;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Stargate_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Stargate;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Stasis_Cell_Prison_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Stasis_Cell_Prison;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Fleet_Beacon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Fleet_Beacon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Arbiter_Tribunal_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Arbiter_Tribunal;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Robotics_Support_Bay_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Robotics_Support_Bay;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Protoss_Shield_Battery_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Protoss_Shield_Battery;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Khaydarin_Crystal_Form_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Khaydarin_Crystal_Form;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Protoss_Temple_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Protoss_Temple;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_XelNaga_Temple_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_XelNaga_Temple;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Resource_Mineral_Field_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Resource_Mineral_Field;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Resource_Vespene_Geyser_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Resource_Vespene_Geyser;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Warp_Gate_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Warp_Gate;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Psi_Disrupter_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Psi_Disrupter;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Power_Generator_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Power_Generator;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Special_Overmind_Cocoon_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Special_Overmind_Cocoon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Spell_Dark_Swarm_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Spell_Dark_Swarm;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypeNone_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypeUnknown_get() {
  void * jresult ;
  BWAPI::UnitType *result = 0 ;
  
  result = (BWAPI::UnitType *)&BWAPI::UnitTypes::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WeaponType__SWIG_0() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)new BWAPI::WeaponType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WeaponType__SWIG_1(int jarg1) {
  void * jresult ;
  int arg1 ;
  BWAPI::WeaponType *result = 0 ;
  
  arg1 = (int)jarg1; 
  result = (BWAPI::WeaponType *)new BWAPI::WeaponType(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WeaponType__SWIG_2(void * jarg1) {
  void * jresult ;
  BWAPI::WeaponType *arg1 = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  arg1 = (BWAPI::WeaponType *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::WeaponType const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::WeaponType *)new BWAPI::WeaponType((BWAPI::WeaponType const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponType_opAssign(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::WeaponType *arg2 = 0 ;
  BWAPI::WeaponType *result = 0 ;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  arg2 = (BWAPI::WeaponType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::WeaponType const & type is null", 0);
    return 0;
  } 
  result = (BWAPI::WeaponType *) &(arg1)->operator =((BWAPI::WeaponType const &)*arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponType_opEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::WeaponType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  arg2 = (BWAPI::WeaponType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::WeaponType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::WeaponType const *)arg1)->operator ==((BWAPI::WeaponType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponType_opNotEquals(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::WeaponType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  arg2 = (BWAPI::WeaponType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::WeaponType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::WeaponType const *)arg1)->operator !=((BWAPI::WeaponType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponType_opLessThan(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::WeaponType *arg2 = 0 ;
  bool result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  arg2 = (BWAPI::WeaponType *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "BWAPI::WeaponType const & type is null", 0);
    return 0;
  } 
  result = (bool)((BWAPI::WeaponType const *)arg1)->operator <((BWAPI::WeaponType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WeaponType_getID(void * jarg1) {
  int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->getID();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_WeaponType_getName(void * jarg1) {
  char * jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  std::string result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = ((BWAPI::WeaponType const *)arg1)->getName();
  jresult = SWIG_csharp_string_callback((&result)->c_str()); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponType_getTech(void * jarg1) {
  void * jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::TechType *result = 0 ;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (BWAPI::TechType *)((BWAPI::WeaponType const *)arg1)->getTech();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponType_whatUses(void * jarg1) {
  void * jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::UnitType *result = 0 ;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (BWAPI::UnitType *)((BWAPI::WeaponType const *)arg1)->whatUses();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WeaponType_damageAmount(void * jarg1) {
  int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->damageAmount();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WeaponType_damageBonus(void * jarg1) {
  int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->damageBonus();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WeaponType_damageCooldown(void * jarg1) {
  int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->damageCooldown();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WeaponType_damageFactor(void * jarg1) {
  int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->damageFactor();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponType_upgradeType(void * jarg1) {
  void * jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::UpgradeType *result = 0 ;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (BWAPI::UpgradeType *)((BWAPI::WeaponType const *)arg1)->upgradeType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponType_damageType(void * jarg1) {
  void * jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::DamageType *result = 0 ;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (BWAPI::DamageType *)((BWAPI::WeaponType const *)arg1)->damageType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponType_explosionType(void * jarg1) {
  void * jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  BWAPI::ExplosionType *result = 0 ;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (BWAPI::ExplosionType *)((BWAPI::WeaponType const *)arg1)->explosionType();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WeaponType_minRange(void * jarg1) {
  int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->minRange();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WeaponType_maxRange(void * jarg1) {
  int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->maxRange();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WeaponType_innerSplashRadius(void * jarg1) {
  int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->innerSplashRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WeaponType_medianSplashRadius(void * jarg1) {
  int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->medianSplashRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_WeaponType_outerSplashRadius(void * jarg1) {
  int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  int result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (int)((BWAPI::WeaponType const *)arg1)->outerSplashRadius();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponType_targetsAir(void * jarg1) {
  unsigned int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsAir();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponType_targetsGround(void * jarg1) {
  unsigned int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsGround();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponType_targetsMechanical(void * jarg1) {
  unsigned int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsMechanical();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponType_targetsOrganic(void * jarg1) {
  unsigned int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsOrganic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponType_targetsNonBuilding(void * jarg1) {
  unsigned int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsNonBuilding();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponType_targetsNonRobotic(void * jarg1) {
  unsigned int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsNonRobotic();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponType_targetsTerrain(void * jarg1) {
  unsigned int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsTerrain();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponType_targetsOrgOrMech(void * jarg1) {
  unsigned int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsOrgOrMech();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponType_targetsOwn(void * jarg1) {
  unsigned int jresult ;
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  bool result;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  result = (bool)((BWAPI::WeaponType const *)arg1)->targetsOwn();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WeaponType(void * jarg1) {
  BWAPI::WeaponType *arg1 = (BWAPI::WeaponType *) 0 ;
  
  arg1 = (BWAPI::WeaponType *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getWeaponType(char * jarg1) {
  void * jresult ;
  std::string *arg1 = 0 ;
  BWAPI::WeaponType result;
  
  if (!jarg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "null string", 0);
    return 0;
  }
  std::string arg1_str(jarg1);
  arg1 = &arg1_str; 
  result = BWAPI::WeaponTypes::getWeaponType(*arg1);
  jresult = new BWAPI::WeaponType((const BWAPI::WeaponType &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_allWeaponTypes() {
  void * jresult ;
  std::set< BWAPI::WeaponType > *result = 0 ;
  
  result = (std::set< BWAPI::WeaponType > *) &BWAPI::WeaponTypes::allWeaponTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_normalWeaponTypes() {
  void * jresult ;
  std::set< BWAPI::WeaponType > *result = 0 ;
  
  result = (std::set< BWAPI::WeaponType > *) &BWAPI::WeaponTypes::normalWeaponTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_specialWeaponTypes() {
  void * jresult ;
  std::set< BWAPI::WeaponType > *result = 0 ;
  
  result = (std::set< BWAPI::WeaponType > *) &BWAPI::WeaponTypes::specialWeaponTypes();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_initWeaponTypes() {
  BWAPI::WeaponTypes::init();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Gauss_Rifle_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Gauss_Rifle;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_C_10_Canister_Rifle_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::C_10_Canister_Rifle;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeFragmentation_Grenade_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Fragmentation_Grenade;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeSpider_Mines_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Spider_Mines;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Twin_Autocannons_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Twin_Autocannons;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Hellfire_Missile_Pack_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Hellfire_Missile_Pack;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Arclite_Cannon_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Arclite_Cannon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Fusion_Cutter_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Fusion_Cutter;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeGemini_Missiles_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Gemini_Missiles;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeBurst_Lasers_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Burst_Lasers;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ATS_Laser_Battery_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::ATS_Laser_Battery;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ATA_Laser_Battery_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::ATA_Laser_Battery;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Flame_Thrower_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Flame_Thrower;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Arclite_Shock_Cannon_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Arclite_Shock_Cannon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeLongbolt_Missile_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Longbolt_Missile;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Claws_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Claws;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Needle_Spines_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Needle_Spines;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Kaiser_Blades_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Kaiser_Blades;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Toxic_Spores_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Toxic_Spores;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Spines_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Spines;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeAcid_Spore_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Acid_Spore;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeGlave_Wurm_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Glave_Wurm;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeSeeker_Spores_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Seeker_Spores;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Subterranean_Tentacle_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Subterranean_Tentacle;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Suicide_Infested_Terran_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Suicide_Infested_Terran;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Suicide_Scourge_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Suicide_Scourge;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Particle_Beam_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Particle_Beam;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Psi_Blades_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Psi_Blades;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypePhase_Disruptor_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Phase_Disruptor;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Psionic_Shockwave_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Psionic_Shockwave;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dual_Photon_Blasters_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Dual_Photon_Blasters;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Anti_Matter_Missiles_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Anti_Matter_Missiles;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Phase_Disruptor_Cannon_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Phase_Disruptor_Cannon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypePulse_Cannon_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Pulse_Cannon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STS_Photon_Cannon_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::STS_Photon_Cannon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_STA_Photon_Cannon_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::STA_Photon_Cannon;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Scarab_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Scarab;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeNeutron_Flare_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Neutron_Flare;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeHalo_Rockets_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Halo_Rockets;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeCorrosive_Acid_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Corrosive_Acid;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeSubterranean_Spines_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Subterranean_Spines;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Warp_Blades_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Warp_Blades;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeYamato_Gun_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Yamato_Gun;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeNuclear_Strike_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Nuclear_Strike;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Lockdown_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Lockdown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_EMP_Shockwave_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::EMP_Shockwave;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeIrradiate_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Irradiate;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Parasite_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Parasite;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Spawn_Broodlings_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Spawn_Broodlings;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeEnsnare_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Ensnare;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Dark_Swarm_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Dark_Swarm;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypePlague_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Plague;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeConsume_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Consume;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Stasis_Field_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Stasis_Field;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypePsionic_Storm_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Psionic_Storm;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Disruption_Web_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Disruption_Web;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeRestoration_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Restoration;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeMind_Control_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Mind_Control;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Feedback_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Feedback;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Optical_Flare_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Optical_Flare;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Maelstrom_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Maelstrom;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeNone_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::None;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeUnknown_get() {
  void * jresult ;
  BWAPI::WeaponType *result = 0 ;
  
  result = (BWAPI::WeaponType *)&BWAPI::WeaponTypes::Unknown;
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_monobridgeutil_getLastUnitParam() {
  void * jresult ;
  BWAPI::Unit *result = 0 ;
  
  result = (BWAPI::Unit *)monobridgeutil::getLastUnitParam();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_monobridgeutil() {
  void * jresult ;
  monobridgeutil *result = 0 ;
  
  result = (monobridgeutil *)new monobridgeutil();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_monobridgeutil(void * jarg1) {
  monobridgeutil *arg1 = (monobridgeutil *) 0 ;
  
  arg1 = (monobridgeutil *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_readMap() {
  BWTA::readMap();
}


SWIGEXPORT void SWIGSTDCALL CSharp_analyze() {
  BWTA::analyze();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getRegions() {
  void * jresult ;
  std::set< BWTA::Region * > *result = 0 ;
  
  result = (std::set< BWTA::Region * > *) &BWTA::getRegions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getChokepoints() {
  void * jresult ;
  std::set< BWTA::Chokepoint * > *result = 0 ;
  
  result = (std::set< BWTA::Chokepoint * > *) &BWTA::getChokepoints();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getBaseLocations() {
  void * jresult ;
  std::set< BWTA::BaseLocation * > *result = 0 ;
  
  result = (std::set< BWTA::BaseLocation * > *) &BWTA::getBaseLocations();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getStartLocations() {
  void * jresult ;
  std::set< BWTA::BaseLocation * > *result = 0 ;
  
  result = (std::set< BWTA::BaseLocation * > *) &BWTA::getStartLocations();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getUnwalkablePolygons() {
  void * jresult ;
  std::set< BWTA::Polygon * > *result = 0 ;
  
  result = (std::set< BWTA::Polygon * > *) &BWTA::getUnwalkablePolygons();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getNearestUnwalkablePosition(void * jarg1) {
  void * jresult ;
  BWAPI::Position arg1 ;
  BWAPI::Position *argp1 ;
  BWAPI::Position result;
  
  argp1 = (BWAPI::Position *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = BWTA::getNearestUnwalkablePosition(arg1);
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getStartLocation(void * jarg1) {
  void * jresult ;
  BWAPI::Player *arg1 = (BWAPI::Player *) 0 ;
  BWTA::BaseLocation *result = 0 ;
  
  arg1 = (BWAPI::Player *)jarg1; 
  result = (BWTA::BaseLocation *)BWTA::getStartLocation(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_getNearestBaseLocation(void * jarg1) {
  void * jresult ;
  BWAPI::TilePosition arg1 ;
  BWAPI::TilePosition *argp1 ;
  BWTA::BaseLocation *result = 0 ;
  
  argp1 = (BWAPI::TilePosition *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::TilePosition", 0);
    return 0;
  }
  arg1 = *argp1; 
  result = (BWTA::BaseLocation *)BWTA::getNearestBaseLocation(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLocation_getPosition(void * jarg1) {
  void * jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  result = ((BWTA::BaseLocation const *)arg1)->getPosition();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLocation_getTilePosition(void * jarg1) {
  void * jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  BWAPI::TilePosition result;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  result = ((BWTA::BaseLocation const *)arg1)->getTilePosition();
  jresult = new BWAPI::TilePosition((const BWAPI::TilePosition &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLocation_getRegion(void * jarg1) {
  void * jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  BWTA::Region *result = 0 ;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  result = (BWTA::Region *)((BWTA::BaseLocation const *)arg1)->getRegion();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseLocation_minerals(void * jarg1) {
  int jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  int result;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  result = (int)((BWTA::BaseLocation const *)arg1)->minerals();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_BaseLocation_gas(void * jarg1) {
  int jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  int result;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  result = (int)((BWTA::BaseLocation const *)arg1)->gas();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLocation_getMinerals(void * jarg1) {
  void * jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &(arg1)->getMinerals();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLocation_getStaticMinerals(void * jarg1) {
  void * jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &((BWTA::BaseLocation const *)arg1)->getStaticMinerals();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLocation_getGeysers(void * jarg1) {
  void * jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  result = (std::set< BWAPI::Unit * > *) &((BWTA::BaseLocation const *)arg1)->getGeysers();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BaseLocation_getGroundDistance(void * jarg1, void * jarg2) {
  double jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  BWTA::BaseLocation *arg2 = (BWTA::BaseLocation *) 0 ;
  double result;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  arg2 = (BWTA::BaseLocation *)jarg2; 
  result = (double)((BWTA::BaseLocation const *)arg1)->getGroundDistance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_BaseLocation_getAirDistance(void * jarg1, void * jarg2) {
  double jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  BWTA::BaseLocation *arg2 = (BWTA::BaseLocation *) 0 ;
  double result;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  arg2 = (BWTA::BaseLocation *)jarg2; 
  result = (double)((BWTA::BaseLocation const *)arg1)->getAirDistance(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseLocation_isIsland(void * jarg1) {
  unsigned int jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  bool result;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  result = (bool)((BWTA::BaseLocation const *)arg1)->isIsland();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseLocation_isMineralOnly(void * jarg1) {
  unsigned int jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  bool result;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  result = (bool)((BWTA::BaseLocation const *)arg1)->isMineralOnly();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseLocation_isStartLocation(void * jarg1) {
  unsigned int jresult ;
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  bool result;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  result = (bool)((BWTA::BaseLocation const *)arg1)->isStartLocation();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BaseLocation(void * jarg1) {
  BWTA::BaseLocation *arg1 = (BWTA::BaseLocation *) 0 ;
  
  arg1 = (BWTA::BaseLocation *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Chokepoint_getRegions(void * jarg1) {
  void * jresult ;
  BWTA::Chokepoint *arg1 = (BWTA::Chokepoint *) 0 ;
  std::pair< BWTA::Region *,BWTA::Region * > *result = 0 ;
  
  arg1 = (BWTA::Chokepoint *)jarg1; 
  result = (std::pair< BWTA::Region *,BWTA::Region * > *) &((BWTA::Chokepoint const *)arg1)->getRegions();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Chokepoint_getSides(void * jarg1) {
  void * jresult ;
  BWTA::Chokepoint *arg1 = (BWTA::Chokepoint *) 0 ;
  std::pair< BWAPI::Position,BWAPI::Position > *result = 0 ;
  
  arg1 = (BWTA::Chokepoint *)jarg1; 
  result = (std::pair< BWAPI::Position,BWAPI::Position > *) &((BWTA::Chokepoint const *)arg1)->getSides();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Chokepoint_getCenter(void * jarg1) {
  void * jresult ;
  BWTA::Chokepoint *arg1 = (BWTA::Chokepoint *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWTA::Chokepoint *)jarg1; 
  result = ((BWTA::Chokepoint const *)arg1)->getCenter();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Chokepoint_getWidth(void * jarg1) {
  double jresult ;
  BWTA::Chokepoint *arg1 = (BWTA::Chokepoint *) 0 ;
  double result;
  
  arg1 = (BWTA::Chokepoint *)jarg1; 
  result = (double)((BWTA::Chokepoint const *)arg1)->getWidth();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Chokepoint(void * jarg1) {
  BWTA::Chokepoint *arg1 = (BWTA::Chokepoint *) 0 ;
  
  arg1 = (BWTA::Chokepoint *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_Clear(void * jarg1) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_Add(void * jarg1, void * jarg2) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::value_type *arg2 = 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (std::vector< BWAPI::Position >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BWAPI::Position >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::vector< BWAPI::Position >::value_type const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PositionVector_size(void * jarg1) {
  unsigned long jresult ;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::size_type result;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  result = ((std::vector< BWAPI::Position > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PositionVector_capacity(void * jarg1) {
  unsigned long jresult ;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::size_type result;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  result = ((std::vector< BWAPI::Position > const *)arg1)->capacity();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_reserve(void * jarg1, unsigned long jarg2) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position >::size_type arg2 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (std::vector< BWAPI::Position >::size_type)jarg2; 
  (arg1)->reserve(arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PositionVector__SWIG_0() {
  void * jresult ;
  std::vector< BWAPI::Position > *result = 0 ;
  
  result = (std::vector< BWAPI::Position > *)new std::vector< BWAPI::Position >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PositionVector__SWIG_1(void * jarg1) {
  void * jresult ;
  std::vector< BWAPI::Position > *arg1 = 0 ;
  std::vector< BWAPI::Position > *result = 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BWAPI::Position > const & type is null", 0);
    return 0;
  } 
  result = (std::vector< BWAPI::Position > *)new std::vector< BWAPI::Position >((std::vector< BWAPI::Position > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PositionVector__SWIG_2(int jarg1) {
  void * jresult ;
  int arg1 ;
  std::vector< BWAPI::Position > *result = 0 ;
  
  arg1 = (int)jarg1; 
  try {
    result = (std::vector< BWAPI::Position > *)new_std_vector_Sl_BWAPI_Position_Sg___SWIG_2(arg1);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PositionVector_getitemcopy(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  int arg2 ;
  BWAPI::Position result;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = std_vector_Sl_BWAPI_Position_Sg__getitemcopy(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PositionVector_getitem(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  int arg2 ;
  std::vector< BWAPI::Position >::value_type *result = 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< BWAPI::Position >::value_type *) &std_vector_Sl_BWAPI_Position_Sg__getitem(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_setitem(void * jarg1, int jarg2, void * jarg3) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  int arg2 ;
  std::vector< BWAPI::Position >::value_type *arg3 = 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< BWAPI::Position >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BWAPI::Position >::value_type const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_BWAPI_Position_Sg__setitem(arg1,arg2,(BWAPI::Position const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_AddRange(void * jarg1, void * jarg2) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  std::vector< BWAPI::Position > *arg2 = 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (std::vector< BWAPI::Position > *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BWAPI::Position > const & type is null", 0);
    return ;
  } 
  std_vector_Sl_BWAPI_Position_Sg__AddRange(arg1,(std::vector< BWAPI::Position > const &)*arg2);
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PositionVector_GetRange(void * jarg1, int jarg2, int jarg3) {
  void * jresult ;
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  int arg2 ;
  int arg3 ;
  std::vector< BWAPI::Position > *result = 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    result = (std::vector< BWAPI::Position > *)std_vector_Sl_BWAPI_Position_Sg__GetRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_Insert(void * jarg1, int jarg2, void * jarg3) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  int arg2 ;
  std::vector< BWAPI::Position >::value_type *arg3 = 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< BWAPI::Position >::value_type *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BWAPI::Position >::value_type const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_BWAPI_Position_Sg__Insert(arg1,arg2,(BWAPI::Position const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_InsertRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  int arg2 ;
  std::vector< BWAPI::Position > *arg3 = 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< BWAPI::Position > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BWAPI::Position > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_BWAPI_Position_Sg__InsertRange(arg1,arg2,(std::vector< BWAPI::Position > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_RemoveAt(void * jarg1, int jarg2) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  int arg2 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (int)jarg2; 
  try {
    std_vector_Sl_BWAPI_Position_Sg__RemoveAt(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_RemoveRange(void * jarg1, int jarg2, int jarg3) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_BWAPI_Position_Sg__RemoveRange(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PositionVector_Repeat(void * jarg1, int jarg2) {
  void * jresult ;
  std::vector< BWAPI::Position >::value_type *arg1 = 0 ;
  int arg2 ;
  std::vector< BWAPI::Position > *result = 0 ;
  
  arg1 = (std::vector< BWAPI::Position >::value_type *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BWAPI::Position >::value_type const & type is null", 0);
    return 0;
  } 
  arg2 = (int)jarg2; 
  try {
    result = (std::vector< BWAPI::Position > *)std_vector_Sl_BWAPI_Position_Sg__Repeat((BWAPI::Position const &)*arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_Reverse__SWIG_0(void * jarg1) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  std_vector_Sl_BWAPI_Position_Sg__Reverse__SWIG_0(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_Reverse__SWIG_1(void * jarg1, int jarg2, int jarg3) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  int arg2 ;
  int arg3 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  try {
    std_vector_Sl_BWAPI_Position_Sg__Reverse__SWIG_1(arg1,arg2,arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  catch(std::invalid_argument &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentException, (&_e)->what(), "");
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionVector_SetRange(void * jarg1, int jarg2, void * jarg3) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  int arg2 ;
  std::vector< BWAPI::Position > *arg3 = 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (std::vector< BWAPI::Position > *)jarg3;
  if (!arg3) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::vector< BWAPI::Position > const & type is null", 0);
    return ;
  } 
  try {
    std_vector_Sl_BWAPI_Position_Sg__SetRange(arg1,arg2,(std::vector< BWAPI::Position > const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PositionVector(void * jarg1) {
  std::vector< BWAPI::Position > *arg1 = (std::vector< BWAPI::Position > *) 0 ;
  
  arg1 = (std::vector< BWAPI::Position > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_Polygon() {
  void * jresult ;
  BWTA::Polygon *result = 0 ;
  
  result = (BWTA::Polygon *)new BWTA::Polygon();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Polygon_getArea(void * jarg1) {
  double jresult ;
  BWTA::Polygon *arg1 = (BWTA::Polygon *) 0 ;
  double result;
  
  arg1 = (BWTA::Polygon *)jarg1; 
  result = (double)((BWTA::Polygon const *)arg1)->getArea();
  jresult = result; 
  return jresult;
}


SWIGEXPORT double SWIGSTDCALL CSharp_Polygon_getPerimeter(void * jarg1) {
  double jresult ;
  BWTA::Polygon *arg1 = (BWTA::Polygon *) 0 ;
  double result;
  
  arg1 = (BWTA::Polygon *)jarg1; 
  result = (double)((BWTA::Polygon const *)arg1)->getPerimeter();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Polygon_getCenter(void * jarg1) {
  void * jresult ;
  BWTA::Polygon *arg1 = (BWTA::Polygon *) 0 ;
  BWAPI::Position result;
  
  arg1 = (BWTA::Polygon *)jarg1; 
  result = ((BWTA::Polygon const *)arg1)->getCenter();
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_Polygon_isInside(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  BWTA::Polygon *arg1 = (BWTA::Polygon *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  bool result;
  
  arg1 = (BWTA::Polygon *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (bool)((BWTA::Polygon const *)arg1)->isInside(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Polygon_getNearestPoint(void * jarg1, void * jarg2) {
  void * jresult ;
  BWTA::Polygon *arg1 = (BWTA::Polygon *) 0 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp2 ;
  BWAPI::Position result;
  
  arg1 = (BWTA::Polygon *)jarg1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = ((BWTA::Polygon const *)arg1)->getNearestPoint(arg2);
  jresult = new BWAPI::Position((const BWAPI::Position &)result); 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Polygon(void * jarg1) {
  BWTA::Polygon *arg1 = (BWTA::Polygon *) 0 ;
  
  arg1 = (BWTA::Polygon *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Region_getPolygon(void * jarg1) {
  void * jresult ;
  BWTA::Region *arg1 = (BWTA::Region *) 0 ;
  BWTA::Polygon *result = 0 ;
  
  arg1 = (BWTA::Region *)jarg1; 
  result = (BWTA::Polygon *) &((BWTA::Region const *)arg1)->getPolygon();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Region_getCenter(void * jarg1) {
  void * jresult ;
  BWTA::Region *arg1 = (BWTA::Region *) 0 ;
  BWAPI::Position *result = 0 ;
  
  arg1 = (BWTA::Region *)jarg1; 
  result = (BWAPI::Position *) &((BWTA::Region const *)arg1)->getCenter();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Region_getChokepoints(void * jarg1) {
  void * jresult ;
  BWTA::Region *arg1 = (BWTA::Region *) 0 ;
  std::set< BWTA::Chokepoint * > *result = 0 ;
  
  arg1 = (BWTA::Region *)jarg1; 
  result = (std::set< BWTA::Chokepoint * > *) &((BWTA::Region const *)arg1)->getChokepoints();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_Region_getBaseLocations(void * jarg1) {
  void * jresult ;
  BWTA::Region *arg1 = (BWTA::Region *) 0 ;
  std::set< BWTA::BaseLocation * > *result = 0 ;
  
  arg1 = (BWTA::Region *)jarg1; 
  result = (std::set< BWTA::BaseLocation * > *) &((BWTA::Region const *)arg1)->getBaseLocations();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_Region(void * jarg1) {
  BWTA::Region *arg1 = (BWTA::Region *) 0 ;
  
  arg1 = (BWTA::Region *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  result = (std::set< BWAPI::Unit * > *)new std::set< BWAPI::Unit * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Unit * > *arg1 = 0 ;
  std::set< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (std::set< BWAPI::Unit * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Unit * > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::Unit * > *)new std::set< BWAPI::Unit * >((std::set< BWAPI::Unit * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_UnitSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::Unit * > *arg1 = (std::set< BWAPI::Unit * > *) 0 ;
  std::set< BWAPI::Unit * >::size_type result;
  
  arg1 = (std::set< BWAPI::Unit * > *)jarg1; 
  result = ((std::set< BWAPI::Unit * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::Unit * > *arg1 = (std::set< BWAPI::Unit * > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Unit * > *)jarg1; 
  result = (bool)((std::set< BWAPI::Unit * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitSet_Clear(void * jarg1) {
  std::set< BWAPI::Unit * > *arg1 = (std::set< BWAPI::Unit * > *) 0 ;
  
  arg1 = (std::set< BWAPI::Unit * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Unit * > *arg1 = (std::set< BWAPI::Unit * > *) 0 ;
  std::set< BWAPI::Unit * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Unit * >::key_type temp2 = 0 ;
  std::set< BWAPI::Unit * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Unit * > *)jarg1; 
  temp2 = (std::set< BWAPI::Unit * >::key_type)jarg2;
  arg2 = &temp2; 
  try {
    result = (std::set< BWAPI::Unit * >::key_type *) &std_set_Sl_BWAPI_Unit_Sm__Sg__getitem(arg1,(BWAPI::Unit *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Unit * > *arg1 = (std::set< BWAPI::Unit * > *) 0 ;
  std::set< BWAPI::Unit * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Unit * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Unit * > *)jarg1; 
  temp2 = (std::set< BWAPI::Unit * >::key_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_set_Sl_BWAPI_Unit_Sm__Sg__ContainsKey(arg1,(BWAPI::Unit *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::Unit * > *arg1 = (std::set< BWAPI::Unit * > *) 0 ;
  std::set< BWAPI::Unit * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Unit * >::key_type temp2 = 0 ;
  
  arg1 = (std::set< BWAPI::Unit * > *)jarg1; 
  temp2 = (std::set< BWAPI::Unit * >::key_type)jarg2;
  arg2 = &temp2; 
  try {
    std_set_Sl_BWAPI_Unit_Sm__Sg__Add(arg1,(BWAPI::Unit *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Unit * > *arg1 = (std::set< BWAPI::Unit * > *) 0 ;
  std::set< BWAPI::Unit * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Unit * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Unit * > *)jarg1; 
  temp2 = (std::set< BWAPI::Unit * >::key_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_set_Sl_BWAPI_Unit_Sm__Sg__Remove(arg1,(BWAPI::Unit *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Unit * > *arg1 = (std::set< BWAPI::Unit * > *) 0 ;
  std::set< BWAPI::Unit * >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::Unit * > *)jarg1; 
  result = (std::set< BWAPI::Unit * >::iterator *)std_set_Sl_BWAPI_Unit_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Unit * > *arg1 = (std::set< BWAPI::Unit * > *) 0 ;
  std::set< BWAPI::Unit * >::iterator *arg2 = (std::set< BWAPI::Unit * >::iterator *) 0 ;
  std::set< BWAPI::Unit * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Unit * > *)jarg1; 
  arg2 = (std::set< BWAPI::Unit * >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::Unit * >::key_type *) &std_set_Sl_BWAPI_Unit_Sm__Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitSet(void * jarg1) {
  std::set< BWAPI::Unit * > *arg1 = (std::set< BWAPI::Unit * > *) 0 ;
  
  arg1 = (std::set< BWAPI::Unit * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AttackTypeSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::AttackType > *result = 0 ;
  
  result = (std::set< BWAPI::AttackType > *)new std::set< BWAPI::AttackType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_AttackTypeSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::AttackType > *arg1 = 0 ;
  std::set< BWAPI::AttackType > *result = 0 ;
  
  arg1 = (std::set< BWAPI::AttackType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::AttackType > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::AttackType > *)new std::set< BWAPI::AttackType >((std::set< BWAPI::AttackType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_AttackTypeSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::AttackType > *arg1 = (std::set< BWAPI::AttackType > *) 0 ;
  std::set< BWAPI::AttackType >::size_type result;
  
  arg1 = (std::set< BWAPI::AttackType > *)jarg1; 
  result = ((std::set< BWAPI::AttackType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AttackTypeSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::AttackType > *arg1 = (std::set< BWAPI::AttackType > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::AttackType > *)jarg1; 
  result = (bool)((std::set< BWAPI::AttackType > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AttackTypeSet_Clear(void * jarg1) {
  std::set< BWAPI::AttackType > *arg1 = (std::set< BWAPI::AttackType > *) 0 ;
  
  arg1 = (std::set< BWAPI::AttackType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttackTypeSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::AttackType > *arg1 = (std::set< BWAPI::AttackType > *) 0 ;
  std::set< BWAPI::AttackType >::key_type *arg2 = 0 ;
  std::set< BWAPI::AttackType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::AttackType > *)jarg1; 
  arg2 = (std::set< BWAPI::AttackType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::AttackType >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::AttackType >::key_type *) &std_set_Sl_BWAPI_AttackType_Sg__getitem(arg1,(BWAPI::AttackType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AttackTypeSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::AttackType > *arg1 = (std::set< BWAPI::AttackType > *) 0 ;
  std::set< BWAPI::AttackType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::AttackType > *)jarg1; 
  arg2 = (std::set< BWAPI::AttackType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::AttackType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_AttackType_Sg__ContainsKey(arg1,(BWAPI::AttackType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_AttackTypeSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::AttackType > *arg1 = (std::set< BWAPI::AttackType > *) 0 ;
  std::set< BWAPI::AttackType >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::AttackType > *)jarg1; 
  arg2 = (std::set< BWAPI::AttackType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::AttackType >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_AttackType_Sg__Add(arg1,(BWAPI::AttackType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_AttackTypeSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::AttackType > *arg1 = (std::set< BWAPI::AttackType > *) 0 ;
  std::set< BWAPI::AttackType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::AttackType > *)jarg1; 
  arg2 = (std::set< BWAPI::AttackType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::AttackType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_AttackType_Sg__Remove(arg1,(BWAPI::AttackType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttackTypeSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::AttackType > *arg1 = (std::set< BWAPI::AttackType > *) 0 ;
  std::set< BWAPI::AttackType >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::AttackType > *)jarg1; 
  result = (std::set< BWAPI::AttackType >::iterator *)std_set_Sl_BWAPI_AttackType_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_AttackTypeSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::AttackType > *arg1 = (std::set< BWAPI::AttackType > *) 0 ;
  std::set< BWAPI::AttackType >::iterator *arg2 = (std::set< BWAPI::AttackType >::iterator *) 0 ;
  std::set< BWAPI::AttackType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::AttackType > *)jarg1; 
  arg2 = (std::set< BWAPI::AttackType >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::AttackType >::key_type *) &std_set_Sl_BWAPI_AttackType_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_AttackTypeSet(void * jarg1) {
  std::set< BWAPI::AttackType > *arg1 = (std::set< BWAPI::AttackType > *) 0 ;
  
  arg1 = (std::set< BWAPI::AttackType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DamageTypeSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::DamageType > *result = 0 ;
  
  result = (std::set< BWAPI::DamageType > *)new std::set< BWAPI::DamageType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_DamageTypeSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::DamageType > *arg1 = 0 ;
  std::set< BWAPI::DamageType > *result = 0 ;
  
  arg1 = (std::set< BWAPI::DamageType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::DamageType > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::DamageType > *)new std::set< BWAPI::DamageType >((std::set< BWAPI::DamageType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_DamageTypeSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::DamageType > *arg1 = (std::set< BWAPI::DamageType > *) 0 ;
  std::set< BWAPI::DamageType >::size_type result;
  
  arg1 = (std::set< BWAPI::DamageType > *)jarg1; 
  result = ((std::set< BWAPI::DamageType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DamageTypeSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::DamageType > *arg1 = (std::set< BWAPI::DamageType > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::DamageType > *)jarg1; 
  result = (bool)((std::set< BWAPI::DamageType > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DamageTypeSet_Clear(void * jarg1) {
  std::set< BWAPI::DamageType > *arg1 = (std::set< BWAPI::DamageType > *) 0 ;
  
  arg1 = (std::set< BWAPI::DamageType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DamageTypeSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::DamageType > *arg1 = (std::set< BWAPI::DamageType > *) 0 ;
  std::set< BWAPI::DamageType >::key_type *arg2 = 0 ;
  std::set< BWAPI::DamageType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::DamageType > *)jarg1; 
  arg2 = (std::set< BWAPI::DamageType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::DamageType >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::DamageType >::key_type *) &std_set_Sl_BWAPI_DamageType_Sg__getitem(arg1,(BWAPI::DamageType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DamageTypeSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::DamageType > *arg1 = (std::set< BWAPI::DamageType > *) 0 ;
  std::set< BWAPI::DamageType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::DamageType > *)jarg1; 
  arg2 = (std::set< BWAPI::DamageType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::DamageType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_DamageType_Sg__ContainsKey(arg1,(BWAPI::DamageType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_DamageTypeSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::DamageType > *arg1 = (std::set< BWAPI::DamageType > *) 0 ;
  std::set< BWAPI::DamageType >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::DamageType > *)jarg1; 
  arg2 = (std::set< BWAPI::DamageType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::DamageType >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_DamageType_Sg__Add(arg1,(BWAPI::DamageType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_DamageTypeSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::DamageType > *arg1 = (std::set< BWAPI::DamageType > *) 0 ;
  std::set< BWAPI::DamageType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::DamageType > *)jarg1; 
  arg2 = (std::set< BWAPI::DamageType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::DamageType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_DamageType_Sg__Remove(arg1,(BWAPI::DamageType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DamageTypeSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::DamageType > *arg1 = (std::set< BWAPI::DamageType > *) 0 ;
  std::set< BWAPI::DamageType >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::DamageType > *)jarg1; 
  result = (std::set< BWAPI::DamageType >::iterator *)std_set_Sl_BWAPI_DamageType_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_DamageTypeSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::DamageType > *arg1 = (std::set< BWAPI::DamageType > *) 0 ;
  std::set< BWAPI::DamageType >::iterator *arg2 = (std::set< BWAPI::DamageType >::iterator *) 0 ;
  std::set< BWAPI::DamageType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::DamageType > *)jarg1; 
  arg2 = (std::set< BWAPI::DamageType >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::DamageType >::key_type *) &std_set_Sl_BWAPI_DamageType_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DamageTypeSet(void * jarg1) {
  std::set< BWAPI::DamageType > *arg1 = (std::set< BWAPI::DamageType > *) 0 ;
  
  arg1 = (std::set< BWAPI::DamageType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ErrorSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::Error > *result = 0 ;
  
  result = (std::set< BWAPI::Error > *)new std::set< BWAPI::Error >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ErrorSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Error > *arg1 = 0 ;
  std::set< BWAPI::Error > *result = 0 ;
  
  arg1 = (std::set< BWAPI::Error > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Error > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::Error > *)new std::set< BWAPI::Error >((std::set< BWAPI::Error > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ErrorSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::Error > *arg1 = (std::set< BWAPI::Error > *) 0 ;
  std::set< BWAPI::Error >::size_type result;
  
  arg1 = (std::set< BWAPI::Error > *)jarg1; 
  result = ((std::set< BWAPI::Error > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ErrorSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::Error > *arg1 = (std::set< BWAPI::Error > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Error > *)jarg1; 
  result = (bool)((std::set< BWAPI::Error > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ErrorSet_Clear(void * jarg1) {
  std::set< BWAPI::Error > *arg1 = (std::set< BWAPI::Error > *) 0 ;
  
  arg1 = (std::set< BWAPI::Error > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ErrorSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Error > *arg1 = (std::set< BWAPI::Error > *) 0 ;
  std::set< BWAPI::Error >::key_type *arg2 = 0 ;
  std::set< BWAPI::Error >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Error > *)jarg1; 
  arg2 = (std::set< BWAPI::Error >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Error >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::Error >::key_type *) &std_set_Sl_BWAPI_Error_Sg__getitem(arg1,(BWAPI::Error const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ErrorSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Error > *arg1 = (std::set< BWAPI::Error > *) 0 ;
  std::set< BWAPI::Error >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Error > *)jarg1; 
  arg2 = (std::set< BWAPI::Error >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Error >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_Error_Sg__ContainsKey(arg1,(BWAPI::Error const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ErrorSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::Error > *arg1 = (std::set< BWAPI::Error > *) 0 ;
  std::set< BWAPI::Error >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::Error > *)jarg1; 
  arg2 = (std::set< BWAPI::Error >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Error >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_Error_Sg__Add(arg1,(BWAPI::Error const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ErrorSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Error > *arg1 = (std::set< BWAPI::Error > *) 0 ;
  std::set< BWAPI::Error >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Error > *)jarg1; 
  arg2 = (std::set< BWAPI::Error >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Error >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_Error_Sg__Remove(arg1,(BWAPI::Error const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ErrorSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Error > *arg1 = (std::set< BWAPI::Error > *) 0 ;
  std::set< BWAPI::Error >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::Error > *)jarg1; 
  result = (std::set< BWAPI::Error >::iterator *)std_set_Sl_BWAPI_Error_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ErrorSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Error > *arg1 = (std::set< BWAPI::Error > *) 0 ;
  std::set< BWAPI::Error >::iterator *arg2 = (std::set< BWAPI::Error >::iterator *) 0 ;
  std::set< BWAPI::Error >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Error > *)jarg1; 
  arg2 = (std::set< BWAPI::Error >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::Error >::key_type *) &std_set_Sl_BWAPI_Error_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ErrorSet(void * jarg1) {
  std::set< BWAPI::Error > *arg1 = (std::set< BWAPI::Error > *) 0 ;
  
  arg1 = (std::set< BWAPI::Error > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ExplosionTypeSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::ExplosionType > *result = 0 ;
  
  result = (std::set< BWAPI::ExplosionType > *)new std::set< BWAPI::ExplosionType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ExplosionTypeSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::ExplosionType > *arg1 = 0 ;
  std::set< BWAPI::ExplosionType > *result = 0 ;
  
  arg1 = (std::set< BWAPI::ExplosionType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::ExplosionType > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::ExplosionType > *)new std::set< BWAPI::ExplosionType >((std::set< BWAPI::ExplosionType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ExplosionTypeSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::ExplosionType > *arg1 = (std::set< BWAPI::ExplosionType > *) 0 ;
  std::set< BWAPI::ExplosionType >::size_type result;
  
  arg1 = (std::set< BWAPI::ExplosionType > *)jarg1; 
  result = ((std::set< BWAPI::ExplosionType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExplosionTypeSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::ExplosionType > *arg1 = (std::set< BWAPI::ExplosionType > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::ExplosionType > *)jarg1; 
  result = (bool)((std::set< BWAPI::ExplosionType > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExplosionTypeSet_Clear(void * jarg1) {
  std::set< BWAPI::ExplosionType > *arg1 = (std::set< BWAPI::ExplosionType > *) 0 ;
  
  arg1 = (std::set< BWAPI::ExplosionType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::ExplosionType > *arg1 = (std::set< BWAPI::ExplosionType > *) 0 ;
  std::set< BWAPI::ExplosionType >::key_type *arg2 = 0 ;
  std::set< BWAPI::ExplosionType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::ExplosionType > *)jarg1; 
  arg2 = (std::set< BWAPI::ExplosionType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::ExplosionType >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::ExplosionType >::key_type *) &std_set_Sl_BWAPI_ExplosionType_Sg__getitem(arg1,(BWAPI::ExplosionType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExplosionTypeSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::ExplosionType > *arg1 = (std::set< BWAPI::ExplosionType > *) 0 ;
  std::set< BWAPI::ExplosionType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::ExplosionType > *)jarg1; 
  arg2 = (std::set< BWAPI::ExplosionType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::ExplosionType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_ExplosionType_Sg__ContainsKey(arg1,(BWAPI::ExplosionType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ExplosionTypeSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::ExplosionType > *arg1 = (std::set< BWAPI::ExplosionType > *) 0 ;
  std::set< BWAPI::ExplosionType >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::ExplosionType > *)jarg1; 
  arg2 = (std::set< BWAPI::ExplosionType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::ExplosionType >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_ExplosionType_Sg__Add(arg1,(BWAPI::ExplosionType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ExplosionTypeSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::ExplosionType > *arg1 = (std::set< BWAPI::ExplosionType > *) 0 ;
  std::set< BWAPI::ExplosionType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::ExplosionType > *)jarg1; 
  arg2 = (std::set< BWAPI::ExplosionType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::ExplosionType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_ExplosionType_Sg__Remove(arg1,(BWAPI::ExplosionType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::ExplosionType > *arg1 = (std::set< BWAPI::ExplosionType > *) 0 ;
  std::set< BWAPI::ExplosionType >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::ExplosionType > *)jarg1; 
  result = (std::set< BWAPI::ExplosionType >::iterator *)std_set_Sl_BWAPI_ExplosionType_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ExplosionTypeSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::ExplosionType > *arg1 = (std::set< BWAPI::ExplosionType > *) 0 ;
  std::set< BWAPI::ExplosionType >::iterator *arg2 = (std::set< BWAPI::ExplosionType >::iterator *) 0 ;
  std::set< BWAPI::ExplosionType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::ExplosionType > *)jarg1; 
  arg2 = (std::set< BWAPI::ExplosionType >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::ExplosionType >::key_type *) &std_set_Sl_BWAPI_ExplosionType_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ExplosionTypeSet(void * jarg1) {
  std::set< BWAPI::ExplosionType > *arg1 = (std::set< BWAPI::ExplosionType > *) 0 ;
  
  arg1 = (std::set< BWAPI::ExplosionType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ForcePtrSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::Force * > *result = 0 ;
  
  result = (std::set< BWAPI::Force * > *)new std::set< BWAPI::Force * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ForcePtrSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Force * > *arg1 = 0 ;
  std::set< BWAPI::Force * > *result = 0 ;
  
  arg1 = (std::set< BWAPI::Force * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Force * > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::Force * > *)new std::set< BWAPI::Force * >((std::set< BWAPI::Force * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ForcePtrSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::Force * > *arg1 = (std::set< BWAPI::Force * > *) 0 ;
  std::set< BWAPI::Force * >::size_type result;
  
  arg1 = (std::set< BWAPI::Force * > *)jarg1; 
  result = ((std::set< BWAPI::Force * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ForcePtrSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::Force * > *arg1 = (std::set< BWAPI::Force * > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Force * > *)jarg1; 
  result = (bool)((std::set< BWAPI::Force * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ForcePtrSet_Clear(void * jarg1) {
  std::set< BWAPI::Force * > *arg1 = (std::set< BWAPI::Force * > *) 0 ;
  
  arg1 = (std::set< BWAPI::Force * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ForcePtrSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Force * > *arg1 = (std::set< BWAPI::Force * > *) 0 ;
  std::set< BWAPI::Force * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Force * >::key_type temp2 = 0 ;
  std::set< BWAPI::Force * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Force * > *)jarg1; 
  temp2 = (std::set< BWAPI::Force * >::key_type)jarg2;
  arg2 = &temp2; 
  try {
    result = (std::set< BWAPI::Force * >::key_type *) &std_set_Sl_BWAPI_Force_Sm__Sg__getitem(arg1,(BWAPI::Force *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ForcePtrSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Force * > *arg1 = (std::set< BWAPI::Force * > *) 0 ;
  std::set< BWAPI::Force * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Force * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Force * > *)jarg1; 
  temp2 = (std::set< BWAPI::Force * >::key_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_set_Sl_BWAPI_Force_Sm__Sg__ContainsKey(arg1,(BWAPI::Force *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ForcePtrSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::Force * > *arg1 = (std::set< BWAPI::Force * > *) 0 ;
  std::set< BWAPI::Force * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Force * >::key_type temp2 = 0 ;
  
  arg1 = (std::set< BWAPI::Force * > *)jarg1; 
  temp2 = (std::set< BWAPI::Force * >::key_type)jarg2;
  arg2 = &temp2; 
  try {
    std_set_Sl_BWAPI_Force_Sm__Sg__Add(arg1,(BWAPI::Force *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ForcePtrSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Force * > *arg1 = (std::set< BWAPI::Force * > *) 0 ;
  std::set< BWAPI::Force * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Force * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Force * > *)jarg1; 
  temp2 = (std::set< BWAPI::Force * >::key_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_set_Sl_BWAPI_Force_Sm__Sg__Remove(arg1,(BWAPI::Force *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ForcePtrSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Force * > *arg1 = (std::set< BWAPI::Force * > *) 0 ;
  std::set< BWAPI::Force * >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::Force * > *)jarg1; 
  result = (std::set< BWAPI::Force * >::iterator *)std_set_Sl_BWAPI_Force_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ForcePtrSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Force * > *arg1 = (std::set< BWAPI::Force * > *) 0 ;
  std::set< BWAPI::Force * >::iterator *arg2 = (std::set< BWAPI::Force * >::iterator *) 0 ;
  std::set< BWAPI::Force * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Force * > *)jarg1; 
  arg2 = (std::set< BWAPI::Force * >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::Force * >::key_type *) &std_set_Sl_BWAPI_Force_Sm__Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ForcePtrSet(void * jarg1) {
  std::set< BWAPI::Force * > *arg1 = (std::set< BWAPI::Force * > *) 0 ;
  
  arg1 = (std::set< BWAPI::Force * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OrderSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::Order > *result = 0 ;
  
  result = (std::set< BWAPI::Order > *)new std::set< BWAPI::Order >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OrderSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Order > *arg1 = 0 ;
  std::set< BWAPI::Order > *result = 0 ;
  
  arg1 = (std::set< BWAPI::Order > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Order > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::Order > *)new std::set< BWAPI::Order >((std::set< BWAPI::Order > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_OrderSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::Order > *arg1 = (std::set< BWAPI::Order > *) 0 ;
  std::set< BWAPI::Order >::size_type result;
  
  arg1 = (std::set< BWAPI::Order > *)jarg1; 
  result = ((std::set< BWAPI::Order > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OrderSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::Order > *arg1 = (std::set< BWAPI::Order > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Order > *)jarg1; 
  result = (bool)((std::set< BWAPI::Order > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OrderSet_Clear(void * jarg1) {
  std::set< BWAPI::Order > *arg1 = (std::set< BWAPI::Order > *) 0 ;
  
  arg1 = (std::set< BWAPI::Order > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OrderSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Order > *arg1 = (std::set< BWAPI::Order > *) 0 ;
  std::set< BWAPI::Order >::key_type *arg2 = 0 ;
  std::set< BWAPI::Order >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Order > *)jarg1; 
  arg2 = (std::set< BWAPI::Order >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Order >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::Order >::key_type *) &std_set_Sl_BWAPI_Order_Sg__getitem(arg1,(BWAPI::Order const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OrderSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Order > *arg1 = (std::set< BWAPI::Order > *) 0 ;
  std::set< BWAPI::Order >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Order > *)jarg1; 
  arg2 = (std::set< BWAPI::Order >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Order >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_Order_Sg__ContainsKey(arg1,(BWAPI::Order const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_OrderSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::Order > *arg1 = (std::set< BWAPI::Order > *) 0 ;
  std::set< BWAPI::Order >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::Order > *)jarg1; 
  arg2 = (std::set< BWAPI::Order >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Order >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_Order_Sg__Add(arg1,(BWAPI::Order const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OrderSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Order > *arg1 = (std::set< BWAPI::Order > *) 0 ;
  std::set< BWAPI::Order >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Order > *)jarg1; 
  arg2 = (std::set< BWAPI::Order >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Order >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_Order_Sg__Remove(arg1,(BWAPI::Order const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OrderSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Order > *arg1 = (std::set< BWAPI::Order > *) 0 ;
  std::set< BWAPI::Order >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::Order > *)jarg1; 
  result = (std::set< BWAPI::Order >::iterator *)std_set_Sl_BWAPI_Order_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OrderSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Order > *arg1 = (std::set< BWAPI::Order > *) 0 ;
  std::set< BWAPI::Order >::iterator *arg2 = (std::set< BWAPI::Order >::iterator *) 0 ;
  std::set< BWAPI::Order >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Order > *)jarg1; 
  arg2 = (std::set< BWAPI::Order >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::Order >::key_type *) &std_set_Sl_BWAPI_Order_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OrderSet(void * jarg1) {
  std::set< BWAPI::Order > *arg1 = (std::set< BWAPI::Order > *) 0 ;
  
  arg1 = (std::set< BWAPI::Order > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlayerPtrSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::Player * > *result = 0 ;
  
  result = (std::set< BWAPI::Player * > *)new std::set< BWAPI::Player * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlayerPtrSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Player * > *arg1 = 0 ;
  std::set< BWAPI::Player * > *result = 0 ;
  
  arg1 = (std::set< BWAPI::Player * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Player * > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::Player * > *)new std::set< BWAPI::Player * >((std::set< BWAPI::Player * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PlayerPtrSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::Player * > *arg1 = (std::set< BWAPI::Player * > *) 0 ;
  std::set< BWAPI::Player * >::size_type result;
  
  arg1 = (std::set< BWAPI::Player * > *)jarg1; 
  result = ((std::set< BWAPI::Player * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerPtrSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::Player * > *arg1 = (std::set< BWAPI::Player * > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Player * > *)jarg1; 
  result = (bool)((std::set< BWAPI::Player * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerPtrSet_Clear(void * jarg1) {
  std::set< BWAPI::Player * > *arg1 = (std::set< BWAPI::Player * > *) 0 ;
  
  arg1 = (std::set< BWAPI::Player * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerPtrSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Player * > *arg1 = (std::set< BWAPI::Player * > *) 0 ;
  std::set< BWAPI::Player * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Player * >::key_type temp2 = 0 ;
  std::set< BWAPI::Player * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Player * > *)jarg1; 
  temp2 = (std::set< BWAPI::Player * >::key_type)jarg2;
  arg2 = &temp2; 
  try {
    result = (std::set< BWAPI::Player * >::key_type *) &std_set_Sl_BWAPI_Player_Sm__Sg__getitem(arg1,(BWAPI::Player *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerPtrSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Player * > *arg1 = (std::set< BWAPI::Player * > *) 0 ;
  std::set< BWAPI::Player * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Player * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Player * > *)jarg1; 
  temp2 = (std::set< BWAPI::Player * >::key_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_set_Sl_BWAPI_Player_Sm__Sg__ContainsKey(arg1,(BWAPI::Player *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerPtrSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::Player * > *arg1 = (std::set< BWAPI::Player * > *) 0 ;
  std::set< BWAPI::Player * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Player * >::key_type temp2 = 0 ;
  
  arg1 = (std::set< BWAPI::Player * > *)jarg1; 
  temp2 = (std::set< BWAPI::Player * >::key_type)jarg2;
  arg2 = &temp2; 
  try {
    std_set_Sl_BWAPI_Player_Sm__Sg__Add(arg1,(BWAPI::Player *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerPtrSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Player * > *arg1 = (std::set< BWAPI::Player * > *) 0 ;
  std::set< BWAPI::Player * >::key_type *arg2 = 0 ;
  std::set< BWAPI::Player * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Player * > *)jarg1; 
  temp2 = (std::set< BWAPI::Player * >::key_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_set_Sl_BWAPI_Player_Sm__Sg__Remove(arg1,(BWAPI::Player *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerPtrSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Player * > *arg1 = (std::set< BWAPI::Player * > *) 0 ;
  std::set< BWAPI::Player * >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::Player * > *)jarg1; 
  result = (std::set< BWAPI::Player * >::iterator *)std_set_Sl_BWAPI_Player_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerPtrSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Player * > *arg1 = (std::set< BWAPI::Player * > *) 0 ;
  std::set< BWAPI::Player * >::iterator *arg2 = (std::set< BWAPI::Player * >::iterator *) 0 ;
  std::set< BWAPI::Player * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Player * > *)jarg1; 
  arg2 = (std::set< BWAPI::Player * >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::Player * >::key_type *) &std_set_Sl_BWAPI_Player_Sm__Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PlayerPtrSet(void * jarg1) {
  std::set< BWAPI::Player * > *arg1 = (std::set< BWAPI::Player * > *) 0 ;
  
  arg1 = (std::set< BWAPI::Player * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlayerTypeSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::PlayerType > *result = 0 ;
  
  result = (std::set< BWAPI::PlayerType > *)new std::set< BWAPI::PlayerType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PlayerTypeSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::PlayerType > *arg1 = 0 ;
  std::set< BWAPI::PlayerType > *result = 0 ;
  
  arg1 = (std::set< BWAPI::PlayerType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::PlayerType > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::PlayerType > *)new std::set< BWAPI::PlayerType >((std::set< BWAPI::PlayerType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PlayerTypeSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::PlayerType > *arg1 = (std::set< BWAPI::PlayerType > *) 0 ;
  std::set< BWAPI::PlayerType >::size_type result;
  
  arg1 = (std::set< BWAPI::PlayerType > *)jarg1; 
  result = ((std::set< BWAPI::PlayerType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerTypeSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::PlayerType > *arg1 = (std::set< BWAPI::PlayerType > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::PlayerType > *)jarg1; 
  result = (bool)((std::set< BWAPI::PlayerType > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerTypeSet_Clear(void * jarg1) {
  std::set< BWAPI::PlayerType > *arg1 = (std::set< BWAPI::PlayerType > *) 0 ;
  
  arg1 = (std::set< BWAPI::PlayerType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerTypeSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::PlayerType > *arg1 = (std::set< BWAPI::PlayerType > *) 0 ;
  std::set< BWAPI::PlayerType >::key_type *arg2 = 0 ;
  std::set< BWAPI::PlayerType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::PlayerType > *)jarg1; 
  arg2 = (std::set< BWAPI::PlayerType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::PlayerType >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::PlayerType >::key_type *) &std_set_Sl_BWAPI_PlayerType_Sg__getitem(arg1,(BWAPI::PlayerType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerTypeSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::PlayerType > *arg1 = (std::set< BWAPI::PlayerType > *) 0 ;
  std::set< BWAPI::PlayerType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::PlayerType > *)jarg1; 
  arg2 = (std::set< BWAPI::PlayerType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::PlayerType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_PlayerType_Sg__ContainsKey(arg1,(BWAPI::PlayerType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PlayerTypeSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::PlayerType > *arg1 = (std::set< BWAPI::PlayerType > *) 0 ;
  std::set< BWAPI::PlayerType >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::PlayerType > *)jarg1; 
  arg2 = (std::set< BWAPI::PlayerType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::PlayerType >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_PlayerType_Sg__Add(arg1,(BWAPI::PlayerType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PlayerTypeSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::PlayerType > *arg1 = (std::set< BWAPI::PlayerType > *) 0 ;
  std::set< BWAPI::PlayerType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::PlayerType > *)jarg1; 
  arg2 = (std::set< BWAPI::PlayerType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::PlayerType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_PlayerType_Sg__Remove(arg1,(BWAPI::PlayerType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerTypeSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::PlayerType > *arg1 = (std::set< BWAPI::PlayerType > *) 0 ;
  std::set< BWAPI::PlayerType >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::PlayerType > *)jarg1; 
  result = (std::set< BWAPI::PlayerType >::iterator *)std_set_Sl_BWAPI_PlayerType_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PlayerTypeSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::PlayerType > *arg1 = (std::set< BWAPI::PlayerType > *) 0 ;
  std::set< BWAPI::PlayerType >::iterator *arg2 = (std::set< BWAPI::PlayerType >::iterator *) 0 ;
  std::set< BWAPI::PlayerType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::PlayerType > *)jarg1; 
  arg2 = (std::set< BWAPI::PlayerType >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::PlayerType >::key_type *) &std_set_Sl_BWAPI_PlayerType_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PlayerTypeSet(void * jarg1) {
  std::set< BWAPI::PlayerType > *arg1 = (std::set< BWAPI::PlayerType > *) 0 ;
  
  arg1 = (std::set< BWAPI::PlayerType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RaceSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::Race > *result = 0 ;
  
  result = (std::set< BWAPI::Race > *)new std::set< BWAPI::Race >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RaceSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Race > *arg1 = 0 ;
  std::set< BWAPI::Race > *result = 0 ;
  
  arg1 = (std::set< BWAPI::Race > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Race > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::Race > *)new std::set< BWAPI::Race >((std::set< BWAPI::Race > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_RaceSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::Race > *arg1 = (std::set< BWAPI::Race > *) 0 ;
  std::set< BWAPI::Race >::size_type result;
  
  arg1 = (std::set< BWAPI::Race > *)jarg1; 
  result = ((std::set< BWAPI::Race > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RaceSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::Race > *arg1 = (std::set< BWAPI::Race > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Race > *)jarg1; 
  result = (bool)((std::set< BWAPI::Race > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaceSet_Clear(void * jarg1) {
  std::set< BWAPI::Race > *arg1 = (std::set< BWAPI::Race > *) 0 ;
  
  arg1 = (std::set< BWAPI::Race > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RaceSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Race > *arg1 = (std::set< BWAPI::Race > *) 0 ;
  std::set< BWAPI::Race >::key_type *arg2 = 0 ;
  std::set< BWAPI::Race >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Race > *)jarg1; 
  arg2 = (std::set< BWAPI::Race >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Race >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::Race >::key_type *) &std_set_Sl_BWAPI_Race_Sg__getitem(arg1,(BWAPI::Race const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RaceSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Race > *arg1 = (std::set< BWAPI::Race > *) 0 ;
  std::set< BWAPI::Race >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Race > *)jarg1; 
  arg2 = (std::set< BWAPI::Race >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Race >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_Race_Sg__ContainsKey(arg1,(BWAPI::Race const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RaceSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::Race > *arg1 = (std::set< BWAPI::Race > *) 0 ;
  std::set< BWAPI::Race >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::Race > *)jarg1; 
  arg2 = (std::set< BWAPI::Race >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Race >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_Race_Sg__Add(arg1,(BWAPI::Race const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RaceSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::Race > *arg1 = (std::set< BWAPI::Race > *) 0 ;
  std::set< BWAPI::Race >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::Race > *)jarg1; 
  arg2 = (std::set< BWAPI::Race >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::Race >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_Race_Sg__Remove(arg1,(BWAPI::Race const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RaceSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::Race > *arg1 = (std::set< BWAPI::Race > *) 0 ;
  std::set< BWAPI::Race >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::Race > *)jarg1; 
  result = (std::set< BWAPI::Race >::iterator *)std_set_Sl_BWAPI_Race_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RaceSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::Race > *arg1 = (std::set< BWAPI::Race > *) 0 ;
  std::set< BWAPI::Race >::iterator *arg2 = (std::set< BWAPI::Race >::iterator *) 0 ;
  std::set< BWAPI::Race >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::Race > *)jarg1; 
  arg2 = (std::set< BWAPI::Race >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::Race >::key_type *) &std_set_Sl_BWAPI_Race_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RaceSet(void * jarg1) {
  std::set< BWAPI::Race > *arg1 = (std::set< BWAPI::Race > *) 0 ;
  
  arg1 = (std::set< BWAPI::Race > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TechTypePtrSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::TechType const * > *result = 0 ;
  
  result = (std::set< BWAPI::TechType const * > *)new std::set< BWAPI::TechType const * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TechTypePtrSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::TechType const * > *arg1 = 0 ;
  std::set< BWAPI::TechType const * > *result = 0 ;
  
  arg1 = (std::set< BWAPI::TechType const * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TechType const * > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::TechType const * > *)new std::set< BWAPI::TechType const * >((std::set< BWAPI::TechType const * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TechTypePtrSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::TechType const * > *arg1 = (std::set< BWAPI::TechType const * > *) 0 ;
  std::set< BWAPI::TechType const * >::size_type result;
  
  arg1 = (std::set< BWAPI::TechType const * > *)jarg1; 
  result = ((std::set< BWAPI::TechType const * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TechTypePtrSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::TechType const * > *arg1 = (std::set< BWAPI::TechType const * > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::TechType const * > *)jarg1; 
  result = (bool)((std::set< BWAPI::TechType const * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TechTypePtrSet_Clear(void * jarg1) {
  std::set< BWAPI::TechType const * > *arg1 = (std::set< BWAPI::TechType const * > *) 0 ;
  
  arg1 = (std::set< BWAPI::TechType const * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypePtrSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::TechType const * > *arg1 = (std::set< BWAPI::TechType const * > *) 0 ;
  std::set< BWAPI::TechType const * >::key_type *arg2 = 0 ;
  std::set< BWAPI::TechType const * >::key_type temp2 = 0 ;
  std::set< BWAPI::TechType const * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::TechType const * > *)jarg1; 
  temp2 = (std::set< BWAPI::TechType const * >::key_type)jarg2;
  arg2 = &temp2; 
  try {
    result = (std::set< BWAPI::TechType const * >::key_type *) &std_set_Sl_BWAPI_TechType_SS_const_Sm__Sg__getitem(arg1,(BWAPI::TechType const *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TechTypePtrSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::TechType const * > *arg1 = (std::set< BWAPI::TechType const * > *) 0 ;
  std::set< BWAPI::TechType const * >::key_type *arg2 = 0 ;
  std::set< BWAPI::TechType const * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::TechType const * > *)jarg1; 
  temp2 = (std::set< BWAPI::TechType const * >::key_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_set_Sl_BWAPI_TechType_SS_const_Sm__Sg__ContainsKey(arg1,(BWAPI::TechType const *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TechTypePtrSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::TechType const * > *arg1 = (std::set< BWAPI::TechType const * > *) 0 ;
  std::set< BWAPI::TechType const * >::key_type *arg2 = 0 ;
  std::set< BWAPI::TechType const * >::key_type temp2 = 0 ;
  
  arg1 = (std::set< BWAPI::TechType const * > *)jarg1; 
  temp2 = (std::set< BWAPI::TechType const * >::key_type)jarg2;
  arg2 = &temp2; 
  try {
    std_set_Sl_BWAPI_TechType_SS_const_Sm__Sg__Add(arg1,(BWAPI::TechType const *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TechTypePtrSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::TechType const * > *arg1 = (std::set< BWAPI::TechType const * > *) 0 ;
  std::set< BWAPI::TechType const * >::key_type *arg2 = 0 ;
  std::set< BWAPI::TechType const * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::TechType const * > *)jarg1; 
  temp2 = (std::set< BWAPI::TechType const * >::key_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_set_Sl_BWAPI_TechType_SS_const_Sm__Sg__Remove(arg1,(BWAPI::TechType const *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypePtrSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::TechType const * > *arg1 = (std::set< BWAPI::TechType const * > *) 0 ;
  std::set< BWAPI::TechType const * >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::TechType const * > *)jarg1; 
  result = (std::set< BWAPI::TechType const * >::iterator *)std_set_Sl_BWAPI_TechType_SS_const_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypePtrSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::TechType const * > *arg1 = (std::set< BWAPI::TechType const * > *) 0 ;
  std::set< BWAPI::TechType const * >::iterator *arg2 = (std::set< BWAPI::TechType const * >::iterator *) 0 ;
  std::set< BWAPI::TechType const * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::TechType const * > *)jarg1; 
  arg2 = (std::set< BWAPI::TechType const * >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::TechType const * >::key_type *) &std_set_Sl_BWAPI_TechType_SS_const_Sm__Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TechTypePtrSet(void * jarg1) {
  std::set< BWAPI::TechType const * > *arg1 = (std::set< BWAPI::TechType const * > *) 0 ;
  
  arg1 = (std::set< BWAPI::TechType const * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TechTypeSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::TechType > *result = 0 ;
  
  result = (std::set< BWAPI::TechType > *)new std::set< BWAPI::TechType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TechTypeSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::TechType > *arg1 = 0 ;
  std::set< BWAPI::TechType > *result = 0 ;
  
  arg1 = (std::set< BWAPI::TechType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TechType > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::TechType > *)new std::set< BWAPI::TechType >((std::set< BWAPI::TechType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TechTypeSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::TechType > *arg1 = (std::set< BWAPI::TechType > *) 0 ;
  std::set< BWAPI::TechType >::size_type result;
  
  arg1 = (std::set< BWAPI::TechType > *)jarg1; 
  result = ((std::set< BWAPI::TechType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TechTypeSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::TechType > *arg1 = (std::set< BWAPI::TechType > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::TechType > *)jarg1; 
  result = (bool)((std::set< BWAPI::TechType > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TechTypeSet_Clear(void * jarg1) {
  std::set< BWAPI::TechType > *arg1 = (std::set< BWAPI::TechType > *) 0 ;
  
  arg1 = (std::set< BWAPI::TechType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::TechType > *arg1 = (std::set< BWAPI::TechType > *) 0 ;
  std::set< BWAPI::TechType >::key_type *arg2 = 0 ;
  std::set< BWAPI::TechType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::TechType > *)jarg1; 
  arg2 = (std::set< BWAPI::TechType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TechType >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::TechType >::key_type *) &std_set_Sl_BWAPI_TechType_Sg__getitem(arg1,(BWAPI::TechType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TechTypeSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::TechType > *arg1 = (std::set< BWAPI::TechType > *) 0 ;
  std::set< BWAPI::TechType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::TechType > *)jarg1; 
  arg2 = (std::set< BWAPI::TechType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TechType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_TechType_Sg__ContainsKey(arg1,(BWAPI::TechType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TechTypeSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::TechType > *arg1 = (std::set< BWAPI::TechType > *) 0 ;
  std::set< BWAPI::TechType >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::TechType > *)jarg1; 
  arg2 = (std::set< BWAPI::TechType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TechType >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_TechType_Sg__Add(arg1,(BWAPI::TechType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TechTypeSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::TechType > *arg1 = (std::set< BWAPI::TechType > *) 0 ;
  std::set< BWAPI::TechType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::TechType > *)jarg1; 
  arg2 = (std::set< BWAPI::TechType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TechType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_TechType_Sg__Remove(arg1,(BWAPI::TechType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::TechType > *arg1 = (std::set< BWAPI::TechType > *) 0 ;
  std::set< BWAPI::TechType >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::TechType > *)jarg1; 
  result = (std::set< BWAPI::TechType >::iterator *)std_set_Sl_BWAPI_TechType_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TechTypeSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::TechType > *arg1 = (std::set< BWAPI::TechType > *) 0 ;
  std::set< BWAPI::TechType >::iterator *arg2 = (std::set< BWAPI::TechType >::iterator *) 0 ;
  std::set< BWAPI::TechType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::TechType > *)jarg1; 
  arg2 = (std::set< BWAPI::TechType >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::TechType >::key_type *) &std_set_Sl_BWAPI_TechType_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TechTypeSet(void * jarg1) {
  std::set< BWAPI::TechType > *arg1 = (std::set< BWAPI::TechType > *) 0 ;
  
  arg1 = (std::set< BWAPI::TechType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitSizeTypeSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::UnitSizeType > *result = 0 ;
  
  result = (std::set< BWAPI::UnitSizeType > *)new std::set< BWAPI::UnitSizeType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitSizeTypeSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::UnitSizeType > *arg1 = 0 ;
  std::set< BWAPI::UnitSizeType > *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitSizeType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitSizeType > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::UnitSizeType > *)new std::set< BWAPI::UnitSizeType >((std::set< BWAPI::UnitSizeType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_UnitSizeTypeSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::UnitSizeType > *arg1 = (std::set< BWAPI::UnitSizeType > *) 0 ;
  std::set< BWAPI::UnitSizeType >::size_type result;
  
  arg1 = (std::set< BWAPI::UnitSizeType > *)jarg1; 
  result = ((std::set< BWAPI::UnitSizeType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitSizeTypeSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::UnitSizeType > *arg1 = (std::set< BWAPI::UnitSizeType > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UnitSizeType > *)jarg1; 
  result = (bool)((std::set< BWAPI::UnitSizeType > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitSizeTypeSet_Clear(void * jarg1) {
  std::set< BWAPI::UnitSizeType > *arg1 = (std::set< BWAPI::UnitSizeType > *) 0 ;
  
  arg1 = (std::set< BWAPI::UnitSizeType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitSizeTypeSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::UnitSizeType > *arg1 = (std::set< BWAPI::UnitSizeType > *) 0 ;
  std::set< BWAPI::UnitSizeType >::key_type *arg2 = 0 ;
  std::set< BWAPI::UnitSizeType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitSizeType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitSizeType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitSizeType >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::UnitSizeType >::key_type *) &std_set_Sl_BWAPI_UnitSizeType_Sg__getitem(arg1,(BWAPI::UnitSizeType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitSizeTypeSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::UnitSizeType > *arg1 = (std::set< BWAPI::UnitSizeType > *) 0 ;
  std::set< BWAPI::UnitSizeType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UnitSizeType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitSizeType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitSizeType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_UnitSizeType_Sg__ContainsKey(arg1,(BWAPI::UnitSizeType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitSizeTypeSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::UnitSizeType > *arg1 = (std::set< BWAPI::UnitSizeType > *) 0 ;
  std::set< BWAPI::UnitSizeType >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::UnitSizeType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitSizeType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitSizeType >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_UnitSizeType_Sg__Add(arg1,(BWAPI::UnitSizeType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitSizeTypeSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::UnitSizeType > *arg1 = (std::set< BWAPI::UnitSizeType > *) 0 ;
  std::set< BWAPI::UnitSizeType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UnitSizeType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitSizeType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitSizeType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_UnitSizeType_Sg__Remove(arg1,(BWAPI::UnitSizeType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitSizeTypeSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::UnitSizeType > *arg1 = (std::set< BWAPI::UnitSizeType > *) 0 ;
  std::set< BWAPI::UnitSizeType >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitSizeType > *)jarg1; 
  result = (std::set< BWAPI::UnitSizeType >::iterator *)std_set_Sl_BWAPI_UnitSizeType_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitSizeTypeSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::UnitSizeType > *arg1 = (std::set< BWAPI::UnitSizeType > *) 0 ;
  std::set< BWAPI::UnitSizeType >::iterator *arg2 = (std::set< BWAPI::UnitSizeType >::iterator *) 0 ;
  std::set< BWAPI::UnitSizeType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitSizeType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitSizeType >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::UnitSizeType >::key_type *) &std_set_Sl_BWAPI_UnitSizeType_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitSizeTypeSet(void * jarg1) {
  std::set< BWAPI::UnitSizeType > *arg1 = (std::set< BWAPI::UnitSizeType > *) 0 ;
  
  arg1 = (std::set< BWAPI::UnitSizeType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitTypePtrSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::UnitType const * > *result = 0 ;
  
  result = (std::set< BWAPI::UnitType const * > *)new std::set< BWAPI::UnitType const * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitTypePtrSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::UnitType const * > *arg1 = 0 ;
  std::set< BWAPI::UnitType const * > *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitType const * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitType const * > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::UnitType const * > *)new std::set< BWAPI::UnitType const * >((std::set< BWAPI::UnitType const * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_UnitTypePtrSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::UnitType const * > *arg1 = (std::set< BWAPI::UnitType const * > *) 0 ;
  std::set< BWAPI::UnitType const * >::size_type result;
  
  arg1 = (std::set< BWAPI::UnitType const * > *)jarg1; 
  result = ((std::set< BWAPI::UnitType const * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitTypePtrSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::UnitType const * > *arg1 = (std::set< BWAPI::UnitType const * > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UnitType const * > *)jarg1; 
  result = (bool)((std::set< BWAPI::UnitType const * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitTypePtrSet_Clear(void * jarg1) {
  std::set< BWAPI::UnitType const * > *arg1 = (std::set< BWAPI::UnitType const * > *) 0 ;
  
  arg1 = (std::set< BWAPI::UnitType const * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypePtrSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::UnitType const * > *arg1 = (std::set< BWAPI::UnitType const * > *) 0 ;
  std::set< BWAPI::UnitType const * >::key_type *arg2 = 0 ;
  std::set< BWAPI::UnitType const * >::key_type temp2 = 0 ;
  std::set< BWAPI::UnitType const * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitType const * > *)jarg1; 
  temp2 = (std::set< BWAPI::UnitType const * >::key_type)jarg2;
  arg2 = &temp2; 
  try {
    result = (std::set< BWAPI::UnitType const * >::key_type *) &std_set_Sl_BWAPI_UnitType_SS_const_Sm__Sg__getitem(arg1,(BWAPI::UnitType const *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitTypePtrSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::UnitType const * > *arg1 = (std::set< BWAPI::UnitType const * > *) 0 ;
  std::set< BWAPI::UnitType const * >::key_type *arg2 = 0 ;
  std::set< BWAPI::UnitType const * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UnitType const * > *)jarg1; 
  temp2 = (std::set< BWAPI::UnitType const * >::key_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_set_Sl_BWAPI_UnitType_SS_const_Sm__Sg__ContainsKey(arg1,(BWAPI::UnitType const *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitTypePtrSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::UnitType const * > *arg1 = (std::set< BWAPI::UnitType const * > *) 0 ;
  std::set< BWAPI::UnitType const * >::key_type *arg2 = 0 ;
  std::set< BWAPI::UnitType const * >::key_type temp2 = 0 ;
  
  arg1 = (std::set< BWAPI::UnitType const * > *)jarg1; 
  temp2 = (std::set< BWAPI::UnitType const * >::key_type)jarg2;
  arg2 = &temp2; 
  try {
    std_set_Sl_BWAPI_UnitType_SS_const_Sm__Sg__Add(arg1,(BWAPI::UnitType const *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitTypePtrSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::UnitType const * > *arg1 = (std::set< BWAPI::UnitType const * > *) 0 ;
  std::set< BWAPI::UnitType const * >::key_type *arg2 = 0 ;
  std::set< BWAPI::UnitType const * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UnitType const * > *)jarg1; 
  temp2 = (std::set< BWAPI::UnitType const * >::key_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_set_Sl_BWAPI_UnitType_SS_const_Sm__Sg__Remove(arg1,(BWAPI::UnitType const *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypePtrSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::UnitType const * > *arg1 = (std::set< BWAPI::UnitType const * > *) 0 ;
  std::set< BWAPI::UnitType const * >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitType const * > *)jarg1; 
  result = (std::set< BWAPI::UnitType const * >::iterator *)std_set_Sl_BWAPI_UnitType_SS_const_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypePtrSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::UnitType const * > *arg1 = (std::set< BWAPI::UnitType const * > *) 0 ;
  std::set< BWAPI::UnitType const * >::iterator *arg2 = (std::set< BWAPI::UnitType const * >::iterator *) 0 ;
  std::set< BWAPI::UnitType const * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitType const * > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitType const * >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::UnitType const * >::key_type *) &std_set_Sl_BWAPI_UnitType_SS_const_Sm__Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitTypePtrSet(void * jarg1) {
  std::set< BWAPI::UnitType const * > *arg1 = (std::set< BWAPI::UnitType const * > *) 0 ;
  
  arg1 = (std::set< BWAPI::UnitType const * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitTypeSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::UnitType > *result = 0 ;
  
  result = (std::set< BWAPI::UnitType > *)new std::set< BWAPI::UnitType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitTypeSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::UnitType > *arg1 = 0 ;
  std::set< BWAPI::UnitType > *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitType > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::UnitType > *)new std::set< BWAPI::UnitType >((std::set< BWAPI::UnitType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_UnitTypeSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::UnitType > *arg1 = (std::set< BWAPI::UnitType > *) 0 ;
  std::set< BWAPI::UnitType >::size_type result;
  
  arg1 = (std::set< BWAPI::UnitType > *)jarg1; 
  result = ((std::set< BWAPI::UnitType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitTypeSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::UnitType > *arg1 = (std::set< BWAPI::UnitType > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UnitType > *)jarg1; 
  result = (bool)((std::set< BWAPI::UnitType > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitTypeSet_Clear(void * jarg1) {
  std::set< BWAPI::UnitType > *arg1 = (std::set< BWAPI::UnitType > *) 0 ;
  
  arg1 = (std::set< BWAPI::UnitType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypeSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::UnitType > *arg1 = (std::set< BWAPI::UnitType > *) 0 ;
  std::set< BWAPI::UnitType >::key_type *arg2 = 0 ;
  std::set< BWAPI::UnitType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitType >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::UnitType >::key_type *) &std_set_Sl_BWAPI_UnitType_Sg__getitem(arg1,(BWAPI::UnitType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitTypeSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::UnitType > *arg1 = (std::set< BWAPI::UnitType > *) 0 ;
  std::set< BWAPI::UnitType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UnitType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_UnitType_Sg__ContainsKey(arg1,(BWAPI::UnitType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitTypeSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::UnitType > *arg1 = (std::set< BWAPI::UnitType > *) 0 ;
  std::set< BWAPI::UnitType >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::UnitType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitType >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_UnitType_Sg__Add(arg1,(BWAPI::UnitType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitTypeSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::UnitType > *arg1 = (std::set< BWAPI::UnitType > *) 0 ;
  std::set< BWAPI::UnitType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UnitType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UnitType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_UnitType_Sg__Remove(arg1,(BWAPI::UnitType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypeSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::UnitType > *arg1 = (std::set< BWAPI::UnitType > *) 0 ;
  std::set< BWAPI::UnitType >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitType > *)jarg1; 
  result = (std::set< BWAPI::UnitType >::iterator *)std_set_Sl_BWAPI_UnitType_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypeSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::UnitType > *arg1 = (std::set< BWAPI::UnitType > *) 0 ;
  std::set< BWAPI::UnitType >::iterator *arg2 = (std::set< BWAPI::UnitType >::iterator *) 0 ;
  std::set< BWAPI::UnitType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::UnitType > *)jarg1; 
  arg2 = (std::set< BWAPI::UnitType >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::UnitType >::key_type *) &std_set_Sl_BWAPI_UnitType_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitTypeSet(void * jarg1) {
  std::set< BWAPI::UnitType > *arg1 = (std::set< BWAPI::UnitType > *) 0 ;
  
  arg1 = (std::set< BWAPI::UnitType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UpgradeTypePtrSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::UpgradeType const * > *result = 0 ;
  
  result = (std::set< BWAPI::UpgradeType const * > *)new std::set< BWAPI::UpgradeType const * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UpgradeTypePtrSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::UpgradeType const * > *arg1 = 0 ;
  std::set< BWAPI::UpgradeType const * > *result = 0 ;
  
  arg1 = (std::set< BWAPI::UpgradeType const * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UpgradeType const * > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::UpgradeType const * > *)new std::set< BWAPI::UpgradeType const * >((std::set< BWAPI::UpgradeType const * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_UpgradeTypePtrSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::UpgradeType const * > *arg1 = (std::set< BWAPI::UpgradeType const * > *) 0 ;
  std::set< BWAPI::UpgradeType const * >::size_type result;
  
  arg1 = (std::set< BWAPI::UpgradeType const * > *)jarg1; 
  result = ((std::set< BWAPI::UpgradeType const * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UpgradeTypePtrSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::UpgradeType const * > *arg1 = (std::set< BWAPI::UpgradeType const * > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UpgradeType const * > *)jarg1; 
  result = (bool)((std::set< BWAPI::UpgradeType const * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UpgradeTypePtrSet_Clear(void * jarg1) {
  std::set< BWAPI::UpgradeType const * > *arg1 = (std::set< BWAPI::UpgradeType const * > *) 0 ;
  
  arg1 = (std::set< BWAPI::UpgradeType const * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypePtrSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::UpgradeType const * > *arg1 = (std::set< BWAPI::UpgradeType const * > *) 0 ;
  std::set< BWAPI::UpgradeType const * >::key_type *arg2 = 0 ;
  std::set< BWAPI::UpgradeType const * >::key_type temp2 = 0 ;
  std::set< BWAPI::UpgradeType const * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::UpgradeType const * > *)jarg1; 
  temp2 = (std::set< BWAPI::UpgradeType const * >::key_type)jarg2;
  arg2 = &temp2; 
  try {
    result = (std::set< BWAPI::UpgradeType const * >::key_type *) &std_set_Sl_BWAPI_UpgradeType_SS_const_Sm__Sg__getitem(arg1,(BWAPI::UpgradeType const *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UpgradeTypePtrSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::UpgradeType const * > *arg1 = (std::set< BWAPI::UpgradeType const * > *) 0 ;
  std::set< BWAPI::UpgradeType const * >::key_type *arg2 = 0 ;
  std::set< BWAPI::UpgradeType const * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UpgradeType const * > *)jarg1; 
  temp2 = (std::set< BWAPI::UpgradeType const * >::key_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_set_Sl_BWAPI_UpgradeType_SS_const_Sm__Sg__ContainsKey(arg1,(BWAPI::UpgradeType const *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UpgradeTypePtrSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::UpgradeType const * > *arg1 = (std::set< BWAPI::UpgradeType const * > *) 0 ;
  std::set< BWAPI::UpgradeType const * >::key_type *arg2 = 0 ;
  std::set< BWAPI::UpgradeType const * >::key_type temp2 = 0 ;
  
  arg1 = (std::set< BWAPI::UpgradeType const * > *)jarg1; 
  temp2 = (std::set< BWAPI::UpgradeType const * >::key_type)jarg2;
  arg2 = &temp2; 
  try {
    std_set_Sl_BWAPI_UpgradeType_SS_const_Sm__Sg__Add(arg1,(BWAPI::UpgradeType const *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UpgradeTypePtrSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::UpgradeType const * > *arg1 = (std::set< BWAPI::UpgradeType const * > *) 0 ;
  std::set< BWAPI::UpgradeType const * >::key_type *arg2 = 0 ;
  std::set< BWAPI::UpgradeType const * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UpgradeType const * > *)jarg1; 
  temp2 = (std::set< BWAPI::UpgradeType const * >::key_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_set_Sl_BWAPI_UpgradeType_SS_const_Sm__Sg__Remove(arg1,(BWAPI::UpgradeType const *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypePtrSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::UpgradeType const * > *arg1 = (std::set< BWAPI::UpgradeType const * > *) 0 ;
  std::set< BWAPI::UpgradeType const * >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::UpgradeType const * > *)jarg1; 
  result = (std::set< BWAPI::UpgradeType const * >::iterator *)std_set_Sl_BWAPI_UpgradeType_SS_const_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypePtrSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::UpgradeType const * > *arg1 = (std::set< BWAPI::UpgradeType const * > *) 0 ;
  std::set< BWAPI::UpgradeType const * >::iterator *arg2 = (std::set< BWAPI::UpgradeType const * >::iterator *) 0 ;
  std::set< BWAPI::UpgradeType const * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::UpgradeType const * > *)jarg1; 
  arg2 = (std::set< BWAPI::UpgradeType const * >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::UpgradeType const * >::key_type *) &std_set_Sl_BWAPI_UpgradeType_SS_const_Sm__Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UpgradeTypePtrSet(void * jarg1) {
  std::set< BWAPI::UpgradeType const * > *arg1 = (std::set< BWAPI::UpgradeType const * > *) 0 ;
  
  arg1 = (std::set< BWAPI::UpgradeType const * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UpgradeTypeSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::UpgradeType > *result = 0 ;
  
  result = (std::set< BWAPI::UpgradeType > *)new std::set< BWAPI::UpgradeType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UpgradeTypeSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::UpgradeType > *arg1 = 0 ;
  std::set< BWAPI::UpgradeType > *result = 0 ;
  
  arg1 = (std::set< BWAPI::UpgradeType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UpgradeType > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::UpgradeType > *)new std::set< BWAPI::UpgradeType >((std::set< BWAPI::UpgradeType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_UpgradeTypeSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::UpgradeType > *arg1 = (std::set< BWAPI::UpgradeType > *) 0 ;
  std::set< BWAPI::UpgradeType >::size_type result;
  
  arg1 = (std::set< BWAPI::UpgradeType > *)jarg1; 
  result = ((std::set< BWAPI::UpgradeType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UpgradeTypeSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::UpgradeType > *arg1 = (std::set< BWAPI::UpgradeType > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UpgradeType > *)jarg1; 
  result = (bool)((std::set< BWAPI::UpgradeType > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UpgradeTypeSet_Clear(void * jarg1) {
  std::set< BWAPI::UpgradeType > *arg1 = (std::set< BWAPI::UpgradeType > *) 0 ;
  
  arg1 = (std::set< BWAPI::UpgradeType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypeSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::UpgradeType > *arg1 = (std::set< BWAPI::UpgradeType > *) 0 ;
  std::set< BWAPI::UpgradeType >::key_type *arg2 = 0 ;
  std::set< BWAPI::UpgradeType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::UpgradeType > *)jarg1; 
  arg2 = (std::set< BWAPI::UpgradeType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UpgradeType >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::UpgradeType >::key_type *) &std_set_Sl_BWAPI_UpgradeType_Sg__getitem(arg1,(BWAPI::UpgradeType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UpgradeTypeSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::UpgradeType > *arg1 = (std::set< BWAPI::UpgradeType > *) 0 ;
  std::set< BWAPI::UpgradeType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UpgradeType > *)jarg1; 
  arg2 = (std::set< BWAPI::UpgradeType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UpgradeType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_UpgradeType_Sg__ContainsKey(arg1,(BWAPI::UpgradeType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UpgradeTypeSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::UpgradeType > *arg1 = (std::set< BWAPI::UpgradeType > *) 0 ;
  std::set< BWAPI::UpgradeType >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::UpgradeType > *)jarg1; 
  arg2 = (std::set< BWAPI::UpgradeType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UpgradeType >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_UpgradeType_Sg__Add(arg1,(BWAPI::UpgradeType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UpgradeTypeSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::UpgradeType > *arg1 = (std::set< BWAPI::UpgradeType > *) 0 ;
  std::set< BWAPI::UpgradeType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::UpgradeType > *)jarg1; 
  arg2 = (std::set< BWAPI::UpgradeType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::UpgradeType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_UpgradeType_Sg__Remove(arg1,(BWAPI::UpgradeType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypeSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::UpgradeType > *arg1 = (std::set< BWAPI::UpgradeType > *) 0 ;
  std::set< BWAPI::UpgradeType >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::UpgradeType > *)jarg1; 
  result = (std::set< BWAPI::UpgradeType >::iterator *)std_set_Sl_BWAPI_UpgradeType_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UpgradeTypeSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::UpgradeType > *arg1 = (std::set< BWAPI::UpgradeType > *) 0 ;
  std::set< BWAPI::UpgradeType >::iterator *arg2 = (std::set< BWAPI::UpgradeType >::iterator *) 0 ;
  std::set< BWAPI::UpgradeType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::UpgradeType > *)jarg1; 
  arg2 = (std::set< BWAPI::UpgradeType >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::UpgradeType >::key_type *) &std_set_Sl_BWAPI_UpgradeType_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UpgradeTypeSet(void * jarg1) {
  std::set< BWAPI::UpgradeType > *arg1 = (std::set< BWAPI::UpgradeType > *) 0 ;
  
  arg1 = (std::set< BWAPI::UpgradeType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WeaponTypeSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::WeaponType > *result = 0 ;
  
  result = (std::set< BWAPI::WeaponType > *)new std::set< BWAPI::WeaponType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_WeaponTypeSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::WeaponType > *arg1 = 0 ;
  std::set< BWAPI::WeaponType > *result = 0 ;
  
  arg1 = (std::set< BWAPI::WeaponType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::WeaponType > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::WeaponType > *)new std::set< BWAPI::WeaponType >((std::set< BWAPI::WeaponType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_WeaponTypeSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::WeaponType > *arg1 = (std::set< BWAPI::WeaponType > *) 0 ;
  std::set< BWAPI::WeaponType >::size_type result;
  
  arg1 = (std::set< BWAPI::WeaponType > *)jarg1; 
  result = ((std::set< BWAPI::WeaponType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponTypeSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::WeaponType > *arg1 = (std::set< BWAPI::WeaponType > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::WeaponType > *)jarg1; 
  result = (bool)((std::set< BWAPI::WeaponType > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WeaponTypeSet_Clear(void * jarg1) {
  std::set< BWAPI::WeaponType > *arg1 = (std::set< BWAPI::WeaponType > *) 0 ;
  
  arg1 = (std::set< BWAPI::WeaponType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::WeaponType > *arg1 = (std::set< BWAPI::WeaponType > *) 0 ;
  std::set< BWAPI::WeaponType >::key_type *arg2 = 0 ;
  std::set< BWAPI::WeaponType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::WeaponType > *)jarg1; 
  arg2 = (std::set< BWAPI::WeaponType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::WeaponType >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::WeaponType >::key_type *) &std_set_Sl_BWAPI_WeaponType_Sg__getitem(arg1,(BWAPI::WeaponType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponTypeSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::WeaponType > *arg1 = (std::set< BWAPI::WeaponType > *) 0 ;
  std::set< BWAPI::WeaponType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::WeaponType > *)jarg1; 
  arg2 = (std::set< BWAPI::WeaponType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::WeaponType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_WeaponType_Sg__ContainsKey(arg1,(BWAPI::WeaponType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_WeaponTypeSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::WeaponType > *arg1 = (std::set< BWAPI::WeaponType > *) 0 ;
  std::set< BWAPI::WeaponType >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::WeaponType > *)jarg1; 
  arg2 = (std::set< BWAPI::WeaponType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::WeaponType >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_WeaponType_Sg__Add(arg1,(BWAPI::WeaponType const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_WeaponTypeSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::WeaponType > *arg1 = (std::set< BWAPI::WeaponType > *) 0 ;
  std::set< BWAPI::WeaponType >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::WeaponType > *)jarg1; 
  arg2 = (std::set< BWAPI::WeaponType >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::WeaponType >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_WeaponType_Sg__Remove(arg1,(BWAPI::WeaponType const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::WeaponType > *arg1 = (std::set< BWAPI::WeaponType > *) 0 ;
  std::set< BWAPI::WeaponType >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::WeaponType > *)jarg1; 
  result = (std::set< BWAPI::WeaponType >::iterator *)std_set_Sl_BWAPI_WeaponType_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_WeaponTypeSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::WeaponType > *arg1 = (std::set< BWAPI::WeaponType > *) 0 ;
  std::set< BWAPI::WeaponType >::iterator *arg2 = (std::set< BWAPI::WeaponType >::iterator *) 0 ;
  std::set< BWAPI::WeaponType >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::WeaponType > *)jarg1; 
  arg2 = (std::set< BWAPI::WeaponType >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::WeaponType >::key_type *) &std_set_Sl_BWAPI_WeaponType_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_WeaponTypeSet(void * jarg1) {
  std::set< BWAPI::WeaponType > *arg1 = (std::set< BWAPI::WeaponType > *) 0 ;
  
  arg1 = (std::set< BWAPI::WeaponType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PositionPair__SWIG_0() {
  void * jresult ;
  std::pair< BWAPI::Position,BWAPI::Position > *result = 0 ;
  
  result = (std::pair< BWAPI::Position,BWAPI::Position > *)new std::pair< BWAPI::Position,BWAPI::Position >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PositionPair__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  BWAPI::Position arg1 ;
  BWAPI::Position arg2 ;
  BWAPI::Position *argp1 ;
  BWAPI::Position *argp2 ;
  std::pair< BWAPI::Position,BWAPI::Position > *result = 0 ;
  
  argp1 = (BWAPI::Position *)jarg1; 
  if (!argp1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg1 = *argp1; 
  argp2 = (BWAPI::Position *)jarg2; 
  if (!argp2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "Attempt to dereference null BWAPI::Position", 0);
    return 0;
  }
  arg2 = *argp2; 
  result = (std::pair< BWAPI::Position,BWAPI::Position > *)new std::pair< BWAPI::Position,BWAPI::Position >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PositionPair__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< BWAPI::Position,BWAPI::Position > *arg1 = 0 ;
  std::pair< BWAPI::Position,BWAPI::Position > *result = 0 ;
  
  arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< BWAPI::Position,BWAPI::Position > const & type is null", 0);
    return 0;
  } 
  result = (std::pair< BWAPI::Position,BWAPI::Position > *)new std::pair< BWAPI::Position,BWAPI::Position >((std::pair< BWAPI::Position,BWAPI::Position > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionPair_first_set(void * jarg1, void * jarg2) {
  std::pair< BWAPI::Position,BWAPI::Position > *arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *) 0 ;
  BWAPI::Position *arg2 = (BWAPI::Position *) 0 ;
  
  arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2; 
  if (arg1) (arg1)->first = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PositionPair_first_get(void * jarg1) {
  void * jresult ;
  std::pair< BWAPI::Position,BWAPI::Position > *arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *) 0 ;
  BWAPI::Position *result = 0 ;
  
  arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *)jarg1; 
  result = (BWAPI::Position *)& ((arg1)->first);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PositionPair_second_set(void * jarg1, void * jarg2) {
  std::pair< BWAPI::Position,BWAPI::Position > *arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *) 0 ;
  BWAPI::Position *arg2 = (BWAPI::Position *) 0 ;
  
  arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *)jarg1; 
  arg2 = (BWAPI::Position *)jarg2; 
  if (arg1) (arg1)->second = *arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PositionPair_second_get(void * jarg1) {
  void * jresult ;
  std::pair< BWAPI::Position,BWAPI::Position > *arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *) 0 ;
  BWAPI::Position *result = 0 ;
  
  arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *)jarg1; 
  result = (BWAPI::Position *)& ((arg1)->second);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PositionPair(void * jarg1) {
  std::pair< BWAPI::Position,BWAPI::Position > *arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *) 0 ;
  
  arg1 = (std::pair< BWAPI::Position,BWAPI::Position > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitTypePtrIntPair__SWIG_0() {
  void * jresult ;
  std::pair< BWAPI::UnitType const *,int > *result = 0 ;
  
  result = (std::pair< BWAPI::UnitType const *,int > *)new std::pair< BWAPI::UnitType const *,int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitTypePtrIntPair__SWIG_1(void * jarg1, int jarg2) {
  void * jresult ;
  BWAPI::UnitType *arg1 = (BWAPI::UnitType *) 0 ;
  int arg2 ;
  std::pair< BWAPI::UnitType const *,int > *result = 0 ;
  
  arg1 = (BWAPI::UnitType *)jarg1; 
  arg2 = (int)jarg2; 
  result = (std::pair< BWAPI::UnitType const *,int > *)new std::pair< BWAPI::UnitType const *,int >((BWAPI::UnitType const *)arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitTypePtrIntPair__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< BWAPI::UnitType const *,int > *arg1 = 0 ;
  std::pair< BWAPI::UnitType const *,int > *result = 0 ;
  
  arg1 = (std::pair< BWAPI::UnitType const *,int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< BWAPI::UnitType const *,int > const & type is null", 0);
    return 0;
  } 
  result = (std::pair< BWAPI::UnitType const *,int > *)new std::pair< BWAPI::UnitType const *,int >((std::pair< BWAPI::UnitType const *,int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitTypePtrIntPair_first_set(void * jarg1, void * jarg2) {
  std::pair< BWAPI::UnitType const *,int > *arg1 = (std::pair< BWAPI::UnitType const *,int > *) 0 ;
  BWAPI::UnitType *arg2 = (BWAPI::UnitType *) 0 ;
  
  arg1 = (std::pair< BWAPI::UnitType const *,int > *)jarg1; 
  arg2 = (BWAPI::UnitType *)jarg2; 
  if (arg1) (arg1)->first = (BWAPI::UnitType const *)arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypePtrIntPair_first_get(void * jarg1) {
  void * jresult ;
  std::pair< BWAPI::UnitType const *,int > *arg1 = (std::pair< BWAPI::UnitType const *,int > *) 0 ;
  BWAPI::UnitType *result = 0 ;
  
  arg1 = (std::pair< BWAPI::UnitType const *,int > *)jarg1; 
  result = (BWAPI::UnitType *) ((arg1)->first);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitTypePtrIntPair_second_set(void * jarg1, int jarg2) {
  std::pair< BWAPI::UnitType const *,int > *arg1 = (std::pair< BWAPI::UnitType const *,int > *) 0 ;
  int arg2 ;
  
  arg1 = (std::pair< BWAPI::UnitType const *,int > *)jarg1; 
  arg2 = (int)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitTypePtrIntPair_second_get(void * jarg1) {
  int jresult ;
  std::pair< BWAPI::UnitType const *,int > *arg1 = (std::pair< BWAPI::UnitType const *,int > *) 0 ;
  int result;
  
  arg1 = (std::pair< BWAPI::UnitType const *,int > *)jarg1; 
  result = (int) ((arg1)->second);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitTypePtrIntPair(void * jarg1) {
  std::pair< BWAPI::UnitType const *,int > *arg1 = (std::pair< BWAPI::UnitType const *,int > *) 0 ;
  
  arg1 = (std::pair< BWAPI::UnitType const *,int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TilePositionSet__SWIG_0() {
  void * jresult ;
  std::set< BWAPI::TilePosition > *result = 0 ;
  
  result = (std::set< BWAPI::TilePosition > *)new std::set< BWAPI::TilePosition >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_TilePositionSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::TilePosition > *arg1 = 0 ;
  std::set< BWAPI::TilePosition > *result = 0 ;
  
  arg1 = (std::set< BWAPI::TilePosition > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TilePosition > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWAPI::TilePosition > *)new std::set< BWAPI::TilePosition >((std::set< BWAPI::TilePosition > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_TilePositionSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWAPI::TilePosition > *arg1 = (std::set< BWAPI::TilePosition > *) 0 ;
  std::set< BWAPI::TilePosition >::size_type result;
  
  arg1 = (std::set< BWAPI::TilePosition > *)jarg1; 
  result = ((std::set< BWAPI::TilePosition > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TilePositionSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWAPI::TilePosition > *arg1 = (std::set< BWAPI::TilePosition > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::TilePosition > *)jarg1; 
  result = (bool)((std::set< BWAPI::TilePosition > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TilePositionSet_Clear(void * jarg1) {
  std::set< BWAPI::TilePosition > *arg1 = (std::set< BWAPI::TilePosition > *) 0 ;
  
  arg1 = (std::set< BWAPI::TilePosition > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePositionSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::TilePosition > *arg1 = (std::set< BWAPI::TilePosition > *) 0 ;
  std::set< BWAPI::TilePosition >::key_type *arg2 = 0 ;
  std::set< BWAPI::TilePosition >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::TilePosition > *)jarg1; 
  arg2 = (std::set< BWAPI::TilePosition >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TilePosition >::key_type const & type is null", 0);
    return 0;
  } 
  try {
    result = (std::set< BWAPI::TilePosition >::key_type *) &std_set_Sl_BWAPI_TilePosition_Sg__getitem(arg1,(BWAPI::TilePosition const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TilePositionSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::TilePosition > *arg1 = (std::set< BWAPI::TilePosition > *) 0 ;
  std::set< BWAPI::TilePosition >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::TilePosition > *)jarg1; 
  arg2 = (std::set< BWAPI::TilePosition >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TilePosition >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_TilePosition_Sg__ContainsKey(arg1,(BWAPI::TilePosition const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_TilePositionSet_Add(void * jarg1, void * jarg2) {
  std::set< BWAPI::TilePosition > *arg1 = (std::set< BWAPI::TilePosition > *) 0 ;
  std::set< BWAPI::TilePosition >::key_type *arg2 = 0 ;
  
  arg1 = (std::set< BWAPI::TilePosition > *)jarg1; 
  arg2 = (std::set< BWAPI::TilePosition >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TilePosition >::key_type const & type is null", 0);
    return ;
  } 
  try {
    std_set_Sl_BWAPI_TilePosition_Sg__Add(arg1,(BWAPI::TilePosition const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_TilePositionSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWAPI::TilePosition > *arg1 = (std::set< BWAPI::TilePosition > *) 0 ;
  std::set< BWAPI::TilePosition >::key_type *arg2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWAPI::TilePosition > *)jarg1; 
  arg2 = (std::set< BWAPI::TilePosition >::key_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWAPI::TilePosition >::key_type const & type is null", 0);
    return 0;
  } 
  result = (bool)std_set_Sl_BWAPI_TilePosition_Sg__Remove(arg1,(BWAPI::TilePosition const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePositionSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWAPI::TilePosition > *arg1 = (std::set< BWAPI::TilePosition > *) 0 ;
  std::set< BWAPI::TilePosition >::iterator *result = 0 ;
  
  arg1 = (std::set< BWAPI::TilePosition > *)jarg1; 
  result = (std::set< BWAPI::TilePosition >::iterator *)std_set_Sl_BWAPI_TilePosition_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_TilePositionSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWAPI::TilePosition > *arg1 = (std::set< BWAPI::TilePosition > *) 0 ;
  std::set< BWAPI::TilePosition >::iterator *arg2 = (std::set< BWAPI::TilePosition >::iterator *) 0 ;
  std::set< BWAPI::TilePosition >::key_type *result = 0 ;
  
  arg1 = (std::set< BWAPI::TilePosition > *)jarg1; 
  arg2 = (std::set< BWAPI::TilePosition >::iterator *)jarg2; 
  try {
    result = (std::set< BWAPI::TilePosition >::key_type *) &std_set_Sl_BWAPI_TilePosition_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_TilePositionSet(void * jarg1) {
  std::set< BWAPI::TilePosition > *arg1 = (std::set< BWAPI::TilePosition > *) 0 ;
  
  arg1 = (std::set< BWAPI::TilePosition > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitTypePtrIntMap__SWIG_0() {
  void * jresult ;
  std::map< BWAPI::UnitType const *,int > *result = 0 ;
  
  result = (std::map< BWAPI::UnitType const *,int > *)new std::map< BWAPI::UnitType const *,int >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitTypePtrIntMap__SWIG_1(void * jarg1) {
  void * jresult ;
  std::map< BWAPI::UnitType const *,int > *arg1 = 0 ;
  std::map< BWAPI::UnitType const *,int > *result = 0 ;
  
  arg1 = (std::map< BWAPI::UnitType const *,int > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::map< BWAPI::UnitType const *,int > const & type is null", 0);
    return 0;
  } 
  result = (std::map< BWAPI::UnitType const *,int > *)new std::map< BWAPI::UnitType const *,int >((std::map< BWAPI::UnitType const *,int > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_UnitTypePtrIntMap_size(void * jarg1) {
  unsigned long jresult ;
  std::map< BWAPI::UnitType const *,int > *arg1 = (std::map< BWAPI::UnitType const *,int > *) 0 ;
  std::map< BWAPI::UnitType const *,int >::size_type result;
  
  arg1 = (std::map< BWAPI::UnitType const *,int > *)jarg1; 
  result = ((std::map< BWAPI::UnitType const *,int > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitTypePtrIntMap_empty(void * jarg1) {
  unsigned int jresult ;
  std::map< BWAPI::UnitType const *,int > *arg1 = (std::map< BWAPI::UnitType const *,int > *) 0 ;
  bool result;
  
  arg1 = (std::map< BWAPI::UnitType const *,int > *)jarg1; 
  result = (bool)((std::map< BWAPI::UnitType const *,int > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitTypePtrIntMap_Clear(void * jarg1) {
  std::map< BWAPI::UnitType const *,int > *arg1 = (std::map< BWAPI::UnitType const *,int > *) 0 ;
  
  arg1 = (std::map< BWAPI::UnitType const *,int > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT int SWIGSTDCALL CSharp_UnitTypePtrIntMap_getitem(void * jarg1, void * jarg2) {
  int jresult ;
  std::map< BWAPI::UnitType const *,int > *arg1 = (std::map< BWAPI::UnitType const *,int > *) 0 ;
  std::map< BWAPI::UnitType const *,int >::key_type *arg2 = 0 ;
  std::map< BWAPI::UnitType const *,int >::key_type temp2 = 0 ;
  std::map< BWAPI::UnitType const *,int >::mapped_type *result = 0 ;
  
  arg1 = (std::map< BWAPI::UnitType const *,int > *)jarg1; 
  temp2 = (std::map< BWAPI::UnitType const *,int >::key_type)jarg2;
  arg2 = &temp2; 
  try {
    result = (std::map< BWAPI::UnitType const *,int >::mapped_type *) &std_map_Sl_BWAPI_UnitType_SS_const_Sm__Sc_int_Sg__getitem(arg1,(BWAPI::UnitType const *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = *result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitTypePtrIntMap_setitem(void * jarg1, void * jarg2, int jarg3) {
  std::map< BWAPI::UnitType const *,int > *arg1 = (std::map< BWAPI::UnitType const *,int > *) 0 ;
  std::map< BWAPI::UnitType const *,int >::key_type *arg2 = 0 ;
  std::map< BWAPI::UnitType const *,int >::mapped_type *arg3 = 0 ;
  std::map< BWAPI::UnitType const *,int >::key_type temp2 = 0 ;
  std::map< BWAPI::UnitType const *,int >::mapped_type temp3 ;
  
  arg1 = (std::map< BWAPI::UnitType const *,int > *)jarg1; 
  temp2 = (std::map< BWAPI::UnitType const *,int >::key_type)jarg2;
  arg2 = &temp2; 
  temp3 = (std::map< BWAPI::UnitType const *,int >::mapped_type)jarg3; 
  arg3 = &temp3; 
  std_map_Sl_BWAPI_UnitType_SS_const_Sm__Sc_int_Sg__setitem(arg1,(BWAPI::UnitType const *const &)*arg2,(int const &)*arg3);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitTypePtrIntMap_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::map< BWAPI::UnitType const *,int > *arg1 = (std::map< BWAPI::UnitType const *,int > *) 0 ;
  std::map< BWAPI::UnitType const *,int >::key_type *arg2 = 0 ;
  std::map< BWAPI::UnitType const *,int >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::map< BWAPI::UnitType const *,int > *)jarg1; 
  temp2 = (std::map< BWAPI::UnitType const *,int >::key_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_map_Sl_BWAPI_UnitType_SS_const_Sm__Sc_int_Sg__ContainsKey(arg1,(BWAPI::UnitType const *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitTypePtrIntMap_Add(void * jarg1, void * jarg2, int jarg3) {
  std::map< BWAPI::UnitType const *,int > *arg1 = (std::map< BWAPI::UnitType const *,int > *) 0 ;
  std::map< BWAPI::UnitType const *,int >::key_type *arg2 = 0 ;
  std::map< BWAPI::UnitType const *,int >::mapped_type *arg3 = 0 ;
  std::map< BWAPI::UnitType const *,int >::key_type temp2 = 0 ;
  std::map< BWAPI::UnitType const *,int >::mapped_type temp3 ;
  
  arg1 = (std::map< BWAPI::UnitType const *,int > *)jarg1; 
  temp2 = (std::map< BWAPI::UnitType const *,int >::key_type)jarg2;
  arg2 = &temp2; 
  temp3 = (std::map< BWAPI::UnitType const *,int >::mapped_type)jarg3; 
  arg3 = &temp3; 
  try {
    std_map_Sl_BWAPI_UnitType_SS_const_Sm__Sc_int_Sg__Add(arg1,(BWAPI::UnitType const *const &)*arg2,(int const &)*arg3);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitTypePtrIntMap_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::map< BWAPI::UnitType const *,int > *arg1 = (std::map< BWAPI::UnitType const *,int > *) 0 ;
  std::map< BWAPI::UnitType const *,int >::key_type *arg2 = 0 ;
  std::map< BWAPI::UnitType const *,int >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::map< BWAPI::UnitType const *,int > *)jarg1; 
  temp2 = (std::map< BWAPI::UnitType const *,int >::key_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_map_Sl_BWAPI_UnitType_SS_const_Sm__Sc_int_Sg__Remove(arg1,(BWAPI::UnitType const *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypePtrIntMap_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::map< BWAPI::UnitType const *,int > *arg1 = (std::map< BWAPI::UnitType const *,int > *) 0 ;
  std::map< BWAPI::UnitType const *,int >::iterator *result = 0 ;
  
  arg1 = (std::map< BWAPI::UnitType const *,int > *)jarg1; 
  result = (std::map< BWAPI::UnitType const *,int >::iterator *)std_map_Sl_BWAPI_UnitType_SS_const_Sm__Sc_int_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypePtrIntMap_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::map< BWAPI::UnitType const *,int > *arg1 = (std::map< BWAPI::UnitType const *,int > *) 0 ;
  std::map< BWAPI::UnitType const *,int >::iterator *arg2 = (std::map< BWAPI::UnitType const *,int >::iterator *) 0 ;
  std::map< BWAPI::UnitType const *,int >::key_type *result = 0 ;
  
  arg1 = (std::map< BWAPI::UnitType const *,int > *)jarg1; 
  arg2 = (std::map< BWAPI::UnitType const *,int >::iterator *)jarg2; 
  try {
    result = (std::map< BWAPI::UnitType const *,int >::key_type *) &std_map_Sl_BWAPI_UnitType_SS_const_Sm__Sc_int_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitTypePtrIntMap(void * jarg1) {
  std::map< BWAPI::UnitType const *,int > *arg1 = (std::map< BWAPI::UnitType const *,int > *) 0 ;
  
  arg1 = (std::map< BWAPI::UnitType const *,int > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitPtrList_Clear(void * jarg1) {
  std::list< BWAPI::Unit * > *arg1 = (std::list< BWAPI::Unit * > *) 0 ;
  
  arg1 = (std::list< BWAPI::Unit * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitPtrList_Add(void * jarg1, void * jarg2) {
  std::list< BWAPI::Unit * > *arg1 = (std::list< BWAPI::Unit * > *) 0 ;
  std::list< BWAPI::Unit * >::value_type *arg2 = 0 ;
  std::list< BWAPI::Unit * >::value_type temp2 = 0 ;
  
  arg1 = (std::list< BWAPI::Unit * > *)jarg1; 
  temp2 = (std::list< BWAPI::Unit * >::value_type)jarg2;
  arg2 = &temp2; 
  (arg1)->push_back((std::list< BWAPI::Unit * >::value_type const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_UnitPtrList_size(void * jarg1) {
  unsigned long jresult ;
  std::list< BWAPI::Unit * > *arg1 = (std::list< BWAPI::Unit * > *) 0 ;
  std::list< BWAPI::Unit * >::size_type result;
  
  arg1 = (std::list< BWAPI::Unit * > *)jarg1; 
  result = ((std::list< BWAPI::Unit * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitPtrList__SWIG_0() {
  void * jresult ;
  std::list< BWAPI::Unit * > *result = 0 ;
  
  result = (std::list< BWAPI::Unit * > *)new std::list< BWAPI::Unit * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitPtrList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::list< BWAPI::Unit * > *arg1 = 0 ;
  std::list< BWAPI::Unit * > *result = 0 ;
  
  arg1 = (std::list< BWAPI::Unit * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< BWAPI::Unit * > const & type is null", 0);
    return 0;
  } 
  result = (std::list< BWAPI::Unit * > *)new std::list< BWAPI::Unit * >((std::list< BWAPI::Unit * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitPtrList_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::list< BWAPI::Unit * > *arg1 = (std::list< BWAPI::Unit * > *) 0 ;
  std::list< BWAPI::Unit * >::iterator *result = 0 ;
  
  arg1 = (std::list< BWAPI::Unit * > *)jarg1; 
  result = (std::list< BWAPI::Unit * >::iterator *)std_list_Sl_BWAPI_Unit_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitPtrList_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< BWAPI::Unit * > *arg1 = (std::list< BWAPI::Unit * > *) 0 ;
  std::list< BWAPI::Unit * >::iterator *arg2 = (std::list< BWAPI::Unit * >::iterator *) 0 ;
  std::list< BWAPI::Unit * >::value_type *result = 0 ;
  
  arg1 = (std::list< BWAPI::Unit * > *)jarg1; 
  arg2 = (std::list< BWAPI::Unit * >::iterator *)jarg2; 
  try {
    result = (std::list< BWAPI::Unit * >::value_type *) &std_list_Sl_BWAPI_Unit_Sm__Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitPtrList_Contains(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::list< BWAPI::Unit * > *arg1 = (std::list< BWAPI::Unit * > *) 0 ;
  std::list< BWAPI::Unit * >::value_type *arg2 = 0 ;
  std::list< BWAPI::Unit * >::value_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::list< BWAPI::Unit * > *)jarg1; 
  temp2 = (std::list< BWAPI::Unit * >::value_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_list_Sl_BWAPI_Unit_Sm__Sg__Contains(arg1,(BWAPI::Unit *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_UnitPtrList_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::list< BWAPI::Unit * > *arg1 = (std::list< BWAPI::Unit * > *) 0 ;
  std::list< BWAPI::Unit * >::value_type *arg2 = 0 ;
  std::list< BWAPI::Unit * >::value_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::list< BWAPI::Unit * > *)jarg1; 
  temp2 = (std::list< BWAPI::Unit * >::value_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_list_Sl_BWAPI_Unit_Sm__Sg__Remove(arg1,(BWAPI::Unit *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitPtrList(void * jarg1) {
  std::list< BWAPI::Unit * > *arg1 = (std::list< BWAPI::Unit * > *) 0 ;
  
  arg1 = (std::list< BWAPI::Unit * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitTypeList_Clear(void * jarg1) {
  std::list< BWAPI::UnitType > *arg1 = (std::list< BWAPI::UnitType > *) 0 ;
  
  arg1 = (std::list< BWAPI::UnitType > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void SWIGSTDCALL CSharp_UnitTypeList_Add(void * jarg1, void * jarg2) {
  std::list< BWAPI::UnitType > *arg1 = (std::list< BWAPI::UnitType > *) 0 ;
  std::list< BWAPI::UnitType >::value_type *arg2 = 0 ;
  
  arg1 = (std::list< BWAPI::UnitType > *)jarg1; 
  arg2 = (std::list< BWAPI::UnitType >::value_type *)jarg2;
  if (!arg2) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< BWAPI::UnitType >::value_type const & type is null", 0);
    return ;
  } 
  (arg1)->push_back((std::list< BWAPI::UnitType >::value_type const &)*arg2);
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_UnitTypeList_size(void * jarg1) {
  unsigned long jresult ;
  std::list< BWAPI::UnitType > *arg1 = (std::list< BWAPI::UnitType > *) 0 ;
  std::list< BWAPI::UnitType >::size_type result;
  
  arg1 = (std::list< BWAPI::UnitType > *)jarg1; 
  result = ((std::list< BWAPI::UnitType > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitTypeList__SWIG_0() {
  void * jresult ;
  std::list< BWAPI::UnitType > *result = 0 ;
  
  result = (std::list< BWAPI::UnitType > *)new std::list< BWAPI::UnitType >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_UnitTypeList__SWIG_1(void * jarg1) {
  void * jresult ;
  std::list< BWAPI::UnitType > *arg1 = 0 ;
  std::list< BWAPI::UnitType > *result = 0 ;
  
  arg1 = (std::list< BWAPI::UnitType > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::list< BWAPI::UnitType > const & type is null", 0);
    return 0;
  } 
  result = (std::list< BWAPI::UnitType > *)new std::list< BWAPI::UnitType >((std::list< BWAPI::UnitType > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypeList_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::list< BWAPI::UnitType > *arg1 = (std::list< BWAPI::UnitType > *) 0 ;
  std::list< BWAPI::UnitType >::iterator *result = 0 ;
  
  arg1 = (std::list< BWAPI::UnitType > *)jarg1; 
  result = (std::list< BWAPI::UnitType >::iterator *)std_list_Sl_BWAPI_UnitType_Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_UnitTypeList_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::list< BWAPI::UnitType > *arg1 = (std::list< BWAPI::UnitType > *) 0 ;
  std::list< BWAPI::UnitType >::iterator *arg2 = (std::list< BWAPI::UnitType >::iterator *) 0 ;
  std::list< BWAPI::UnitType >::value_type *result = 0 ;
  
  arg1 = (std::list< BWAPI::UnitType > *)jarg1; 
  arg2 = (std::list< BWAPI::UnitType >::iterator *)jarg2; 
  try {
    result = (std::list< BWAPI::UnitType >::value_type *) &std_list_Sl_BWAPI_UnitType_Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_UnitTypeList(void * jarg1) {
  std::list< BWAPI::UnitType > *arg1 = (std::list< BWAPI::UnitType > *) 0 ;
  
  arg1 = (std::list< BWAPI::UnitType > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RegionPtrRegionPtrPair__SWIG_0() {
  void * jresult ;
  std::pair< BWTA::Region *,BWTA::Region * > *result = 0 ;
  
  result = (std::pair< BWTA::Region *,BWTA::Region * > *)new std::pair< BWTA::Region *,BWTA::Region * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RegionPtrRegionPtrPair__SWIG_1(void * jarg1, void * jarg2) {
  void * jresult ;
  BWTA::Region *arg1 = (BWTA::Region *) 0 ;
  BWTA::Region *arg2 = (BWTA::Region *) 0 ;
  std::pair< BWTA::Region *,BWTA::Region * > *result = 0 ;
  
  arg1 = (BWTA::Region *)jarg1; 
  arg2 = (BWTA::Region *)jarg2; 
  result = (std::pair< BWTA::Region *,BWTA::Region * > *)new std::pair< BWTA::Region *,BWTA::Region * >(arg1,arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RegionPtrRegionPtrPair__SWIG_2(void * jarg1) {
  void * jresult ;
  std::pair< BWTA::Region *,BWTA::Region * > *arg1 = 0 ;
  std::pair< BWTA::Region *,BWTA::Region * > *result = 0 ;
  
  arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::pair< BWTA::Region *,BWTA::Region * > const & type is null", 0);
    return 0;
  } 
  result = (std::pair< BWTA::Region *,BWTA::Region * > *)new std::pair< BWTA::Region *,BWTA::Region * >((std::pair< BWTA::Region *,BWTA::Region * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RegionPtrRegionPtrPair_first_set(void * jarg1, void * jarg2) {
  std::pair< BWTA::Region *,BWTA::Region * > *arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *) 0 ;
  BWTA::Region *arg2 = (BWTA::Region *) 0 ;
  
  arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *)jarg1; 
  arg2 = (BWTA::Region *)jarg2; 
  if (arg1) (arg1)->first = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RegionPtrRegionPtrPair_first_get(void * jarg1) {
  void * jresult ;
  std::pair< BWTA::Region *,BWTA::Region * > *arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *) 0 ;
  BWTA::Region *result = 0 ;
  
  arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *)jarg1; 
  result = (BWTA::Region *) ((arg1)->first);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RegionPtrRegionPtrPair_second_set(void * jarg1, void * jarg2) {
  std::pair< BWTA::Region *,BWTA::Region * > *arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *) 0 ;
  BWTA::Region *arg2 = (BWTA::Region *) 0 ;
  
  arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *)jarg1; 
  arg2 = (BWTA::Region *)jarg2; 
  if (arg1) (arg1)->second = arg2;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RegionPtrRegionPtrPair_second_get(void * jarg1) {
  void * jresult ;
  std::pair< BWTA::Region *,BWTA::Region * > *arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *) 0 ;
  BWTA::Region *result = 0 ;
  
  arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *)jarg1; 
  result = (BWTA::Region *) ((arg1)->second);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RegionPtrRegionPtrPair(void * jarg1) {
  std::pair< BWTA::Region *,BWTA::Region * > *arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *) 0 ;
  
  arg1 = (std::pair< BWTA::Region *,BWTA::Region * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BaseLocationPtrSet__SWIG_0() {
  void * jresult ;
  std::set< BWTA::BaseLocation * > *result = 0 ;
  
  result = (std::set< BWTA::BaseLocation * > *)new std::set< BWTA::BaseLocation * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_BaseLocationPtrSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWTA::BaseLocation * > *arg1 = 0 ;
  std::set< BWTA::BaseLocation * > *result = 0 ;
  
  arg1 = (std::set< BWTA::BaseLocation * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWTA::BaseLocation * > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWTA::BaseLocation * > *)new std::set< BWTA::BaseLocation * >((std::set< BWTA::BaseLocation * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_BaseLocationPtrSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  std::set< BWTA::BaseLocation * >::size_type result;
  
  arg1 = (std::set< BWTA::BaseLocation * > *)jarg1; 
  result = ((std::set< BWTA::BaseLocation * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseLocationPtrSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::BaseLocation * > *)jarg1; 
  result = (bool)((std::set< BWTA::BaseLocation * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseLocationPtrSet_Clear(void * jarg1) {
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  
  arg1 = (std::set< BWTA::BaseLocation * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLocationPtrSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  std::set< BWTA::BaseLocation * >::key_type *arg2 = 0 ;
  std::set< BWTA::BaseLocation * >::key_type temp2 = 0 ;
  std::set< BWTA::BaseLocation * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWTA::BaseLocation * > *)jarg1; 
  temp2 = (std::set< BWTA::BaseLocation * >::key_type)jarg2;
  arg2 = &temp2; 
  try {
    result = (std::set< BWTA::BaseLocation * >::key_type *) &std_set_Sl_BWTA_BaseLocation_Sm__Sg__getitem(arg1,(BWTA::BaseLocation *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseLocationPtrSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  std::set< BWTA::BaseLocation * >::key_type *arg2 = 0 ;
  std::set< BWTA::BaseLocation * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::BaseLocation * > *)jarg1; 
  temp2 = (std::set< BWTA::BaseLocation * >::key_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_set_Sl_BWTA_BaseLocation_Sm__Sg__ContainsKey(arg1,(BWTA::BaseLocation *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_BaseLocationPtrSet_Add(void * jarg1, void * jarg2) {
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  std::set< BWTA::BaseLocation * >::key_type *arg2 = 0 ;
  std::set< BWTA::BaseLocation * >::key_type temp2 = 0 ;
  
  arg1 = (std::set< BWTA::BaseLocation * > *)jarg1; 
  temp2 = (std::set< BWTA::BaseLocation * >::key_type)jarg2;
  arg2 = &temp2; 
  try {
    std_set_Sl_BWTA_BaseLocation_Sm__Sg__Add(arg1,(BWTA::BaseLocation *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_BaseLocationPtrSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  std::set< BWTA::BaseLocation * >::key_type *arg2 = 0 ;
  std::set< BWTA::BaseLocation * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::BaseLocation * > *)jarg1; 
  temp2 = (std::set< BWTA::BaseLocation * >::key_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_set_Sl_BWTA_BaseLocation_Sm__Sg__Remove(arg1,(BWTA::BaseLocation *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLocationPtrSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  std::set< BWTA::BaseLocation * >::iterator *result = 0 ;
  
  arg1 = (std::set< BWTA::BaseLocation * > *)jarg1; 
  result = (std::set< BWTA::BaseLocation * >::iterator *)std_set_Sl_BWTA_BaseLocation_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_BaseLocationPtrSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  std::set< BWTA::BaseLocation * >::iterator *arg2 = (std::set< BWTA::BaseLocation * >::iterator *) 0 ;
  std::set< BWTA::BaseLocation * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWTA::BaseLocation * > *)jarg1; 
  arg2 = (std::set< BWTA::BaseLocation * >::iterator *)jarg2; 
  try {
    result = (std::set< BWTA::BaseLocation * >::key_type *) &std_set_Sl_BWTA_BaseLocation_Sm__Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_BaseLocationPtrSet(void * jarg1) {
  std::set< BWTA::BaseLocation * > *arg1 = (std::set< BWTA::BaseLocation * > *) 0 ;
  
  arg1 = (std::set< BWTA::BaseLocation * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChokepointPtrSet__SWIG_0() {
  void * jresult ;
  std::set< BWTA::Chokepoint * > *result = 0 ;
  
  result = (std::set< BWTA::Chokepoint * > *)new std::set< BWTA::Chokepoint * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ChokepointPtrSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWTA::Chokepoint * > *arg1 = 0 ;
  std::set< BWTA::Chokepoint * > *result = 0 ;
  
  arg1 = (std::set< BWTA::Chokepoint * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWTA::Chokepoint * > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWTA::Chokepoint * > *)new std::set< BWTA::Chokepoint * >((std::set< BWTA::Chokepoint * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_ChokepointPtrSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  std::set< BWTA::Chokepoint * >::size_type result;
  
  arg1 = (std::set< BWTA::Chokepoint * > *)jarg1; 
  result = ((std::set< BWTA::Chokepoint * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChokepointPtrSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::Chokepoint * > *)jarg1; 
  result = (bool)((std::set< BWTA::Chokepoint * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChokepointPtrSet_Clear(void * jarg1) {
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  
  arg1 = (std::set< BWTA::Chokepoint * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChokepointPtrSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  std::set< BWTA::Chokepoint * >::key_type *arg2 = 0 ;
  std::set< BWTA::Chokepoint * >::key_type temp2 = 0 ;
  std::set< BWTA::Chokepoint * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWTA::Chokepoint * > *)jarg1; 
  temp2 = (std::set< BWTA::Chokepoint * >::key_type)jarg2;
  arg2 = &temp2; 
  try {
    result = (std::set< BWTA::Chokepoint * >::key_type *) &std_set_Sl_BWTA_Chokepoint_Sm__Sg__getitem(arg1,(BWTA::Chokepoint *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChokepointPtrSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  std::set< BWTA::Chokepoint * >::key_type *arg2 = 0 ;
  std::set< BWTA::Chokepoint * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::Chokepoint * > *)jarg1; 
  temp2 = (std::set< BWTA::Chokepoint * >::key_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_set_Sl_BWTA_Chokepoint_Sm__Sg__ContainsKey(arg1,(BWTA::Chokepoint *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ChokepointPtrSet_Add(void * jarg1, void * jarg2) {
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  std::set< BWTA::Chokepoint * >::key_type *arg2 = 0 ;
  std::set< BWTA::Chokepoint * >::key_type temp2 = 0 ;
  
  arg1 = (std::set< BWTA::Chokepoint * > *)jarg1; 
  temp2 = (std::set< BWTA::Chokepoint * >::key_type)jarg2;
  arg2 = &temp2; 
  try {
    std_set_Sl_BWTA_Chokepoint_Sm__Sg__Add(arg1,(BWTA::Chokepoint *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ChokepointPtrSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  std::set< BWTA::Chokepoint * >::key_type *arg2 = 0 ;
  std::set< BWTA::Chokepoint * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::Chokepoint * > *)jarg1; 
  temp2 = (std::set< BWTA::Chokepoint * >::key_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_set_Sl_BWTA_Chokepoint_Sm__Sg__Remove(arg1,(BWTA::Chokepoint *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChokepointPtrSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  std::set< BWTA::Chokepoint * >::iterator *result = 0 ;
  
  arg1 = (std::set< BWTA::Chokepoint * > *)jarg1; 
  result = (std::set< BWTA::Chokepoint * >::iterator *)std_set_Sl_BWTA_Chokepoint_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_ChokepointPtrSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  std::set< BWTA::Chokepoint * >::iterator *arg2 = (std::set< BWTA::Chokepoint * >::iterator *) 0 ;
  std::set< BWTA::Chokepoint * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWTA::Chokepoint * > *)jarg1; 
  arg2 = (std::set< BWTA::Chokepoint * >::iterator *)jarg2; 
  try {
    result = (std::set< BWTA::Chokepoint * >::key_type *) &std_set_Sl_BWTA_Chokepoint_Sm__Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ChokepointPtrSet(void * jarg1) {
  std::set< BWTA::Chokepoint * > *arg1 = (std::set< BWTA::Chokepoint * > *) 0 ;
  
  arg1 = (std::set< BWTA::Chokepoint * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolygonPtrSet__SWIG_0() {
  void * jresult ;
  std::set< BWTA::Polygon * > *result = 0 ;
  
  result = (std::set< BWTA::Polygon * > *)new std::set< BWTA::Polygon * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PolygonPtrSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWTA::Polygon * > *arg1 = 0 ;
  std::set< BWTA::Polygon * > *result = 0 ;
  
  arg1 = (std::set< BWTA::Polygon * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWTA::Polygon * > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWTA::Polygon * > *)new std::set< BWTA::Polygon * >((std::set< BWTA::Polygon * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_PolygonPtrSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  std::set< BWTA::Polygon * >::size_type result;
  
  arg1 = (std::set< BWTA::Polygon * > *)jarg1; 
  result = ((std::set< BWTA::Polygon * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolygonPtrSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::Polygon * > *)jarg1; 
  result = (bool)((std::set< BWTA::Polygon * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonPtrSet_Clear(void * jarg1) {
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  
  arg1 = (std::set< BWTA::Polygon * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonPtrSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  std::set< BWTA::Polygon * >::key_type *arg2 = 0 ;
  std::set< BWTA::Polygon * >::key_type temp2 = 0 ;
  std::set< BWTA::Polygon * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWTA::Polygon * > *)jarg1; 
  temp2 = (std::set< BWTA::Polygon * >::key_type)jarg2;
  arg2 = &temp2; 
  try {
    result = (std::set< BWTA::Polygon * >::key_type *) &std_set_Sl_BWTA_Polygon_Sm__Sg__getitem(arg1,(BWTA::Polygon *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolygonPtrSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  std::set< BWTA::Polygon * >::key_type *arg2 = 0 ;
  std::set< BWTA::Polygon * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::Polygon * > *)jarg1; 
  temp2 = (std::set< BWTA::Polygon * >::key_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_set_Sl_BWTA_Polygon_Sm__Sg__ContainsKey(arg1,(BWTA::Polygon *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_PolygonPtrSet_Add(void * jarg1, void * jarg2) {
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  std::set< BWTA::Polygon * >::key_type *arg2 = 0 ;
  std::set< BWTA::Polygon * >::key_type temp2 = 0 ;
  
  arg1 = (std::set< BWTA::Polygon * > *)jarg1; 
  temp2 = (std::set< BWTA::Polygon * >::key_type)jarg2;
  arg2 = &temp2; 
  try {
    std_set_Sl_BWTA_Polygon_Sm__Sg__Add(arg1,(BWTA::Polygon *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PolygonPtrSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  std::set< BWTA::Polygon * >::key_type *arg2 = 0 ;
  std::set< BWTA::Polygon * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::Polygon * > *)jarg1; 
  temp2 = (std::set< BWTA::Polygon * >::key_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_set_Sl_BWTA_Polygon_Sm__Sg__Remove(arg1,(BWTA::Polygon *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonPtrSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  std::set< BWTA::Polygon * >::iterator *result = 0 ;
  
  arg1 = (std::set< BWTA::Polygon * > *)jarg1; 
  result = (std::set< BWTA::Polygon * >::iterator *)std_set_Sl_BWTA_Polygon_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PolygonPtrSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  std::set< BWTA::Polygon * >::iterator *arg2 = (std::set< BWTA::Polygon * >::iterator *) 0 ;
  std::set< BWTA::Polygon * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWTA::Polygon * > *)jarg1; 
  arg2 = (std::set< BWTA::Polygon * >::iterator *)jarg2; 
  try {
    result = (std::set< BWTA::Polygon * >::key_type *) &std_set_Sl_BWTA_Polygon_Sm__Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PolygonPtrSet(void * jarg1) {
  std::set< BWTA::Polygon * > *arg1 = (std::set< BWTA::Polygon * > *) 0 ;
  
  arg1 = (std::set< BWTA::Polygon * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RegionPtrSet__SWIG_0() {
  void * jresult ;
  std::set< BWTA::Region * > *result = 0 ;
  
  result = (std::set< BWTA::Region * > *)new std::set< BWTA::Region * >();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RegionPtrSet__SWIG_1(void * jarg1) {
  void * jresult ;
  std::set< BWTA::Region * > *arg1 = 0 ;
  std::set< BWTA::Region * > *result = 0 ;
  
  arg1 = (std::set< BWTA::Region * > *)jarg1;
  if (!arg1) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentNullException, "std::set< BWTA::Region * > const & type is null", 0);
    return 0;
  } 
  result = (std::set< BWTA::Region * > *)new std::set< BWTA::Region * >((std::set< BWTA::Region * > const &)*arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT unsigned long SWIGSTDCALL CSharp_RegionPtrSet_size(void * jarg1) {
  unsigned long jresult ;
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  std::set< BWTA::Region * >::size_type result;
  
  arg1 = (std::set< BWTA::Region * > *)jarg1; 
  result = ((std::set< BWTA::Region * > const *)arg1)->size();
  jresult = (unsigned long)result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RegionPtrSet_empty(void * jarg1) {
  unsigned int jresult ;
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::Region * > *)jarg1; 
  result = (bool)((std::set< BWTA::Region * > const *)arg1)->empty();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RegionPtrSet_Clear(void * jarg1) {
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  
  arg1 = (std::set< BWTA::Region * > *)jarg1; 
  (arg1)->clear();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RegionPtrSet_getitem(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  std::set< BWTA::Region * >::key_type *arg2 = 0 ;
  std::set< BWTA::Region * >::key_type temp2 = 0 ;
  std::set< BWTA::Region * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWTA::Region * > *)jarg1; 
  temp2 = (std::set< BWTA::Region * >::key_type)jarg2;
  arg2 = &temp2; 
  try {
    result = (std::set< BWTA::Region * >::key_type *) &std_set_Sl_BWTA_Region_Sm__Sg__getitem(arg1,(BWTA::Region *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RegionPtrSet_ContainsKey(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  std::set< BWTA::Region * >::key_type *arg2 = 0 ;
  std::set< BWTA::Region * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::Region * > *)jarg1; 
  temp2 = (std::set< BWTA::Region * >::key_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_set_Sl_BWTA_Region_Sm__Sg__ContainsKey(arg1,(BWTA::Region *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_RegionPtrSet_Add(void * jarg1, void * jarg2) {
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  std::set< BWTA::Region * >::key_type *arg2 = 0 ;
  std::set< BWTA::Region * >::key_type temp2 = 0 ;
  
  arg1 = (std::set< BWTA::Region * > *)jarg1; 
  temp2 = (std::set< BWTA::Region * >::key_type)jarg2;
  arg2 = &temp2; 
  try {
    std_set_Sl_BWTA_Region_Sm__Sg__Add(arg1,(BWTA::Region *const &)*arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return ;
  }
  
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RegionPtrSet_Remove(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  std::set< BWTA::Region * >::key_type *arg2 = 0 ;
  std::set< BWTA::Region * >::key_type temp2 = 0 ;
  bool result;
  
  arg1 = (std::set< BWTA::Region * > *)jarg1; 
  temp2 = (std::set< BWTA::Region * >::key_type)jarg2;
  arg2 = &temp2; 
  result = (bool)std_set_Sl_BWTA_Region_Sm__Sg__Remove(arg1,(BWTA::Region *const &)*arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RegionPtrSet_create_iterator_begin(void * jarg1) {
  void * jresult ;
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  std::set< BWTA::Region * >::iterator *result = 0 ;
  
  arg1 = (std::set< BWTA::Region * > *)jarg1; 
  result = (std::set< BWTA::Region * >::iterator *)std_set_Sl_BWTA_Region_Sm__Sg__create_iterator_begin(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RegionPtrSet_get_next_key(void * jarg1, void * jarg2) {
  void * jresult ;
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  std::set< BWTA::Region * >::iterator *arg2 = (std::set< BWTA::Region * >::iterator *) 0 ;
  std::set< BWTA::Region * >::key_type *result = 0 ;
  
  arg1 = (std::set< BWTA::Region * > *)jarg1; 
  arg2 = (std::set< BWTA::Region * >::iterator *)jarg2; 
  try {
    result = (std::set< BWTA::Region * >::key_type *) &std_set_Sl_BWTA_Region_Sm__Sg__get_next_key(arg1,arg2);
  }
  catch(std::out_of_range &_e) {
    SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, 0, (&_e)->what());
    return 0;
  }
  
  jresult = (void *)*result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RegionPtrSet(void * jarg1) {
  std::set< BWTA::Region * > *arg1 = (std::set< BWTA::Region * > *) 0 ;
  
  arg1 = (std::set< BWTA::Region * > *)jarg1; 
  delete arg1;
}


SWIGEXPORT std::vector< BWAPI::Position > * SWIGSTDCALL CSharp_PolygonUpcast(BWTA::Polygon *objectRef) {
    return (std::vector< BWAPI::Position > *)objectRef;
}

#ifdef __cplusplus
}
#endif

