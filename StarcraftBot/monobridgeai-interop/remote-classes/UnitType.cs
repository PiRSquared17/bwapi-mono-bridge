/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BWAPI {

using System;
using System.Runtime.InteropServices;

public partial class UnitType : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal UnitType(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(UnitType obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~UnitType() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          bridgePINVOKEProxy.delete_UnitType(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  
public override int GetHashCode()
{
   return this.swigCPtr.Handle.GetHashCode();
}

public override bool Equals(object obj)
{
    bool equal = false;
    if (obj is UnitType)
      equal = (((UnitType)obj).swigCPtr.Handle == this.swigCPtr.Handle);
    return equal;
}
  
public bool Equals(UnitType obj) 
{
    if (obj == null) return false;
    return (obj.swigCPtr.Handle == this.swigCPtr.Handle);
}

public static bool operator ==(UnitType obj1, UnitType obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return true;
    if (object.ReferenceEquals(obj1, null)) return false;
    if (object.ReferenceEquals(obj2, null)) return false;
   
    return obj1.Equals(obj2);
}

public static bool operator !=(UnitType obj1, UnitType obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return false;
    if (object.ReferenceEquals(obj1, null)) return true;
    if (object.ReferenceEquals(obj2, null)) return true;

    return !obj1.Equals(obj2);
}




  public UnitType() : this(bridgePINVOKEProxy.new_UnitType__SWIG_0(), true) {
  }

  public UnitType(int id) : this(bridgePINVOKEProxy.new_UnitType__SWIG_1(id), true) {
  }

  public UnitType(UnitType other) : this(bridgePINVOKEProxy.new_UnitType__SWIG_2(UnitType.getCPtr(other)), true) {
    if (bridgePINVOKEProxy.SWIGPendingException.Pending) throw bridgePINVOKEProxy.SWIGPendingException.Retrieve();
  }

  public UnitType opAssign(UnitType other) {
    UnitType ret = new UnitType(bridgePINVOKEProxy.UnitType_opAssign(swigCPtr, UnitType.getCPtr(other)), false);
    if (bridgePINVOKEProxy.SWIGPendingException.Pending) throw bridgePINVOKEProxy.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool opEquals(UnitType other) {
    bool ret = bridgePINVOKEProxy.UnitType_opEquals(swigCPtr, UnitType.getCPtr(other));
    if (bridgePINVOKEProxy.SWIGPendingException.Pending) throw bridgePINVOKEProxy.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool opNotEquals(UnitType other) {
    bool ret = bridgePINVOKEProxy.UnitType_opNotEquals(swigCPtr, UnitType.getCPtr(other));
    if (bridgePINVOKEProxy.SWIGPendingException.Pending) throw bridgePINVOKEProxy.SWIGPendingException.Retrieve();
    return ret;
  }

  public bool opLessThan(UnitType other) {
    bool ret = bridgePINVOKEProxy.UnitType_opLessThan(swigCPtr, UnitType.getCPtr(other));
    if (bridgePINVOKEProxy.SWIGPendingException.Pending) throw bridgePINVOKEProxy.SWIGPendingException.Retrieve();
    return ret;
  }

  public int getID() {
    int ret = bridgePINVOKEProxy.UnitType_getID(swigCPtr);
    return ret;
  }

  public string getName() {
    string ret = bridgePINVOKEProxy.UnitType_getName(swigCPtr);
    return ret;
  }

  public string getSubLabel() {
    string ret = bridgePINVOKEProxy.UnitType_getSubLabel(swigCPtr);
    return ret;
  }

  public Race getRace() {
    Race ret = new Race(bridgePINVOKEProxy.UnitType_getRace(swigCPtr), true);
    return ret;
  }

  public UnitTypePtrIntPair whatBuilds() {
    UnitTypePtrIntPair ret = new UnitTypePtrIntPair(bridgePINVOKEProxy.UnitType_whatBuilds(swigCPtr), true);
    return ret;
  }

  public UnitTypePtrIntMap requiredUnits() {
    UnitTypePtrIntMap ret = new UnitTypePtrIntMap(bridgePINVOKEProxy.UnitType_requiredUnits(swigCPtr), false);
    return ret;
  }

  public TechType requiredTech() {
    IntPtr cPtr = bridgePINVOKEProxy.UnitType_requiredTech(swigCPtr);
    TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
    return ret;
  }

  public TechTypePtrSet abilities() {
    TechTypePtrSet ret = new TechTypePtrSet(bridgePINVOKEProxy.UnitType_abilities(swigCPtr), false);
    return ret;
  }

  public UpgradeTypePtrSet upgrades() {
    UpgradeTypePtrSet ret = new UpgradeTypePtrSet(bridgePINVOKEProxy.UnitType_upgrades(swigCPtr), false);
    return ret;
  }

  public UpgradeType armorUpgrade() {
    IntPtr cPtr = bridgePINVOKEProxy.UnitType_armorUpgrade(swigCPtr);
    UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
    return ret;
  }

  public int maxHitPoints() {
    int ret = bridgePINVOKEProxy.UnitType_maxHitPoints(swigCPtr);
    return ret;
  }

  public int maxShields() {
    int ret = bridgePINVOKEProxy.UnitType_maxShields(swigCPtr);
    return ret;
  }

  public int maxEnergy() {
    int ret = bridgePINVOKEProxy.UnitType_maxEnergy(swigCPtr);
    return ret;
  }

  public int armor() {
    int ret = bridgePINVOKEProxy.UnitType_armor(swigCPtr);
    return ret;
  }

  public int mineralPrice() {
    int ret = bridgePINVOKEProxy.UnitType_mineralPrice(swigCPtr);
    return ret;
  }

  public int gasPrice() {
    int ret = bridgePINVOKEProxy.UnitType_gasPrice(swigCPtr);
    return ret;
  }

  public int buildTime() {
    int ret = bridgePINVOKEProxy.UnitType_buildTime(swigCPtr);
    return ret;
  }

  public int supplyRequired() {
    int ret = bridgePINVOKEProxy.UnitType_supplyRequired(swigCPtr);
    return ret;
  }

  public int supplyProvided() {
    int ret = bridgePINVOKEProxy.UnitType_supplyProvided(swigCPtr);
    return ret;
  }

  public int spaceRequired() {
    int ret = bridgePINVOKEProxy.UnitType_spaceRequired(swigCPtr);
    return ret;
  }

  public int spaceProvided() {
    int ret = bridgePINVOKEProxy.UnitType_spaceProvided(swigCPtr);
    return ret;
  }

  public int buildScore() {
    int ret = bridgePINVOKEProxy.UnitType_buildScore(swigCPtr);
    return ret;
  }

  public int destroyScore() {
    int ret = bridgePINVOKEProxy.UnitType_destroyScore(swigCPtr);
    return ret;
  }

  public UnitSizeType size() {
    UnitSizeType ret = new UnitSizeType(bridgePINVOKEProxy.UnitType_size(swigCPtr), true);
    return ret;
  }

  public int tileWidth() {
    int ret = bridgePINVOKEProxy.UnitType_tileWidth(swigCPtr);
    return ret;
  }

  public int tileHeight() {
    int ret = bridgePINVOKEProxy.UnitType_tileHeight(swigCPtr);
    return ret;
  }

  public int dimensionLeft() {
    int ret = bridgePINVOKEProxy.UnitType_dimensionLeft(swigCPtr);
    return ret;
  }

  public int dimensionUp() {
    int ret = bridgePINVOKEProxy.UnitType_dimensionUp(swigCPtr);
    return ret;
  }

  public int dimensionRight() {
    int ret = bridgePINVOKEProxy.UnitType_dimensionRight(swigCPtr);
    return ret;
  }

  public int dimensionDown() {
    int ret = bridgePINVOKEProxy.UnitType_dimensionDown(swigCPtr);
    return ret;
  }

  public int seekRange() {
    int ret = bridgePINVOKEProxy.UnitType_seekRange(swigCPtr);
    return ret;
  }

  public int sightRange() {
    int ret = bridgePINVOKEProxy.UnitType_sightRange(swigCPtr);
    return ret;
  }

  public WeaponType groundWeapon() {
    IntPtr cPtr = bridgePINVOKEProxy.UnitType_groundWeapon(swigCPtr);
    WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
    return ret;
  }

  public int maxGroundHits() {
    int ret = bridgePINVOKEProxy.UnitType_maxGroundHits(swigCPtr);
    return ret;
  }

  public WeaponType airWeapon() {
    IntPtr cPtr = bridgePINVOKEProxy.UnitType_airWeapon(swigCPtr);
    WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
    return ret;
  }

  public int maxAirHits() {
    int ret = bridgePINVOKEProxy.UnitType_maxAirHits(swigCPtr);
    return ret;
  }

  public double topSpeed() {
    double ret = bridgePINVOKEProxy.UnitType_topSpeed(swigCPtr);
    return ret;
  }

  public int acceleration() {
    int ret = bridgePINVOKEProxy.UnitType_acceleration(swigCPtr);
    return ret;
  }

  public int haltDistance() {
    int ret = bridgePINVOKEProxy.UnitType_haltDistance(swigCPtr);
    return ret;
  }

  public int turnRadius() {
    int ret = bridgePINVOKEProxy.UnitType_turnRadius(swigCPtr);
    return ret;
  }

  public bool canProduce() {
    bool ret = bridgePINVOKEProxy.UnitType_canProduce(swigCPtr);
    return ret;
  }

  public bool canAttack() {
    bool ret = bridgePINVOKEProxy.UnitType_canAttack(swigCPtr);
    return ret;
  }

  public bool canMove() {
    bool ret = bridgePINVOKEProxy.UnitType_canMove(swigCPtr);
    return ret;
  }

  public bool isFlyer() {
    bool ret = bridgePINVOKEProxy.UnitType_isFlyer(swigCPtr);
    return ret;
  }

  public bool regeneratesHP() {
    bool ret = bridgePINVOKEProxy.UnitType_regeneratesHP(swigCPtr);
    return ret;
  }

  public bool isSpellcaster() {
    bool ret = bridgePINVOKEProxy.UnitType_isSpellcaster(swigCPtr);
    return ret;
  }

  public bool hasPermanentCloak() {
    bool ret = bridgePINVOKEProxy.UnitType_hasPermanentCloak(swigCPtr);
    return ret;
  }

  public bool isInvincible() {
    bool ret = bridgePINVOKEProxy.UnitType_isInvincible(swigCPtr);
    return ret;
  }

  public bool isOrganic() {
    bool ret = bridgePINVOKEProxy.UnitType_isOrganic(swigCPtr);
    return ret;
  }

  public bool isMechanical() {
    bool ret = bridgePINVOKEProxy.UnitType_isMechanical(swigCPtr);
    return ret;
  }

  public bool isRobotic() {
    bool ret = bridgePINVOKEProxy.UnitType_isRobotic(swigCPtr);
    return ret;
  }

  public bool isDetector() {
    bool ret = bridgePINVOKEProxy.UnitType_isDetector(swigCPtr);
    return ret;
  }

  public bool isResourceContainer() {
    bool ret = bridgePINVOKEProxy.UnitType_isResourceContainer(swigCPtr);
    return ret;
  }

  public bool isResourceDepot() {
    bool ret = bridgePINVOKEProxy.UnitType_isResourceDepot(swigCPtr);
    return ret;
  }

  public bool isRefinery() {
    bool ret = bridgePINVOKEProxy.UnitType_isRefinery(swigCPtr);
    return ret;
  }

  public bool isWorker() {
    bool ret = bridgePINVOKEProxy.UnitType_isWorker(swigCPtr);
    return ret;
  }

  public bool requiresPsi() {
    bool ret = bridgePINVOKEProxy.UnitType_requiresPsi(swigCPtr);
    return ret;
  }

  public bool requiresCreep() {
    bool ret = bridgePINVOKEProxy.UnitType_requiresCreep(swigCPtr);
    return ret;
  }

  public bool isTwoUnitsInOneEgg() {
    bool ret = bridgePINVOKEProxy.UnitType_isTwoUnitsInOneEgg(swigCPtr);
    return ret;
  }

  public bool isBurrowable() {
    bool ret = bridgePINVOKEProxy.UnitType_isBurrowable(swigCPtr);
    return ret;
  }

  public bool isCloakable() {
    bool ret = bridgePINVOKEProxy.UnitType_isCloakable(swigCPtr);
    return ret;
  }

  public bool isBuilding() {
    bool ret = bridgePINVOKEProxy.UnitType_isBuilding(swigCPtr);
    return ret;
  }

  public bool isAddon() {
    bool ret = bridgePINVOKEProxy.UnitType_isAddon(swigCPtr);
    return ret;
  }

  public bool isFlyingBuilding() {
    bool ret = bridgePINVOKEProxy.UnitType_isFlyingBuilding(swigCPtr);
    return ret;
  }

  public bool isNeutral() {
    bool ret = bridgePINVOKEProxy.UnitType_isNeutral(swigCPtr);
    return ret;
  }

}

}
