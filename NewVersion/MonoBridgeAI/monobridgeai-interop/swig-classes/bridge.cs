/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.0
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BWAPI {

using System;
using System.Runtime.InteropServices;

public class bridge {
  public static void BWAPI_init() {
    bridgePINVOKE.BWAPI_init();
  }

  public static BulletType getBulletType(string name) {
    BulletType ret = new BulletType(bridgePINVOKE.getBulletType(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__setT_BWAPI__BulletType_t allBulletTypes() {
    SWIGTYPE_p_std__setT_BWAPI__BulletType_t ret = new SWIGTYPE_p_std__setT_BWAPI__BulletType_t(bridgePINVOKE.allBulletTypes(), false);
    return ret;
  }

  public static void initBulletTypes() {
    bridgePINVOKE.initBulletTypes();
  }

  public static BulletType BulletTypeMelee {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeMelee_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeFusion_Cutter_Hit {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeFusion_Cutter_Hit_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeGauss_Rifle_Hit {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeGauss_Rifle_Hit_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeC_10_Canister_Rifle_Hit {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeC_10_Canister_Rifle_Hit_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeGemini_Missiles {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeGemini_Missiles_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeFragmentation_Grenade {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeFragmentation_Grenade_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeLongbolt_Missile {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeLongbolt_Missile_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeATS_ATA_Laser_Battery {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeATS_ATA_Laser_Battery_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeBurst_Lasers {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeBurst_Lasers_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeArclite_Shock_Cannon_Hit {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeArclite_Shock_Cannon_Hit_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeEMP_Missile {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeEMP_Missile_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeDual_Photon_Blasters_Hit {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeDual_Photon_Blasters_Hit_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeParticle_Beam_Hit {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeParticle_Beam_Hit_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeAnti_Matter_Missile {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeAnti_Matter_Missile_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypePulse_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypePulse_Cannon_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypePsionic_Shockwave_Hit {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypePsionic_Shockwave_Hit_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypePsionic_Storm {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypePsionic_Storm_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeYamato_Gun {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeYamato_Gun_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypePhase_Disruptor {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypePhase_Disruptor_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeSTA_STS_Cannon_Overlay {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeSTA_STS_Cannon_Overlay_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeSunken_Colony_Tentacle {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeSunken_Colony_Tentacle_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeAcid_Spore {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeAcid_Spore_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeGlave_Wurm {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeGlave_Wurm_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeSeeker_Spores {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeSeeker_Spores_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeQueen_Spell_Carrier {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeQueen_Spell_Carrier_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypePlague_Cloud {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypePlague_Cloud_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeConsume {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeConsume_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeNeedle_Spine_Hit {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeNeedle_Spine_Hit_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeInvisible {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeInvisible_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeOptical_Flare_Grenade {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeOptical_Flare_Grenade_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeHalo_Rockets {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeHalo_Rockets_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeSubterranean_Spines {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeSubterranean_Spines_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeCorrosive_Acid_Shot {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeCorrosive_Acid_Shot_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeNeutron_Flare {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeNeutron_Flare_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeNone {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeNone_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static BulletType BulletTypeUnknown {
    get {
      IntPtr cPtr = bridgePINVOKE.BulletTypeUnknown_get();
      BulletType ret = (cPtr == IntPtr.Zero) ? null : new BulletType(cPtr, false);
      return ret;
    } 
  }

  public static DamageType getDamageType(string name) {
    DamageType ret = new DamageType(bridgePINVOKE.getDamageType(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DamageTypeSet allDamageTypes() {
    DamageTypeSet ret = new DamageTypeSet(bridgePINVOKE.allDamageTypes(), false);
    return ret;
  }

  public static void initDamageTypes() {
    bridgePINVOKE.initDamageTypes();
  }

  public static DamageType DamageTypeIndependent {
    get {
      IntPtr cPtr = bridgePINVOKE.DamageTypeIndependent_get();
      DamageType ret = (cPtr == IntPtr.Zero) ? null : new DamageType(cPtr, false);
      return ret;
    } 
  }

  public static DamageType Explosive {
    get {
      IntPtr cPtr = bridgePINVOKE.Explosive_get();
      DamageType ret = (cPtr == IntPtr.Zero) ? null : new DamageType(cPtr, false);
      return ret;
    } 
  }

  public static DamageType Concussive {
    get {
      IntPtr cPtr = bridgePINVOKE.Concussive_get();
      DamageType ret = (cPtr == IntPtr.Zero) ? null : new DamageType(cPtr, false);
      return ret;
    } 
  }

  public static DamageType DamageTypeNormal {
    get {
      IntPtr cPtr = bridgePINVOKE.DamageTypeNormal_get();
      DamageType ret = (cPtr == IntPtr.Zero) ? null : new DamageType(cPtr, false);
      return ret;
    } 
  }

  public static DamageType Ignore_Armor {
    get {
      IntPtr cPtr = bridgePINVOKE.Ignore_Armor_get();
      DamageType ret = (cPtr == IntPtr.Zero) ? null : new DamageType(cPtr, false);
      return ret;
    } 
  }

  public static DamageType DamageTypeNone {
    get {
      IntPtr cPtr = bridgePINVOKE.DamageTypeNone_get();
      DamageType ret = (cPtr == IntPtr.Zero) ? null : new DamageType(cPtr, false);
      return ret;
    } 
  }

  public static DamageType DamageTypeUnknown {
    get {
      IntPtr cPtr = bridgePINVOKE.DamageTypeUnknown_get();
      DamageType ret = (cPtr == IntPtr.Zero) ? null : new DamageType(cPtr, false);
      return ret;
    } 
  }

  public static Error getError(string name) {
    Error ret = new Error(bridgePINVOKE.getError(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ErrorSet allErrors() {
    ErrorSet ret = new ErrorSet(bridgePINVOKE.allErrors(), false);
    return ret;
  }

  public static void initErrors() {
    bridgePINVOKE.initErrors();
  }

  public static Error Unit_Does_Not_Exist {
    get {
      IntPtr cPtr = bridgePINVOKE.Unit_Does_Not_Exist_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Unit_Not_Visible {
    get {
      IntPtr cPtr = bridgePINVOKE.Unit_Not_Visible_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Unit_Not_Owned {
    get {
      IntPtr cPtr = bridgePINVOKE.Unit_Not_Owned_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Unit_Busy {
    get {
      IntPtr cPtr = bridgePINVOKE.Unit_Busy_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Incompatible_UnitType {
    get {
      IntPtr cPtr = bridgePINVOKE.Incompatible_UnitType_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Incompatible_TechType {
    get {
      IntPtr cPtr = bridgePINVOKE.Incompatible_TechType_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Already_Researched {
    get {
      IntPtr cPtr = bridgePINVOKE.Already_Researched_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Fully_Upgraded {
    get {
      IntPtr cPtr = bridgePINVOKE.Fully_Upgraded_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Currently_Researching {
    get {
      IntPtr cPtr = bridgePINVOKE.Currently_Researching_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Currently_Upgrading {
    get {
      IntPtr cPtr = bridgePINVOKE.Currently_Upgrading_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Insufficient_Minerals {
    get {
      IntPtr cPtr = bridgePINVOKE.Insufficient_Minerals_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Insufficient_Gas {
    get {
      IntPtr cPtr = bridgePINVOKE.Insufficient_Gas_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Insufficient_Supply {
    get {
      IntPtr cPtr = bridgePINVOKE.Insufficient_Supply_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Insufficient_Energy {
    get {
      IntPtr cPtr = bridgePINVOKE.Insufficient_Energy_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Insufficient_Tech {
    get {
      IntPtr cPtr = bridgePINVOKE.Insufficient_Tech_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Insufficient_Ammo {
    get {
      IntPtr cPtr = bridgePINVOKE.Insufficient_Ammo_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Insufficient_Space {
    get {
      IntPtr cPtr = bridgePINVOKE.Insufficient_Space_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Unbuildable_Location {
    get {
      IntPtr cPtr = bridgePINVOKE.Unbuildable_Location_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Out_Of_Range {
    get {
      IntPtr cPtr = bridgePINVOKE.Out_Of_Range_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Unable_To_Hit {
    get {
      IntPtr cPtr = bridgePINVOKE.Unable_To_Hit_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Access_Denied {
    get {
      IntPtr cPtr = bridgePINVOKE.Access_Denied_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error ErrorNone {
    get {
      IntPtr cPtr = bridgePINVOKE.ErrorNone_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error ErrorUnknown {
    get {
      IntPtr cPtr = bridgePINVOKE.ErrorUnknown_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType getExplosionType(string name) {
    ExplosionType ret = new ExplosionType(bridgePINVOKE.getExplosionType(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplosionTypeSet allExplosionTypes() {
    ExplosionTypeSet ret = new ExplosionTypeSet(bridgePINVOKE.allExplosionTypes(), false);
    return ret;
  }

  public static void initExplosionTypes() {
    bridgePINVOKE.initExplosionTypes();
  }

  public static ExplosionType ExplosionTypeNone {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypeNone_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeNormal {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypeNormal_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType Radial_Splash {
    get {
      IntPtr cPtr = bridgePINVOKE.Radial_Splash_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType Enemy_Splash {
    get {
      IntPtr cPtr = bridgePINVOKE.Enemy_Splash_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeLockdown {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypeLockdown_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType Nuclear_Missile {
    get {
      IntPtr cPtr = bridgePINVOKE.Nuclear_Missile_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeParasite {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypeParasite_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType Broodlings {
    get {
      IntPtr cPtr = bridgePINVOKE.Broodlings_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeEMP_Shockwave {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypeEMP_Shockwave_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeIrradiate {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypeIrradiate_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeEnsnare {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypeEnsnare_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypePlague {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypePlague_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeStasis_Field {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypeStasis_Field_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeDark_Swarm {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypeDark_Swarm_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeConsume {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypeConsume_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeYamato_Gun {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypeYamato_Gun_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeRestoration {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypeRestoration_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeDisruption_Web {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypeDisruption_Web_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeCorrosive_Acid {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypeCorrosive_Acid_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeMind_Control {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypeMind_Control_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeFeedback {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypeFeedback_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeOptical_Flare {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypeOptical_Flare_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeMaelstrom {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypeMaelstrom_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType Air_Splash {
    get {
      IntPtr cPtr = bridgePINVOKE.Air_Splash_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeUnknown {
    get {
      IntPtr cPtr = bridgePINVOKE.ExplosionTypeUnknown_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static int FLAG_COUNT {
    get {
      int ret = bridgePINVOKE.FLAG_COUNT_get();
      return ret;
    } 
  }

  public static Game Broodwar {
    set {
      bridgePINVOKE.Broodwar_set(Game.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKE.Broodwar_get();
      Game ret = (cPtr == IntPtr.Zero) ? null : new Game(cPtr, false);
      return ret;
    } 
  }

  public static GameType getGameType(string name) {
    GameType ret = new GameType(bridgePINVOKE.getGameType(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__setT_BWAPI__GameType_t allGameTypes() {
    SWIGTYPE_p_std__setT_BWAPI__GameType_t ret = new SWIGTYPE_p_std__setT_BWAPI__GameType_t(bridgePINVOKE.allGameTypes(), false);
    return ret;
  }

  public static void initGameTypes() {
    bridgePINVOKE.initGameTypes();
  }

  public static GameType GameTypeMelee {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypeMelee_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypeFree_For_All {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypeFree_For_All_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypeOne_on_One {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypeOne_on_One_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypeCapture_The_Flag {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypeCapture_The_Flag_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypeGreed {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypeGreed_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypeSlaughter {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypeSlaughter_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypeSudden_Death {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypeSudden_Death_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypeLadder {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypeLadder_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypeUse_Map_Settings {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypeUse_Map_Settings_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypeTeam_Melee {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypeTeam_Melee_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypeTeam_Free_For_All {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypeTeam_Free_For_All_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypeTeam_Capture_The_Flag {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypeTeam_Capture_The_Flag_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypeTop_vs_Bottom {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypeTop_vs_Bottom_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypePro_Gamer_League {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypePro_Gamer_League_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypeNone {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypeNone_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static GameType GameTypeUnknown {
    get {
      IntPtr cPtr = bridgePINVOKE.GameTypeUnknown_get();
      GameType ret = (cPtr == IntPtr.Zero) ? null : new GameType(cPtr, false);
      return ret;
    } 
  }

  public static Order getOrder(string name) {
    Order ret = new Order(bridgePINVOKE.getOrder(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OrderSet allOrders() {
    OrderSet ret = new OrderSet(bridgePINVOKE.allOrders(), false);
    return ret;
  }

  public static void initOrders() {
    bridgePINVOKE.initOrders();
  }

  public static Order Die {
    get {
      IntPtr cPtr = bridgePINVOKE.Die_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Stop {
    get {
      IntPtr cPtr = bridgePINVOKE.Stop_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Guard {
    get {
      IntPtr cPtr = bridgePINVOKE.Guard_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order PlayerGuard {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerGuard_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order TurretGuard {
    get {
      IntPtr cPtr = bridgePINVOKE.TurretGuard_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order BunkerGuard {
    get {
      IntPtr cPtr = bridgePINVOKE.BunkerGuard_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Move {
    get {
      IntPtr cPtr = bridgePINVOKE.Move_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order AttackUnit {
    get {
      IntPtr cPtr = bridgePINVOKE.AttackUnit_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order AttackTile {
    get {
      IntPtr cPtr = bridgePINVOKE.AttackTile_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Hover {
    get {
      IntPtr cPtr = bridgePINVOKE.Hover_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order AttackMove {
    get {
      IntPtr cPtr = bridgePINVOKE.AttackMove_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order InfestedCommandCenter {
    get {
      IntPtr cPtr = bridgePINVOKE.InfestedCommandCenter_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order UnusedNothing {
    get {
      IntPtr cPtr = bridgePINVOKE.UnusedNothing_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order UnusedPowerup {
    get {
      IntPtr cPtr = bridgePINVOKE.UnusedPowerup_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order TowerGuard {
    get {
      IntPtr cPtr = bridgePINVOKE.TowerGuard_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order VultureMine {
    get {
      IntPtr cPtr = bridgePINVOKE.VultureMine_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Nothing {
    get {
      IntPtr cPtr = bridgePINVOKE.Nothing_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Nothing3 {
    get {
      IntPtr cPtr = bridgePINVOKE.Nothing3_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastInfestation {
    get {
      IntPtr cPtr = bridgePINVOKE.CastInfestation_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order InfestingCommandCenter {
    get {
      IntPtr cPtr = bridgePINVOKE.InfestingCommandCenter_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order PlaceBuilding {
    get {
      IntPtr cPtr = bridgePINVOKE.PlaceBuilding_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order BuildProtoss2 {
    get {
      IntPtr cPtr = bridgePINVOKE.BuildProtoss2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ConstructingBuilding {
    get {
      IntPtr cPtr = bridgePINVOKE.ConstructingBuilding_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Repair {
    get {
      IntPtr cPtr = bridgePINVOKE.Repair_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order PlaceAddon {
    get {
      IntPtr cPtr = bridgePINVOKE.PlaceAddon_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order BuildAddon {
    get {
      IntPtr cPtr = bridgePINVOKE.BuildAddon_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Train {
    get {
      IntPtr cPtr = bridgePINVOKE.Train_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order RallyPointUnit {
    get {
      IntPtr cPtr = bridgePINVOKE.RallyPointUnit_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order RallyPointTile {
    get {
      IntPtr cPtr = bridgePINVOKE.RallyPointTile_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ZergBirth {
    get {
      IntPtr cPtr = bridgePINVOKE.ZergBirth_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ZergUnitMorph {
    get {
      IntPtr cPtr = bridgePINVOKE.ZergUnitMorph_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ZergBuildingMorph {
    get {
      IntPtr cPtr = bridgePINVOKE.ZergBuildingMorph_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order IncompleteBuilding {
    get {
      IntPtr cPtr = bridgePINVOKE.IncompleteBuilding_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order BuildNydusExit {
    get {
      IntPtr cPtr = bridgePINVOKE.BuildNydusExit_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order EnterNydusCanal {
    get {
      IntPtr cPtr = bridgePINVOKE.EnterNydusCanal_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Follow {
    get {
      IntPtr cPtr = bridgePINVOKE.Follow_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Carrier {
    get {
      IntPtr cPtr = bridgePINVOKE.Carrier_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ReaverCarrierMove {
    get {
      IntPtr cPtr = bridgePINVOKE.ReaverCarrierMove_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CarrierIgnore2 {
    get {
      IntPtr cPtr = bridgePINVOKE.CarrierIgnore2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Reaver {
    get {
      IntPtr cPtr = bridgePINVOKE.Reaver_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order TrainFighter {
    get {
      IntPtr cPtr = bridgePINVOKE.TrainFighter_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order InterceptorAttack {
    get {
      IntPtr cPtr = bridgePINVOKE.InterceptorAttack_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ScarabAttack {
    get {
      IntPtr cPtr = bridgePINVOKE.ScarabAttack_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order RechargeShieldsUnit {
    get {
      IntPtr cPtr = bridgePINVOKE.RechargeShieldsUnit_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order RechargeShieldsBattery {
    get {
      IntPtr cPtr = bridgePINVOKE.RechargeShieldsBattery_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ShieldBattery {
    get {
      IntPtr cPtr = bridgePINVOKE.ShieldBattery_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order InterceptorReturn {
    get {
      IntPtr cPtr = bridgePINVOKE.InterceptorReturn_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order BuildingLand {
    get {
      IntPtr cPtr = bridgePINVOKE.BuildingLand_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order BuildingLiftOff {
    get {
      IntPtr cPtr = bridgePINVOKE.BuildingLiftOff_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order DroneLiftOff {
    get {
      IntPtr cPtr = bridgePINVOKE.DroneLiftOff_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order LiftingOff {
    get {
      IntPtr cPtr = bridgePINVOKE.LiftingOff_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ResearchTech {
    get {
      IntPtr cPtr = bridgePINVOKE.ResearchTech_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Upgrade {
    get {
      IntPtr cPtr = bridgePINVOKE.Upgrade_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Larva {
    get {
      IntPtr cPtr = bridgePINVOKE.Larva_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order SpawningLarva {
    get {
      IntPtr cPtr = bridgePINVOKE.SpawningLarva_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Harvest1 {
    get {
      IntPtr cPtr = bridgePINVOKE.Harvest1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Harvest2 {
    get {
      IntPtr cPtr = bridgePINVOKE.Harvest2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order MoveToGas {
    get {
      IntPtr cPtr = bridgePINVOKE.MoveToGas_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order WaitForGas {
    get {
      IntPtr cPtr = bridgePINVOKE.WaitForGas_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order HarvestGas {
    get {
      IntPtr cPtr = bridgePINVOKE.HarvestGas_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ReturnGas {
    get {
      IntPtr cPtr = bridgePINVOKE.ReturnGas_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order MoveToMinerals {
    get {
      IntPtr cPtr = bridgePINVOKE.MoveToMinerals_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order WaitForMinerals {
    get {
      IntPtr cPtr = bridgePINVOKE.WaitForMinerals_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order MiningMinerals {
    get {
      IntPtr cPtr = bridgePINVOKE.MiningMinerals_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Harvest3 {
    get {
      IntPtr cPtr = bridgePINVOKE.Harvest3_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Harvest4 {
    get {
      IntPtr cPtr = bridgePINVOKE.Harvest4_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ReturnMinerals {
    get {
      IntPtr cPtr = bridgePINVOKE.ReturnMinerals_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Interrupted {
    get {
      IntPtr cPtr = bridgePINVOKE.Interrupted_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order EnterTransport {
    get {
      IntPtr cPtr = bridgePINVOKE.EnterTransport_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order PickupIdle {
    get {
      IntPtr cPtr = bridgePINVOKE.PickupIdle_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order PickupTransport {
    get {
      IntPtr cPtr = bridgePINVOKE.PickupTransport_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order PickupBunker {
    get {
      IntPtr cPtr = bridgePINVOKE.PickupBunker_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Pickup4 {
    get {
      IntPtr cPtr = bridgePINVOKE.Pickup4_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order PowerupIdle {
    get {
      IntPtr cPtr = bridgePINVOKE.PowerupIdle_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Sieging {
    get {
      IntPtr cPtr = bridgePINVOKE.Sieging_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Unsieging {
    get {
      IntPtr cPtr = bridgePINVOKE.Unsieging_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order InitCreepGrowth {
    get {
      IntPtr cPtr = bridgePINVOKE.InitCreepGrowth_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order SpreadCreep {
    get {
      IntPtr cPtr = bridgePINVOKE.SpreadCreep_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order StoppingCreepGrowth {
    get {
      IntPtr cPtr = bridgePINVOKE.StoppingCreepGrowth_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order GuardianAspect {
    get {
      IntPtr cPtr = bridgePINVOKE.GuardianAspect_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ArchonWarp {
    get {
      IntPtr cPtr = bridgePINVOKE.ArchonWarp_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CompletingArchonsummon {
    get {
      IntPtr cPtr = bridgePINVOKE.CompletingArchonsummon_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order HoldPosition {
    get {
      IntPtr cPtr = bridgePINVOKE.HoldPosition_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Cloak {
    get {
      IntPtr cPtr = bridgePINVOKE.Cloak_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Decloak {
    get {
      IntPtr cPtr = bridgePINVOKE.Decloak_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Unload {
    get {
      IntPtr cPtr = bridgePINVOKE.Unload_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order MoveUnload {
    get {
      IntPtr cPtr = bridgePINVOKE.MoveUnload_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order FireYamatoGun {
    get {
      IntPtr cPtr = bridgePINVOKE.FireYamatoGun_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastLockdown {
    get {
      IntPtr cPtr = bridgePINVOKE.CastLockdown_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Burrowing {
    get {
      IntPtr cPtr = bridgePINVOKE.Burrowing_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Burrowed {
    get {
      IntPtr cPtr = bridgePINVOKE.Burrowed_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Unburrowing {
    get {
      IntPtr cPtr = bridgePINVOKE.Unburrowing_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastDarkSwarm {
    get {
      IntPtr cPtr = bridgePINVOKE.CastDarkSwarm_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastParasite {
    get {
      IntPtr cPtr = bridgePINVOKE.CastParasite_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastSpawnBroodlings {
    get {
      IntPtr cPtr = bridgePINVOKE.CastSpawnBroodlings_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastEMPShockwave {
    get {
      IntPtr cPtr = bridgePINVOKE.CastEMPShockwave_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order NukeWait {
    get {
      IntPtr cPtr = bridgePINVOKE.NukeWait_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order NukeTrain {
    get {
      IntPtr cPtr = bridgePINVOKE.NukeTrain_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order NukeLaunch {
    get {
      IntPtr cPtr = bridgePINVOKE.NukeLaunch_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order NukeUnit {
    get {
      IntPtr cPtr = bridgePINVOKE.NukeUnit_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastNuclearStrike {
    get {
      IntPtr cPtr = bridgePINVOKE.CastNuclearStrike_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order NukeTrack {
    get {
      IntPtr cPtr = bridgePINVOKE.NukeTrack_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CloakNearbyUnits {
    get {
      IntPtr cPtr = bridgePINVOKE.CloakNearbyUnits_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order PlaceMine {
    get {
      IntPtr cPtr = bridgePINVOKE.PlaceMine_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order RightClickAction {
    get {
      IntPtr cPtr = bridgePINVOKE.RightClickAction_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastRecall {
    get {
      IntPtr cPtr = bridgePINVOKE.CastRecall_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order TeleporttoLocation {
    get {
      IntPtr cPtr = bridgePINVOKE.TeleporttoLocation_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastScannerSweep {
    get {
      IntPtr cPtr = bridgePINVOKE.CastScannerSweep_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Scanner {
    get {
      IntPtr cPtr = bridgePINVOKE.Scanner_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastDefensiveMatrix {
    get {
      IntPtr cPtr = bridgePINVOKE.CastDefensiveMatrix_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastPsionicStorm {
    get {
      IntPtr cPtr = bridgePINVOKE.CastPsionicStorm_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastIrradiate {
    get {
      IntPtr cPtr = bridgePINVOKE.CastIrradiate_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastPlague {
    get {
      IntPtr cPtr = bridgePINVOKE.CastPlague_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastConsume {
    get {
      IntPtr cPtr = bridgePINVOKE.CastConsume_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastEnsnare {
    get {
      IntPtr cPtr = bridgePINVOKE.CastEnsnare_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastStasisField {
    get {
      IntPtr cPtr = bridgePINVOKE.CastStasisField_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastHallucination {
    get {
      IntPtr cPtr = bridgePINVOKE.CastHallucination_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Hallucination2 {
    get {
      IntPtr cPtr = bridgePINVOKE.Hallucination2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ResetCollision {
    get {
      IntPtr cPtr = bridgePINVOKE.ResetCollision_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Patrol {
    get {
      IntPtr cPtr = bridgePINVOKE.Patrol_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CTFCOPInit {
    get {
      IntPtr cPtr = bridgePINVOKE.CTFCOPInit_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CTFCOP1 {
    get {
      IntPtr cPtr = bridgePINVOKE.CTFCOP1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CTFCOP2 {
    get {
      IntPtr cPtr = bridgePINVOKE.CTFCOP2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ComputerAI {
    get {
      IntPtr cPtr = bridgePINVOKE.ComputerAI_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order AtkMoveEP {
    get {
      IntPtr cPtr = bridgePINVOKE.AtkMoveEP_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order HarassMove {
    get {
      IntPtr cPtr = bridgePINVOKE.HarassMove_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order AIPatrol {
    get {
      IntPtr cPtr = bridgePINVOKE.AIPatrol_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order GuardPost {
    get {
      IntPtr cPtr = bridgePINVOKE.GuardPost_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order RescuePassive {
    get {
      IntPtr cPtr = bridgePINVOKE.RescuePassive_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Neutral {
    get {
      IntPtr cPtr = bridgePINVOKE.Neutral_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ComputerReturn {
    get {
      IntPtr cPtr = bridgePINVOKE.ComputerReturn_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order SelfDestrucing {
    get {
      IntPtr cPtr = bridgePINVOKE.SelfDestrucing_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Critter {
    get {
      IntPtr cPtr = bridgePINVOKE.Critter_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order HiddenGun {
    get {
      IntPtr cPtr = bridgePINVOKE.HiddenGun_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order OpenDoor {
    get {
      IntPtr cPtr = bridgePINVOKE.OpenDoor_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CloseDoor {
    get {
      IntPtr cPtr = bridgePINVOKE.CloseDoor_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order HideTrap {
    get {
      IntPtr cPtr = bridgePINVOKE.HideTrap_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order RevealTrap {
    get {
      IntPtr cPtr = bridgePINVOKE.RevealTrap_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Enabledoodad {
    get {
      IntPtr cPtr = bridgePINVOKE.Enabledoodad_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Disabledoodad {
    get {
      IntPtr cPtr = bridgePINVOKE.Disabledoodad_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Warpin {
    get {
      IntPtr cPtr = bridgePINVOKE.Warpin_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Medic {
    get {
      IntPtr cPtr = bridgePINVOKE.Medic_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order MedicHeal1 {
    get {
      IntPtr cPtr = bridgePINVOKE.MedicHeal1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order HealMove {
    get {
      IntPtr cPtr = bridgePINVOKE.HealMove_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order MedicHeal2 {
    get {
      IntPtr cPtr = bridgePINVOKE.MedicHeal2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastRestoration {
    get {
      IntPtr cPtr = bridgePINVOKE.CastRestoration_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastDisruptionWeb {
    get {
      IntPtr cPtr = bridgePINVOKE.CastDisruptionWeb_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastMindControl {
    get {
      IntPtr cPtr = bridgePINVOKE.CastMindControl_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order DarkArchonMeld {
    get {
      IntPtr cPtr = bridgePINVOKE.DarkArchonMeld_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastFeedback {
    get {
      IntPtr cPtr = bridgePINVOKE.CastFeedback_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastOpticalFlare {
    get {
      IntPtr cPtr = bridgePINVOKE.CastOpticalFlare_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastMaelstrom {
    get {
      IntPtr cPtr = bridgePINVOKE.CastMaelstrom_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order JunkYardDog {
    get {
      IntPtr cPtr = bridgePINVOKE.JunkYardDog_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Fatal {
    get {
      IntPtr cPtr = bridgePINVOKE.Fatal_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order None {
    get {
      IntPtr cPtr = bridgePINVOKE.None_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Unknown {
    get {
      IntPtr cPtr = bridgePINVOKE.Unknown_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType getPlayerType(string name) {
    PlayerType ret = new PlayerType(bridgePINVOKE.getPlayerType(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PlayerTypeSet allPlayerTypes() {
    PlayerTypeSet ret = new PlayerTypeSet(bridgePINVOKE.allPlayerTypes(), false);
    return ret;
  }

  public static void initPlayerTypes() {
    bridgePINVOKE.initPlayerTypes();
  }

  public static PlayerType PlayerTypeNone {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerTypeNone_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypeComputer {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerTypeComputer_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypePlayer {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerTypePlayer_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypeRescuePassive {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerTypeRescuePassive_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypeEitherPreferComputer {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerTypeEitherPreferComputer_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypeEitherPreferHuman {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerTypeEitherPreferHuman_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypeNeutral {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerTypeNeutral_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypeClosed {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerTypeClosed_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypePlayerLeft {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerTypePlayerLeft_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypeComputerLeft {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerTypeComputerLeft_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypeUnknown {
    get {
      IntPtr cPtr = bridgePINVOKE.PlayerTypeUnknown_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static Position PositionInvalid {
    get {
      IntPtr cPtr = bridgePINVOKE.PositionInvalid_get();
      Position ret = (cPtr == IntPtr.Zero) ? null : new Position(cPtr, false);
      return ret;
    } 
  }

  public static Position PositionNone {
    get {
      IntPtr cPtr = bridgePINVOKE.PositionNone_get();
      Position ret = (cPtr == IntPtr.Zero) ? null : new Position(cPtr, false);
      return ret;
    } 
  }

  public static Position PositionUnknown {
    get {
      IntPtr cPtr = bridgePINVOKE.PositionUnknown_get();
      Position ret = (cPtr == IntPtr.Zero) ? null : new Position(cPtr, false);
      return ret;
    } 
  }

  public static Race getRace(string name) {
    Race ret = new Race(bridgePINVOKE.getRace(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RaceSet allRaces() {
    RaceSet ret = new RaceSet(bridgePINVOKE.allRaces(), false);
    return ret;
  }

  public static void initRaces() {
    bridgePINVOKE.initRaces();
  }

  public static Race Zerg {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_get();
      Race ret = (cPtr == IntPtr.Zero) ? null : new Race(cPtr, false);
      return ret;
    } 
  }

  public static Race Terran {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_get();
      Race ret = (cPtr == IntPtr.Zero) ? null : new Race(cPtr, false);
      return ret;
    } 
  }

  public static Race Protoss {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_get();
      Race ret = (cPtr == IntPtr.Zero) ? null : new Race(cPtr, false);
      return ret;
    } 
  }

  public static Race Random {
    get {
      IntPtr cPtr = bridgePINVOKE.Random_get();
      Race ret = (cPtr == IntPtr.Zero) ? null : new Race(cPtr, false);
      return ret;
    } 
  }

  public static Race Other {
    get {
      IntPtr cPtr = bridgePINVOKE.Other_get();
      Race ret = (cPtr == IntPtr.Zero) ? null : new Race(cPtr, false);
      return ret;
    } 
  }

  public static Race RaceNone {
    get {
      IntPtr cPtr = bridgePINVOKE.RaceNone_get();
      Race ret = (cPtr == IntPtr.Zero) ? null : new Race(cPtr, false);
      return ret;
    } 
  }

  public static Race RaceUnknown {
    get {
      IntPtr cPtr = bridgePINVOKE.RaceUnknown_get();
      Race ret = (cPtr == IntPtr.Zero) ? null : new Race(cPtr, false);
      return ret;
    } 
  }

  public static TechType getTechType(string name) {
    TechType ret = new TechType(bridgePINVOKE.getTechType(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TechTypeSet allTechTypes() {
    TechTypeSet ret = new TechTypeSet(bridgePINVOKE.allTechTypes(), false);
    return ret;
  }

  public static void init() {
    bridgePINVOKE.init();
  }

  public static TechType TechTypeStim_Packs {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeStim_Packs_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeLockdown {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeLockdown_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeEMP_Shockwave {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeEMP_Shockwave_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeSpider_Mines {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeSpider_Mines_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeScanner_Sweep {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeScanner_Sweep_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeTank_Siege_Mode {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeTank_Siege_Mode_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeDefensive_Matrix {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeDefensive_Matrix_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeIrradiate {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeIrradiate_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeYamato_Gun {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeYamato_Gun_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeCloaking_Field {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeCloaking_Field_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypePersonnel_Cloaking {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypePersonnel_Cloaking_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeBurrowing {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeBurrowing_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeInfestation {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeInfestation_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeSpawn_Broodlings {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeSpawn_Broodlings_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeDark_Swarm {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeDark_Swarm_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypePlague {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypePlague_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeConsume {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeConsume_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeEnsnare {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeEnsnare_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeParasite {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeParasite_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypePsionic_Storm {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypePsionic_Storm_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeHallucination {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeHallucination_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeRecall {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeRecall_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeStasis_Field {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeStasis_Field_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeArchon_Warp {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeArchon_Warp_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeRestoration {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeRestoration_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeDisruption_Web {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeDisruption_Web_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeMind_Control {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeMind_Control_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeDark_Archon_Meld {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeDark_Archon_Meld_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeFeedback {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeFeedback_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeOptical_Flare {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeOptical_Flare_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeMaelstrom {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeMaelstrom_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeLurker_Aspect {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeLurker_Aspect_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeHealing {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeHealing_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeNone {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeNone_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeUnknown {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeUnknown_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeNuclear_Strike {
    get {
      IntPtr cPtr = bridgePINVOKE.TechTypeNuclear_Strike_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TilePosition TilePositionInvalid {
    get {
      IntPtr cPtr = bridgePINVOKE.TilePositionInvalid_get();
      TilePosition ret = (cPtr == IntPtr.Zero) ? null : new TilePosition(cPtr, false);
      return ret;
    } 
  }

  public static TilePosition TilePositionNone {
    get {
      IntPtr cPtr = bridgePINVOKE.TilePositionNone_get();
      TilePosition ret = (cPtr == IntPtr.Zero) ? null : new TilePosition(cPtr, false);
      return ret;
    } 
  }

  public static TilePosition TilePositionUnknown {
    get {
      IntPtr cPtr = bridgePINVOKE.TilePositionUnknown_get();
      TilePosition ret = (cPtr == IntPtr.Zero) ? null : new TilePosition(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType getUnitCommandType(string name) {
    UnitCommandType ret = new UnitCommandType(bridgePINVOKE.getUnitCommandType(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_std__setT_BWAPI__UnitCommandType_t allUnitCommandTypes() {
    SWIGTYPE_p_std__setT_BWAPI__UnitCommandType_t ret = new SWIGTYPE_p_std__setT_BWAPI__UnitCommandType_t(bridgePINVOKE.allUnitCommandTypes(), false);
    return ret;
  }

  public static void initUnitCommandTypes() {
    bridgePINVOKE.initUnitCommandTypes();
  }

  public static UnitCommandType UnitCommandTypeAttack_Move {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeAttack_Move_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeAttack_Unit {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeAttack_Unit_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeBuild {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeBuild_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeBuild_Addon {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeBuild_Addon_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeTrain {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeTrain_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeMorph {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeMorph_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeResearch {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeResearch_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeUpgrade {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeUpgrade_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeSet_Rally_Position {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeSet_Rally_Position_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeSet_Rally_Unit {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeSet_Rally_Unit_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeMove {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeMove_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypePatrol {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypePatrol_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeHold_Position {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeHold_Position_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeStop {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeStop_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeFollow {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeFollow_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeGather {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeGather_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeReturn_Cargo {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeReturn_Cargo_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeRepair {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeRepair_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeBurrow {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeBurrow_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeUnburrow {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeUnburrow_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeCloak {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeCloak_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeDecloak {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeDecloak_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeSiege {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeSiege_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeUnsiege {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeUnsiege_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeLift {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeLift_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeLand {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeLand_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeLoad {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeLoad_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeUnload {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeUnload_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeUnload_All {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeUnload_All_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeUnload_All_Position {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeUnload_All_Position_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeRight_Click_Position {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeRight_Click_Position_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeRight_Click_Unit {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeRight_Click_Unit_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeHalt_Construction {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeHalt_Construction_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeCancel_Construction {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeCancel_Construction_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeCancel_Addon {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeCancel_Addon_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeCancel_Train {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeCancel_Train_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeCancel_Train_Slot {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeCancel_Train_Slot_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeCancel_Morph {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeCancel_Morph_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeCancel_Research {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeCancel_Research_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeCancel_Upgrade {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeCancel_Upgrade_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeUse_Tech {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeUse_Tech_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeUse_Tech_Position {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeUse_Tech_Position_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeUse_Tech_Unit {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeUse_Tech_Unit_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeNone {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeNone_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitCommandType UnitCommandTypeUnknown {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitCommandTypeUnknown_get();
      UnitCommandType ret = (cPtr == IntPtr.Zero) ? null : new UnitCommandType(cPtr, false);
      return ret;
    } 
  }

  public static UnitSizeType getUnitSizeType(string name) {
    UnitSizeType ret = new UnitSizeType(bridgePINVOKE.getUnitSizeType(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UnitSizeTypeSet allUnitSizeTypes() {
    UnitSizeTypeSet ret = new UnitSizeTypeSet(bridgePINVOKE.allUnitSizeTypes(), false);
    return ret;
  }

  public static void initUnitSizeTypes() {
    bridgePINVOKE.initUnitSizeTypes();
  }

  public static UnitSizeType UnitSizeTypeIndependent {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitSizeTypeIndependent_get();
      UnitSizeType ret = (cPtr == IntPtr.Zero) ? null : new UnitSizeType(cPtr, false);
      return ret;
    } 
  }

  public static UnitSizeType Small {
    get {
      IntPtr cPtr = bridgePINVOKE.Small_get();
      UnitSizeType ret = (cPtr == IntPtr.Zero) ? null : new UnitSizeType(cPtr, false);
      return ret;
    } 
  }

  public static UnitSizeType Medium {
    get {
      IntPtr cPtr = bridgePINVOKE.Medium_get();
      UnitSizeType ret = (cPtr == IntPtr.Zero) ? null : new UnitSizeType(cPtr, false);
      return ret;
    } 
  }

  public static UnitSizeType Large {
    get {
      IntPtr cPtr = bridgePINVOKE.Large_get();
      UnitSizeType ret = (cPtr == IntPtr.Zero) ? null : new UnitSizeType(cPtr, false);
      return ret;
    } 
  }

  public static UnitSizeType UnitSizeTypeNone {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitSizeTypeNone_get();
      UnitSizeType ret = (cPtr == IntPtr.Zero) ? null : new UnitSizeType(cPtr, false);
      return ret;
    } 
  }

  public static UnitSizeType UnitSizeTypeUnknown {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitSizeTypeUnknown_get();
      UnitSizeType ret = (cPtr == IntPtr.Zero) ? null : new UnitSizeType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType getUnitType(string name) {
    UnitType ret = new UnitType(bridgePINVOKE.getUnitType(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UnitTypeSet allUnitTypes() {
    UnitTypeSet ret = new UnitTypeSet(bridgePINVOKE.allUnitTypes(), false);
    return ret;
  }

  public static void initUnitTypes() {
    bridgePINVOKE.initUnitTypes();
  }

  public static UnitType Terran_Marine {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Marine_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Ghost {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Ghost_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Vulture {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Vulture_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Goliath {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Goliath_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Siege_Tank_Tank_Mode {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Siege_Tank_Tank_Mode_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_SCV {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_SCV_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Wraith {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Wraith_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Science_Vessel {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Science_Vessel_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Dropship {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Dropship_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Battlecruiser {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Battlecruiser_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Vulture_Spider_Mine {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Vulture_Spider_Mine_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Nuclear_Missile {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Nuclear_Missile_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Siege_Tank_Siege_Mode {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Siege_Tank_Siege_Mode_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Firebat {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Firebat_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Spell_Scanner_Sweep {
    get {
      IntPtr cPtr = bridgePINVOKE.Spell_Scanner_Sweep_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Medic {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Medic_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Larva {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Larva_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Egg {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Egg_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Zergling {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Zergling_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Hydralisk {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Hydralisk_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Ultralisk {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Ultralisk_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Broodling {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Broodling_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Drone {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Drone_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Overlord {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Overlord_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Mutalisk {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Mutalisk_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Guardian {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Guardian_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Queen {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Queen_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Defiler {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Defiler_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Scourge {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Scourge_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Infested_Terran {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Infested_Terran_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Valkyrie {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Valkyrie_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Cocoon {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Cocoon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Corsair {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Corsair_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Dark_Templar {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Dark_Templar_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Devourer {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Devourer_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Dark_Archon {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Dark_Archon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Probe {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Probe_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Zealot {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Zealot_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Dragoon {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Dragoon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_High_Templar {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_High_Templar_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Archon {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Archon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Shuttle {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Shuttle_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Scout {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Scout_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Arbiter {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Arbiter_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Carrier {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Carrier_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Interceptor {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Interceptor_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Reaver {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Reaver_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Observer {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Observer_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Scarab {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Scarab_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Critter_Rhynadon {
    get {
      IntPtr cPtr = bridgePINVOKE.Critter_Rhynadon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Critter_Bengalaas {
    get {
      IntPtr cPtr = bridgePINVOKE.Critter_Bengalaas_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Critter_Scantid {
    get {
      IntPtr cPtr = bridgePINVOKE.Critter_Scantid_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Critter_Kakaru {
    get {
      IntPtr cPtr = bridgePINVOKE.Critter_Kakaru_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Critter_Ragnasaur {
    get {
      IntPtr cPtr = bridgePINVOKE.Critter_Ragnasaur_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Critter_Ursadon {
    get {
      IntPtr cPtr = bridgePINVOKE.Critter_Ursadon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Lurker_Egg {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Lurker_Egg_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Lurker {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Lurker_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Spell_Disruption_Web {
    get {
      IntPtr cPtr = bridgePINVOKE.Spell_Disruption_Web_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Command_Center {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Command_Center_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Comsat_Station {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Comsat_Station_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Nuclear_Silo {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Nuclear_Silo_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Supply_Depot {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Supply_Depot_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Refinery {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Refinery_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Barracks {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Barracks_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Academy {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Academy_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Factory {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Factory_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Starport {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Starport_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Control_Tower {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Control_Tower_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Science_Facility {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Science_Facility_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Covert_Ops {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Covert_Ops_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Physics_Lab {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Physics_Lab_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Machine_Shop {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Machine_Shop_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Engineering_Bay {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Engineering_Bay_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Armory {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Armory_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Missile_Turret {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Missile_Turret_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Bunker {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Bunker_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Crashed_Norad_II {
    get {
      IntPtr cPtr = bridgePINVOKE.Special_Crashed_Norad_II_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Ion_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKE.Special_Ion_Cannon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Infested_Command_Center {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Infested_Command_Center_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Hatchery {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Hatchery_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Lair {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Lair_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Hive {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Hive_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Nydus_Canal {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Nydus_Canal_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Hydralisk_Den {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Hydralisk_Den_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Defiler_Mound {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Defiler_Mound_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Greater_Spire {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Greater_Spire_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Queens_Nest {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Queens_Nest_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Evolution_Chamber {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Evolution_Chamber_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Ultralisk_Cavern {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Ultralisk_Cavern_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Spire {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Spire_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Spawning_Pool {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Spawning_Pool_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Creep_Colony {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Creep_Colony_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Spore_Colony {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Spore_Colony_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Sunken_Colony {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Sunken_Colony_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Overmind_With_Shell {
    get {
      IntPtr cPtr = bridgePINVOKE.Special_Overmind_With_Shell_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Overmind {
    get {
      IntPtr cPtr = bridgePINVOKE.Special_Overmind_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Extractor {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Extractor_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Mature_Chrysalis {
    get {
      IntPtr cPtr = bridgePINVOKE.Special_Mature_Chrysalis_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Cerebrate {
    get {
      IntPtr cPtr = bridgePINVOKE.Special_Cerebrate_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Cerebrate_Daggoth {
    get {
      IntPtr cPtr = bridgePINVOKE.Special_Cerebrate_Daggoth_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Nexus {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Nexus_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Robotics_Facility {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Robotics_Facility_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Pylon {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Pylon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Assimilator {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Assimilator_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Observatory {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Observatory_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Gateway {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Gateway_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Photon_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Photon_Cannon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Citadel_of_Adun {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Citadel_of_Adun_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Cybernetics_Core {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Cybernetics_Core_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Templar_Archives {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Templar_Archives_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Forge {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Forge_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Stargate {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Stargate_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Stasis_Cell_Prison {
    get {
      IntPtr cPtr = bridgePINVOKE.Special_Stasis_Cell_Prison_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Fleet_Beacon {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Fleet_Beacon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Arbiter_Tribunal {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Arbiter_Tribunal_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Robotics_Support_Bay {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Robotics_Support_Bay_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Shield_Battery {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Shield_Battery_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Khaydarin_Crystal_Form {
    get {
      IntPtr cPtr = bridgePINVOKE.Special_Khaydarin_Crystal_Form_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Protoss_Temple {
    get {
      IntPtr cPtr = bridgePINVOKE.Special_Protoss_Temple_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_XelNaga_Temple {
    get {
      IntPtr cPtr = bridgePINVOKE.Special_XelNaga_Temple_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Resource_Mineral_Field {
    get {
      IntPtr cPtr = bridgePINVOKE.Resource_Mineral_Field_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Resource_Vespene_Geyser {
    get {
      IntPtr cPtr = bridgePINVOKE.Resource_Vespene_Geyser_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Warp_Gate {
    get {
      IntPtr cPtr = bridgePINVOKE.Special_Warp_Gate_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Psi_Disrupter {
    get {
      IntPtr cPtr = bridgePINVOKE.Special_Psi_Disrupter_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Power_Generator {
    get {
      IntPtr cPtr = bridgePINVOKE.Special_Power_Generator_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Overmind_Cocoon {
    get {
      IntPtr cPtr = bridgePINVOKE.Special_Overmind_Cocoon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Spell_Dark_Swarm {
    get {
      IntPtr cPtr = bridgePINVOKE.Spell_Dark_Swarm_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypeNone {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypeNone_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypeUnknown {
    get {
      IntPtr cPtr = bridgePINVOKE.UnitTypeUnknown_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType getUpgradeType(string name) {
    UpgradeType ret = new UpgradeType(bridgePINVOKE.getUpgradeType(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UpgradeTypeSet allUpgradeTypes() {
    UpgradeTypeSet ret = new UpgradeTypeSet(bridgePINVOKE.allUpgradeTypes(), false);
    return ret;
  }

  public static void initUpgradeTypes() {
    bridgePINVOKE.initUpgradeTypes();
  }

  public static UpgradeType Terran_Infantry_Armor {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Infantry_Armor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Terran_Vehicle_Plating {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Vehicle_Plating_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Terran_Ship_Plating {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Ship_Plating_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Zerg_Carapace {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Carapace_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Zerg_Flyer_Carapace {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Flyer_Carapace_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Protoss_Ground_Armor {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Ground_Armor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Protoss_Air_Armor {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Air_Armor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Terran_Infantry_Weapons {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Infantry_Weapons_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Terran_Vehicle_Weapons {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Vehicle_Weapons_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Terran_Ship_Weapons {
    get {
      IntPtr cPtr = bridgePINVOKE.Terran_Ship_Weapons_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Zerg_Melee_Attacks {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Melee_Attacks_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Zerg_Missile_Attacks {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Missile_Attacks_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Zerg_Flyer_Attacks {
    get {
      IntPtr cPtr = bridgePINVOKE.Zerg_Flyer_Attacks_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Protoss_Ground_Weapons {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Ground_Weapons_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Protoss_Air_Weapons {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Air_Weapons_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Protoss_Plasma_Shields {
    get {
      IntPtr cPtr = bridgePINVOKE.Protoss_Plasma_Shields_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType U_238_Shells {
    get {
      IntPtr cPtr = bridgePINVOKE.U_238_Shells_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Ion_Thrusters {
    get {
      IntPtr cPtr = bridgePINVOKE.Ion_Thrusters_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Titan_Reactor {
    get {
      IntPtr cPtr = bridgePINVOKE.Titan_Reactor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Ocular_Implants {
    get {
      IntPtr cPtr = bridgePINVOKE.Ocular_Implants_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Moebius_Reactor {
    get {
      IntPtr cPtr = bridgePINVOKE.Moebius_Reactor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Apollo_Reactor {
    get {
      IntPtr cPtr = bridgePINVOKE.Apollo_Reactor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Colossus_Reactor {
    get {
      IntPtr cPtr = bridgePINVOKE.Colossus_Reactor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Ventral_Sacs {
    get {
      IntPtr cPtr = bridgePINVOKE.Ventral_Sacs_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Antennae {
    get {
      IntPtr cPtr = bridgePINVOKE.Antennae_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Pneumatized_Carapace {
    get {
      IntPtr cPtr = bridgePINVOKE.Pneumatized_Carapace_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Metabolic_Boost {
    get {
      IntPtr cPtr = bridgePINVOKE.Metabolic_Boost_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Adrenal_Glands {
    get {
      IntPtr cPtr = bridgePINVOKE.Adrenal_Glands_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Muscular_Augments {
    get {
      IntPtr cPtr = bridgePINVOKE.Muscular_Augments_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Grooved_Spines {
    get {
      IntPtr cPtr = bridgePINVOKE.Grooved_Spines_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Gamete_Meiosis {
    get {
      IntPtr cPtr = bridgePINVOKE.Gamete_Meiosis_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Metasynaptic_Node {
    get {
      IntPtr cPtr = bridgePINVOKE.Metasynaptic_Node_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Singularity_Charge {
    get {
      IntPtr cPtr = bridgePINVOKE.Singularity_Charge_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Leg_Enhancements {
    get {
      IntPtr cPtr = bridgePINVOKE.Leg_Enhancements_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Scarab_Damage {
    get {
      IntPtr cPtr = bridgePINVOKE.Scarab_Damage_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Reaver_Capacity {
    get {
      IntPtr cPtr = bridgePINVOKE.Reaver_Capacity_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Gravitic_Drive {
    get {
      IntPtr cPtr = bridgePINVOKE.Gravitic_Drive_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Sensor_Array {
    get {
      IntPtr cPtr = bridgePINVOKE.Sensor_Array_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Gravitic_Boosters {
    get {
      IntPtr cPtr = bridgePINVOKE.Gravitic_Boosters_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Khaydarin_Amulet {
    get {
      IntPtr cPtr = bridgePINVOKE.Khaydarin_Amulet_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Apial_Sensors {
    get {
      IntPtr cPtr = bridgePINVOKE.Apial_Sensors_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Gravitic_Thrusters {
    get {
      IntPtr cPtr = bridgePINVOKE.Gravitic_Thrusters_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Carrier_Capacity {
    get {
      IntPtr cPtr = bridgePINVOKE.Carrier_Capacity_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Khaydarin_Core {
    get {
      IntPtr cPtr = bridgePINVOKE.Khaydarin_Core_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Argus_Jewel {
    get {
      IntPtr cPtr = bridgePINVOKE.Argus_Jewel_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Argus_Talisman {
    get {
      IntPtr cPtr = bridgePINVOKE.Argus_Talisman_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Caduceus_Reactor {
    get {
      IntPtr cPtr = bridgePINVOKE.Caduceus_Reactor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Chitinous_Plating {
    get {
      IntPtr cPtr = bridgePINVOKE.Chitinous_Plating_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Anabolic_Synthesis {
    get {
      IntPtr cPtr = bridgePINVOKE.Anabolic_Synthesis_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Charon_Boosters {
    get {
      IntPtr cPtr = bridgePINVOKE.Charon_Boosters_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypeNone {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypeNone_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypeUnknown {
    get {
      IntPtr cPtr = bridgePINVOKE.UpgradeTypeUnknown_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType getWeaponType(string name) {
    WeaponType ret = new WeaponType(bridgePINVOKE.getWeaponType(name), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WeaponTypeSet allWeaponTypes() {
    WeaponTypeSet ret = new WeaponTypeSet(bridgePINVOKE.allWeaponTypes(), false);
    return ret;
  }

  public static WeaponTypeSet normalWeaponTypes() {
    WeaponTypeSet ret = new WeaponTypeSet(bridgePINVOKE.normalWeaponTypes(), false);
    return ret;
  }

  public static WeaponTypeSet specialWeaponTypes() {
    WeaponTypeSet ret = new WeaponTypeSet(bridgePINVOKE.specialWeaponTypes(), false);
    return ret;
  }

  public static void initWeaponTypes() {
    bridgePINVOKE.initWeaponTypes();
  }

  public static WeaponType Gauss_Rifle {
    get {
      IntPtr cPtr = bridgePINVOKE.Gauss_Rifle_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType C_10_Canister_Rifle {
    get {
      IntPtr cPtr = bridgePINVOKE.C_10_Canister_Rifle_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeFragmentation_Grenade {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypeFragmentation_Grenade_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeSpider_Mines {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypeSpider_Mines_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Twin_Autocannons {
    get {
      IntPtr cPtr = bridgePINVOKE.Twin_Autocannons_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Hellfire_Missile_Pack {
    get {
      IntPtr cPtr = bridgePINVOKE.Hellfire_Missile_Pack_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Arclite_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKE.Arclite_Cannon_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Fusion_Cutter {
    get {
      IntPtr cPtr = bridgePINVOKE.Fusion_Cutter_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeGemini_Missiles {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypeGemini_Missiles_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeBurst_Lasers {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypeBurst_Lasers_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType ATS_Laser_Battery {
    get {
      IntPtr cPtr = bridgePINVOKE.ATS_Laser_Battery_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType ATA_Laser_Battery {
    get {
      IntPtr cPtr = bridgePINVOKE.ATA_Laser_Battery_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Flame_Thrower {
    get {
      IntPtr cPtr = bridgePINVOKE.Flame_Thrower_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Arclite_Shock_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKE.Arclite_Shock_Cannon_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeLongbolt_Missile {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypeLongbolt_Missile_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Claws {
    get {
      IntPtr cPtr = bridgePINVOKE.Claws_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Needle_Spines {
    get {
      IntPtr cPtr = bridgePINVOKE.Needle_Spines_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Kaiser_Blades {
    get {
      IntPtr cPtr = bridgePINVOKE.Kaiser_Blades_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Toxic_Spores {
    get {
      IntPtr cPtr = bridgePINVOKE.Toxic_Spores_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Spines {
    get {
      IntPtr cPtr = bridgePINVOKE.Spines_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeAcid_Spore {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypeAcid_Spore_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeGlave_Wurm {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypeGlave_Wurm_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeSeeker_Spores {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypeSeeker_Spores_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Subterranean_Tentacle {
    get {
      IntPtr cPtr = bridgePINVOKE.Subterranean_Tentacle_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Suicide_Infested_Terran {
    get {
      IntPtr cPtr = bridgePINVOKE.Suicide_Infested_Terran_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Suicide_Scourge {
    get {
      IntPtr cPtr = bridgePINVOKE.Suicide_Scourge_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Particle_Beam {
    get {
      IntPtr cPtr = bridgePINVOKE.Particle_Beam_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Psi_Blades {
    get {
      IntPtr cPtr = bridgePINVOKE.Psi_Blades_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypePhase_Disruptor {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypePhase_Disruptor_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Psionic_Shockwave {
    get {
      IntPtr cPtr = bridgePINVOKE.Psionic_Shockwave_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Dual_Photon_Blasters {
    get {
      IntPtr cPtr = bridgePINVOKE.Dual_Photon_Blasters_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Anti_Matter_Missiles {
    get {
      IntPtr cPtr = bridgePINVOKE.Anti_Matter_Missiles_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Phase_Disruptor_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKE.Phase_Disruptor_Cannon_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypePulse_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypePulse_Cannon_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType STS_Photon_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKE.STS_Photon_Cannon_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType STA_Photon_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKE.STA_Photon_Cannon_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Scarab {
    get {
      IntPtr cPtr = bridgePINVOKE.Scarab_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeNeutron_Flare {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypeNeutron_Flare_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeHalo_Rockets {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypeHalo_Rockets_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeCorrosive_Acid {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypeCorrosive_Acid_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeSubterranean_Spines {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypeSubterranean_Spines_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Warp_Blades {
    get {
      IntPtr cPtr = bridgePINVOKE.Warp_Blades_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeYamato_Gun {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypeYamato_Gun_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeNuclear_Strike {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypeNuclear_Strike_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Lockdown {
    get {
      IntPtr cPtr = bridgePINVOKE.Lockdown_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType EMP_Shockwave {
    get {
      IntPtr cPtr = bridgePINVOKE.EMP_Shockwave_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeIrradiate {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypeIrradiate_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Parasite {
    get {
      IntPtr cPtr = bridgePINVOKE.Parasite_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Spawn_Broodlings {
    get {
      IntPtr cPtr = bridgePINVOKE.Spawn_Broodlings_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeEnsnare {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypeEnsnare_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Dark_Swarm {
    get {
      IntPtr cPtr = bridgePINVOKE.Dark_Swarm_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypePlague {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypePlague_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeConsume {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypeConsume_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Stasis_Field {
    get {
      IntPtr cPtr = bridgePINVOKE.Stasis_Field_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypePsionic_Storm {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypePsionic_Storm_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Disruption_Web {
    get {
      IntPtr cPtr = bridgePINVOKE.Disruption_Web_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeRestoration {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypeRestoration_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeMind_Control {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypeMind_Control_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Feedback {
    get {
      IntPtr cPtr = bridgePINVOKE.Feedback_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Optical_Flare {
    get {
      IntPtr cPtr = bridgePINVOKE.Optical_Flare_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Maelstrom {
    get {
      IntPtr cPtr = bridgePINVOKE.Maelstrom_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeNone {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypeNone_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeUnknown {
    get {
      IntPtr cPtr = bridgePINVOKE.WeaponTypeUnknown_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static void readMap() {
    bridgePINVOKE.readMap();
  }

  public static void analyze() {
    bridgePINVOKE.analyze();
  }

  public static SWIGTYPE_p_std__setT_Region_p_t getRegions() {
    SWIGTYPE_p_std__setT_Region_p_t ret = new SWIGTYPE_p_std__setT_Region_p_t(bridgePINVOKE.getRegions(), false);
    return ret;
  }

  public static SWIGTYPE_p_std__setT_Chokepoint_p_t getChokepoints() {
    SWIGTYPE_p_std__setT_Chokepoint_p_t ret = new SWIGTYPE_p_std__setT_Chokepoint_p_t(bridgePINVOKE.getChokepoints(), false);
    return ret;
  }

  public static SWIGTYPE_p_std__setT_BaseLocation_p_t getBaseLocations() {
    SWIGTYPE_p_std__setT_BaseLocation_p_t ret = new SWIGTYPE_p_std__setT_BaseLocation_p_t(bridgePINVOKE.getBaseLocations(), false);
    return ret;
  }

  public static SWIGTYPE_p_std__setT_BaseLocation_p_t getStartLocations() {
    SWIGTYPE_p_std__setT_BaseLocation_p_t ret = new SWIGTYPE_p_std__setT_BaseLocation_p_t(bridgePINVOKE.getStartLocations(), false);
    return ret;
  }

  public static SWIGTYPE_p_std__setT_Polygon_p_t getUnwalkablePolygons() {
    SWIGTYPE_p_std__setT_Polygon_p_t ret = new SWIGTYPE_p_std__setT_Polygon_p_t(bridgePINVOKE.getUnwalkablePolygons(), false);
    return ret;
  }

  public static SWIGTYPE_p_BaseLocation getStartLocation(Player player) {
    IntPtr cPtr = bridgePINVOKE.getStartLocation(Player.getCPtr(player));
    SWIGTYPE_p_BaseLocation ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_BaseLocation(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Region getRegion(int x, int y) {
    IntPtr cPtr = bridgePINVOKE.getRegion__SWIG_0(x, y);
    SWIGTYPE_p_Region ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_Region(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Region getRegion(TilePosition tileposition) {
    IntPtr cPtr = bridgePINVOKE.getRegion__SWIG_1(TilePosition.getCPtr(tileposition));
    SWIGTYPE_p_Region ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_Region(cPtr, false);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Chokepoint getNearestChokepoint(int x, int y) {
    IntPtr cPtr = bridgePINVOKE.getNearestChokepoint__SWIG_0(x, y);
    SWIGTYPE_p_Chokepoint ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_Chokepoint(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Chokepoint getNearestChokepoint(TilePosition tileposition) {
    IntPtr cPtr = bridgePINVOKE.getNearestChokepoint__SWIG_1(TilePosition.getCPtr(tileposition));
    SWIGTYPE_p_Chokepoint ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_Chokepoint(cPtr, false);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_BaseLocation getNearestBaseLocation(int x, int y) {
    IntPtr cPtr = bridgePINVOKE.getNearestBaseLocation__SWIG_0(x, y);
    SWIGTYPE_p_BaseLocation ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_BaseLocation(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_BaseLocation getNearestBaseLocation(TilePosition tileposition) {
    IntPtr cPtr = bridgePINVOKE.getNearestBaseLocation__SWIG_1(TilePosition.getCPtr(tileposition));
    SWIGTYPE_p_BaseLocation ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_BaseLocation(cPtr, false);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static SWIGTYPE_p_Polygon getNearestUnwalkablePolygon(int x, int y) {
    IntPtr cPtr = bridgePINVOKE.getNearestUnwalkablePolygon__SWIG_0(x, y);
    SWIGTYPE_p_Polygon ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_Polygon(cPtr, false);
    return ret;
  }

  public static SWIGTYPE_p_Polygon getNearestUnwalkablePolygon(TilePosition tileposition) {
    IntPtr cPtr = bridgePINVOKE.getNearestUnwalkablePolygon__SWIG_1(TilePosition.getCPtr(tileposition));
    SWIGTYPE_p_Polygon ret = (cPtr == IntPtr.Zero) ? null : new SWIGTYPE_p_Polygon(cPtr, false);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Position getNearestUnwalkablePosition(Position position) {
    Position ret = new Position(bridgePINVOKE.getNearestUnwalkablePosition(Position.getCPtr(position)), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isConnected(int x1, int y1, int x2, int y2) {
    bool ret = bridgePINVOKE.isConnected__SWIG_0(x1, y1, x2, y2);
    return ret;
  }

  public static bool isConnected(TilePosition a, TilePosition b) {
    bool ret = bridgePINVOKE.isConnected__SWIG_1(TilePosition.getCPtr(a), TilePosition.getCPtr(b));
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getGroundDistance(TilePosition start, TilePosition end) {
    double ret = bridgePINVOKE.getGroundDistance(TilePosition.getCPtr(start), TilePosition.getCPtr(end));
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TilePositionDoublePair getNearestTilePosition(TilePosition start, TilePositionSet targets) {
    TilePositionDoublePair ret = new TilePositionDoublePair(bridgePINVOKE.getNearestTilePosition(TilePosition.getCPtr(start), TilePositionSet.getCPtr(targets)), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TilePositionDoubleMap getGroundDistances(TilePosition start, TilePositionSet targets) {
    TilePositionDoubleMap ret = new TilePositionDoubleMap(bridgePINVOKE.getGroundDistances(TilePosition.getCPtr(start), TilePositionSet.getCPtr(targets)), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void getGroundDistanceMap(TilePosition start, RectangleArrayDouble distanceMap) {
    bridgePINVOKE.getGroundDistanceMap(TilePosition.getCPtr(start), RectangleArrayDouble.getCPtr(distanceMap));
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
  }

  public static TilePositionVector getShortestPath(TilePosition start, TilePosition end) {
    TilePositionVector ret = new TilePositionVector(bridgePINVOKE.getShortestPath__SWIG_0(TilePosition.getCPtr(start), TilePosition.getCPtr(end)), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TilePositionVector getShortestPath(TilePosition start, TilePositionSet targets) {
    TilePositionVector ret = new TilePositionVector(bridgePINVOKE.getShortestPath__SWIG_1(TilePosition.getCPtr(start), TilePositionSet.getCPtr(targets)), true);
    if (bridgePINVOKE.SWIGPendingException.Pending) throw bridgePINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static readonly int TILE_SIZE = bridgePINVOKE.TILE_SIZE_get();
  public static readonly int PYLON_X_RADIUS = bridgePINVOKE.PYLON_X_RADIUS_get();
  public static readonly int PYLON_Y_RADIUS = bridgePINVOKE.PYLON_Y_RADIUS_get();
}

}
