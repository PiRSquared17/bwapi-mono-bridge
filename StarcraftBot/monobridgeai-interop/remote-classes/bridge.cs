/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BWAPI {

using System;
using System.Runtime.InteropServices;

public class bridge {
  public static void BWAPI_init() {
    bridgePINVOKEProxy.remote.BWAPI_init();
  }

  public static Race getRace(string name) {
    Race ret = new Race(bridgePINVOKEProxy.remote.getRace(name), true);
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public static RaceSet allRaces() {
    RaceSet ret = new RaceSet(bridgePINVOKEProxy.remote.allRaces(), false);
    return ret;
  }

  public static void initRaces() {
    bridgePINVOKEProxy.remote.initRaces();
  }

  public static Race Zerg {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_get();
      Race ret = (cPtr == IntPtr.Zero) ? null : new Race(cPtr, false);
      return ret;
    } 
  }

  public static Race Terran {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_get();
      Race ret = (cPtr == IntPtr.Zero) ? null : new Race(cPtr, false);
      return ret;
    } 
  }

  public static Race Protoss {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_get();
      Race ret = (cPtr == IntPtr.Zero) ? null : new Race(cPtr, false);
      return ret;
    } 
  }

  public static Race Random {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Random_get();
      Race ret = (cPtr == IntPtr.Zero) ? null : new Race(cPtr, false);
      return ret;
    } 
  }

  public static Race Other {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Other_get();
      Race ret = (cPtr == IntPtr.Zero) ? null : new Race(cPtr, false);
      return ret;
    } 
  }

  public static Race RaceNone {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.RaceNone_get();
      Race ret = (cPtr == IntPtr.Zero) ? null : new Race(cPtr, false);
      return ret;
    } 
  }

  public static Race RaceUnknown {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.RaceUnknown_get();
      Race ret = (cPtr == IntPtr.Zero) ? null : new Race(cPtr, false);
      return ret;
    } 
  }

  public static TechType getTechType(string name) {
    TechType ret = new TechType(bridgePINVOKEProxy.remote.getTechType(name), true);
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TechTypeSet allTechTypes() {
    TechTypeSet ret = new TechTypeSet(bridgePINVOKEProxy.remote.allTechTypes(), false);
    return ret;
  }

  public static void initTechTypes() {
    bridgePINVOKEProxy.remote.initTechTypes();
  }

  public static TechType Stim_Packs {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Stim_Packs_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeLockdown {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TechTypeLockdown_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeEMP_Shockwave {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TechTypeEMP_Shockwave_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType Spider_Mines {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Spider_Mines_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType Scanner_Sweep {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Scanner_Sweep_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType Tank_Siege_Mode {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Tank_Siege_Mode_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType Defensive_Matrix {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Defensive_Matrix_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeIrradiate {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TechTypeIrradiate_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeYamato_Gun {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TechTypeYamato_Gun_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType Cloaking_Field {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Cloaking_Field_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType Personnel_Cloaking {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Personnel_Cloaking_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType Burrowing {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Burrowing_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType Infestation {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Infestation_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeSpawn_Broodlings {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TechTypeSpawn_Broodlings_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeDark_Swarm {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TechTypeDark_Swarm_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypePlague {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TechTypePlague_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeConsume {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TechTypeConsume_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeEnsnare {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TechTypeEnsnare_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeParasite {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TechTypeParasite_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypePsionic_Storm {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TechTypePsionic_Storm_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType Hallucination {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Hallucination_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType Recall {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Recall_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeStasis_Field {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TechTypeStasis_Field_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType Archon_Warp {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Archon_Warp_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeRestoration {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TechTypeRestoration_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeDisruption_Web {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TechTypeDisruption_Web_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeMind_Control {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TechTypeMind_Control_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType Dark_Archon_Meld {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Dark_Archon_Meld_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeFeedback {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TechTypeFeedback_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeOptical_Flare {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TechTypeOptical_Flare_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeMaelstrom {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TechTypeMaelstrom_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType Lurker_Aspect {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Lurker_Aspect_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType Healing {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Healing_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeNone {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TechTypeNone_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeUnknown {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TechTypeUnknown_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static TechType TechTypeNuclear_Strike {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TechTypeNuclear_Strike_get();
      TechType ret = (cPtr == IntPtr.Zero) ? null : new TechType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType getUpgradeType(string name) {
    UpgradeType ret = new UpgradeType(bridgePINVOKEProxy.remote.getUpgradeType(name), true);
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UpgradeTypeSet allUpgradeTypes() {
    UpgradeTypeSet ret = new UpgradeTypeSet(bridgePINVOKEProxy.remote.allUpgradeTypes(), false);
    return ret;
  }

  public static void initUpgradeTypes() {
    bridgePINVOKEProxy.remote.initUpgradeTypes();
  }

  public static UpgradeType Terran_Infantry_Armor {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Infantry_Armor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Terran_Vehicle_Plating {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Vehicle_Plating_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Terran_Ship_Plating {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Ship_Plating_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Zerg_Carapace {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Carapace_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Zerg_Flyer_Carapace {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Flyer_Carapace_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Protoss_Armor {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Armor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Protoss_Plating {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Plating_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Terran_Infantry_Weapons {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Infantry_Weapons_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Terran_Vehicle_Weapons {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Vehicle_Weapons_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Terran_Ship_Weapons {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Ship_Weapons_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Zerg_Melee_Attacks {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Melee_Attacks_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Zerg_Missile_Attacks {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Missile_Attacks_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Zerg_Flyer_Attacks {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Flyer_Attacks_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Protoss_Ground_Weapons {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Ground_Weapons_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Protoss_Air_Weapons {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Air_Weapons_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Protoss_Plasma_Shields {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Plasma_Shields_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType U_238_Shells {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.U_238_Shells_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Ion_Thrusters {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Ion_Thrusters_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Titan_Reactor {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Titan_Reactor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Ocular_Implants {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Ocular_Implants_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Moebius_Reactor {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Moebius_Reactor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Apollo_Reactor {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Apollo_Reactor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Colossus_Reactor {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Colossus_Reactor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Ventral_Sacs {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Ventral_Sacs_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Antennae {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Antennae_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Pneumatized_Carapace {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Pneumatized_Carapace_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Metabolic_Boost {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Metabolic_Boost_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Adrenal_Glands {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Adrenal_Glands_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Muscular_Augments {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Muscular_Augments_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Grooved_Spines {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Grooved_Spines_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Gamete_Meiosis {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Gamete_Meiosis_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Metasynaptic_Node {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Metasynaptic_Node_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Singularity_Charge {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Singularity_Charge_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Leg_Enhancements {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Leg_Enhancements_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Scarab_Damage {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Scarab_Damage_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Reaver_Capacity {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Reaver_Capacity_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Gravitic_Drive {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Gravitic_Drive_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Sensor_Array {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Sensor_Array_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Gravitic_Boosters {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Gravitic_Boosters_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Khaydarin_Amulet {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Khaydarin_Amulet_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Apial_Sensors {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Apial_Sensors_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Gravitic_Thrusters {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Gravitic_Thrusters_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Carrier_Capacity {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Carrier_Capacity_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Khaydarin_Core {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Khaydarin_Core_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Argus_Jewel {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Argus_Jewel_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Argus_Talisman {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Argus_Talisman_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Caduceus_Reactor {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Caduceus_Reactor_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Chitinous_Plating {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Chitinous_Plating_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Anabolic_Synthesis {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Anabolic_Synthesis_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType Charon_Booster {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Charon_Booster_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypeNone {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.UpgradeTypeNone_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static UpgradeType UpgradeTypeUnknown {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.UpgradeTypeUnknown_get();
      UpgradeType ret = (cPtr == IntPtr.Zero) ? null : new UpgradeType(cPtr, false);
      return ret;
    } 
  }

  public static Position PositionInvalid {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.PositionInvalid_get();
      Position ret = (cPtr == IntPtr.Zero) ? null : new Position(cPtr, false);
      return ret;
    } 
  }

  public static Position PositionNone {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.PositionNone_get();
      Position ret = (cPtr == IntPtr.Zero) ? null : new Position(cPtr, false);
      return ret;
    } 
  }

  public static Position PositionUnknown {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.PositionUnknown_get();
      Position ret = (cPtr == IntPtr.Zero) ? null : new Position(cPtr, false);
      return ret;
    } 
  }

  public static AttackType getAttackType(string name) {
    AttackType ret = new AttackType(bridgePINVOKEProxy.remote.getAttackType(name), true);
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public static AttackTypeSet allAttackTypes() {
    AttackTypeSet ret = new AttackTypeSet(bridgePINVOKEProxy.remote.allAttackTypes(), false);
    return ret;
  }

  public static void initAttackTypes() {
    bridgePINVOKEProxy.remote.initAttackTypes();
  }

  public static AttackType Melee {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Melee_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType Fusion_Cutter_Hit {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Fusion_Cutter_Hit_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType Gauss_Rifle_Hit {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Gauss_Rifle_Hit_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType C_10_Canister_Rifle_Hit {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.C_10_Canister_Rifle_Hit_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType AttackTypeGemeni_Missiles {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.AttackTypeGemeni_Missiles_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType AttackTypeFragmentation_Grenade {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.AttackTypeFragmentation_Grenade_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType AttackTypeLongbolt_Missile {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.AttackTypeLongbolt_Missile_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType ATS_ATA_Laser_Battery {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ATS_ATA_Laser_Battery_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType AttackTypeBurst_Lasers {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.AttackTypeBurst_Lasers_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType Arclite_Shock_Cannon_Hit {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Arclite_Shock_Cannon_Hit_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType EMP_Missile {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.EMP_Missile_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType Dual_Photon_Blasters_Hit {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Dual_Photon_Blasters_Hit_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType Particle_Beam_Hit {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Particle_Beam_Hit_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType Anti_Matter_Missile {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Anti_Matter_Missile_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType AttackTypePulse_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.AttackTypePulse_Cannon_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType Psionic_Shockwave_Hit {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Psionic_Shockwave_Hit_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType Psionic_Storm {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Psionic_Storm_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType AttackTypeYamato_Gun {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.AttackTypeYamato_Gun_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType AttackTypePhase_Disruptor {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.AttackTypePhase_Disruptor_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType STA_STS_Cannon_Overlay {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.STA_STS_Cannon_Overlay_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType Sunken_Colony_Tentacle {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Sunken_Colony_Tentacle_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType AttackTypeAcid_Spore {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.AttackTypeAcid_Spore_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType AttackTypeGlave_Wurm {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.AttackTypeGlave_Wurm_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType AttackTypeSeeker_Spores {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.AttackTypeSeeker_Spores_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType Queen_Spell_Carrier {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Queen_Spell_Carrier_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType Plague_Cloud {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Plague_Cloud_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType Consume {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Consume_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType Needle_Spine_Hit {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Needle_Spine_Hit_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType Invisible {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Invisible_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType Optical_Flare_Grenade {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Optical_Flare_Grenade_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType AttackTypeHalo_Rockets {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.AttackTypeHalo_Rockets_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType AttackTypeSubterranean_Spines {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.AttackTypeSubterranean_Spines_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType Corrosive_Acid_Shot {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Corrosive_Acid_Shot_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType Neutron_Flare {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Neutron_Flare_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType AttackTypeNone {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.AttackTypeNone_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static AttackType AttackTypeUnknown {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.AttackTypeUnknown_get();
      AttackType ret = (cPtr == IntPtr.Zero) ? null : new AttackType(cPtr, false);
      return ret;
    } 
  }

  public static void initColors() {
    bridgePINVOKEProxy.remote.initColors();
  }

  public static Color Red {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Red_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public static Color Green {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Green_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public static Color Blue {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Blue_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public static Color Yellow {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Yellow_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public static Color Cyan {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Cyan_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public static Color Purple {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Purple_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public static Color Orange {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Orange_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public static Color Black {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Black_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public static Color White {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.White_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public static Color Grey {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Grey_get();
      Color ret = (cPtr == IntPtr.Zero) ? null : new Color(cPtr, false);
      return ret;
    } 
  }

  public static int TILE_SIZE {
    get {
      int ret = bridgePINVOKEProxy.remote.TILE_SIZE_get();
      return ret;
    } 
  }

  public static int PYLON_X_RADIUS {
    get {
      int ret = bridgePINVOKEProxy.remote.PYLON_X_RADIUS_get();
      return ret;
    } 
  }

  public static int PYLON_Y_RADIUS {
    get {
      int ret = bridgePINVOKEProxy.remote.PYLON_Y_RADIUS_get();
      return ret;
    } 
  }

  public static DamageType getDamageType(string name) {
    DamageType ret = new DamageType(bridgePINVOKEProxy.remote.getDamageType(name), true);
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public static DamageTypeSet allDamageTypes() {
    DamageTypeSet ret = new DamageTypeSet(bridgePINVOKEProxy.remote.allDamageTypes(), false);
    return ret;
  }

  public static void initDamageTypes() {
    bridgePINVOKEProxy.remote.initDamageTypes();
  }

  public static DamageType DamageTypeIndependent {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.DamageTypeIndependent_get();
      DamageType ret = (cPtr == IntPtr.Zero) ? null : new DamageType(cPtr, false);
      return ret;
    } 
  }

  public static DamageType Explosive {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Explosive_get();
      DamageType ret = (cPtr == IntPtr.Zero) ? null : new DamageType(cPtr, false);
      return ret;
    } 
  }

  public static DamageType Concussive {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Concussive_get();
      DamageType ret = (cPtr == IntPtr.Zero) ? null : new DamageType(cPtr, false);
      return ret;
    } 
  }

  public static DamageType DamageTypeNormal {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.DamageTypeNormal_get();
      DamageType ret = (cPtr == IntPtr.Zero) ? null : new DamageType(cPtr, false);
      return ret;
    } 
  }

  public static DamageType Ignore_Armor {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Ignore_Armor_get();
      DamageType ret = (cPtr == IntPtr.Zero) ? null : new DamageType(cPtr, false);
      return ret;
    } 
  }

  public static DamageType DamageTypeNone {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.DamageTypeNone_get();
      DamageType ret = (cPtr == IntPtr.Zero) ? null : new DamageType(cPtr, false);
      return ret;
    } 
  }

  public static DamageType DamageTypeUnknown {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.DamageTypeUnknown_get();
      DamageType ret = (cPtr == IntPtr.Zero) ? null : new DamageType(cPtr, false);
      return ret;
    } 
  }

  public static Error getError(string name) {
    Error ret = new Error(bridgePINVOKEProxy.remote.getError(name), true);
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ErrorSet allErrors() {
    ErrorSet ret = new ErrorSet(bridgePINVOKEProxy.remote.allErrors(), false);
    return ret;
  }

  public static void initErrors() {
    bridgePINVOKEProxy.remote.initErrors();
  }

  public static Error Unit_Does_Not_Exist {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Unit_Does_Not_Exist_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Unit_Not_Visible {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Unit_Not_Visible_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Unit_Not_Owned {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Unit_Not_Owned_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Unit_Busy {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Unit_Busy_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Incompatible_UnitType {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Incompatible_UnitType_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Incompatible_TechType {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Incompatible_TechType_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Already_Researched {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Already_Researched_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Fully_Upgraded {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Fully_Upgraded_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Insufficient_Minerals {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Insufficient_Minerals_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Insufficient_Gas {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Insufficient_Gas_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Insufficient_Supply {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Insufficient_Supply_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Insufficient_Energy {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Insufficient_Energy_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Insufficient_Tech {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Insufficient_Tech_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Insufficient_Ammo {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Insufficient_Ammo_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Insufficient_Space {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Insufficient_Space_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Unbuildable_Location {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Unbuildable_Location_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Out_Of_Range {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Out_Of_Range_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Unable_To_Hit {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Unable_To_Hit_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error Access_Denied {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Access_Denied_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error ErrorNone {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ErrorNone_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static Error ErrorUnknown {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ErrorUnknown_get();
      Error ret = (cPtr == IntPtr.Zero) ? null : new Error(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType getExplosionType(string name) {
    ExplosionType ret = new ExplosionType(bridgePINVOKEProxy.remote.getExplosionType(name), true);
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public static ExplosionTypeSet allExplosionTypes() {
    ExplosionTypeSet ret = new ExplosionTypeSet(bridgePINVOKEProxy.remote.allExplosionTypes(), false);
    return ret;
  }

  public static void initExplosionTypes() {
    bridgePINVOKEProxy.remote.initExplosionTypes();
  }

  public static ExplosionType ExplosionTypeNone {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ExplosionTypeNone_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeNormal {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ExplosionTypeNormal_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType Radial_Splash {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Radial_Splash_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType Enemy_Splash {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Enemy_Splash_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeLockdown {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ExplosionTypeLockdown_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType Nuclear_Missile {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Nuclear_Missile_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeParasite {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ExplosionTypeParasite_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType Broodlings {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Broodlings_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeEMP_Shockwave {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ExplosionTypeEMP_Shockwave_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeIrradiate {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ExplosionTypeIrradiate_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeEnsnare {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ExplosionTypeEnsnare_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypePlague {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ExplosionTypePlague_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeStasis_Field {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ExplosionTypeStasis_Field_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeDark_Swarm {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ExplosionTypeDark_Swarm_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeConsume {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ExplosionTypeConsume_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeYamato_Gun {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ExplosionTypeYamato_Gun_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeRestoration {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ExplosionTypeRestoration_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeDisruption_Web {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ExplosionTypeDisruption_Web_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeCorrosive_Acid {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ExplosionTypeCorrosive_Acid_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeMind_Control {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ExplosionTypeMind_Control_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeFeedback {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ExplosionTypeFeedback_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeOptical_Flare {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ExplosionTypeOptical_Flare_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeMaelstrom {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ExplosionTypeMaelstrom_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType Air_Splash {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Air_Splash_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static ExplosionType ExplosionTypeUnknown {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ExplosionTypeUnknown_get();
      ExplosionType ret = (cPtr == IntPtr.Zero) ? null : new ExplosionType(cPtr, false);
      return ret;
    } 
  }

  public static int FLAG_COUNT {
    get {
      int ret = bridgePINVOKEProxy.remote.FLAG_COUNT_get();
      return ret;
    } 
  }

  public static Game Broodwar {
    set {
      bridgePINVOKEProxy.remote.Broodwar_set(Game.getCPtr(value));
    } 
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Broodwar_get();
      Game ret = (cPtr == IntPtr.Zero) ? null : new Game(cPtr, false);
      return ret;
    } 
  }

  public static Order getOrder(string name) {
    Order ret = new Order(bridgePINVOKEProxy.remote.getOrder(name), true);
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public static OrderSet allOrders() {
    OrderSet ret = new OrderSet(bridgePINVOKEProxy.remote.allOrders(), false);
    return ret;
  }

  public static void initOrders() {
    bridgePINVOKEProxy.remote.initOrders();
  }

  public static Order Die {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Die_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Stop {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Stop_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Guard {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Guard_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order PlayerGuard {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.PlayerGuard_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order TurretGuard {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TurretGuard_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order BunkerGuard {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.BunkerGuard_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Move {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Move_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ReaverStop {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ReaverStop_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Attack1 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Attack1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Attack2 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Attack2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order AttackUnit {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.AttackUnit_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order AttackFixedRange {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.AttackFixedRange_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order AttackTile {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.AttackTile_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Hover {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Hover_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order AttackMove {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.AttackMove_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order InfestMine1 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.InfestMine1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Nothing1 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Nothing1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Powerup1 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Powerup1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order TowerGuard {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TowerGuard_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order TowerAttack {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TowerAttack_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order VultureMine {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.VultureMine_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order StayinRange {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.StayinRange_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order TurretAttack {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TurretAttack_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Nothing2 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Nothing2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Nothing3 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Nothing3_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order DroneStartBuild {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.DroneStartBuild_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order DroneBuild {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.DroneBuild_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order InfestMine2 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.InfestMine2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order InfestMine3 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.InfestMine3_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order InfestMine4 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.InfestMine4_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order BuildTerran {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.BuildTerran_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order BuildProtoss1 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.BuildProtoss1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order BuildProtoss2 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.BuildProtoss2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ConstructingBuilding {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ConstructingBuilding_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Repair1 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Repair1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Repair2 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Repair2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order PlaceAddon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.PlaceAddon_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order BuildAddon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.BuildAddon_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Train {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Train_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order RallyPoint1 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.RallyPoint1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order RallyPoint2 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.RallyPoint2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ZergBirth {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ZergBirth_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Morph1 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Morph1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Morph2 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Morph2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order BuildSelf1 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.BuildSelf1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ZergBuildSelf {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ZergBuildSelf_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Build5 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Build5_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Enternyduscanal {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Enternyduscanal_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order BuildSelf2 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.BuildSelf2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Follow {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Follow_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Carrier {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Carrier_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CarrierIgnore1 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.CarrierIgnore1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CarrierStop {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.CarrierStop_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CarrierAttack1 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.CarrierAttack1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CarrierAttack2 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.CarrierAttack2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CarrierIgnore2 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.CarrierIgnore2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CarrierFight {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.CarrierFight_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order HoldPosition1 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.HoldPosition1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Reaver {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Reaver_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ReaverAttack1 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ReaverAttack1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ReaverAttack2 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ReaverAttack2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ReaverFight {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ReaverFight_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ReaverHold {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ReaverHold_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order TrainFighter {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TrainFighter_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order StrafeUnit1 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.StrafeUnit1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order StrafeUnit2 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.StrafeUnit2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order RechargeShields1 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.RechargeShields1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Rechargeshields2 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Rechargeshields2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ShieldBattery {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ShieldBattery_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Return {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Return_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order DroneLand {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.DroneLand_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order BuildingLand {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.BuildingLand_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order BuildingLiftoff {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.BuildingLiftoff_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order DroneLiftoff {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.DroneLiftoff_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Liftoff {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Liftoff_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ResearchTech {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ResearchTech_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Upgrade {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Upgrade_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Larva {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Larva_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order SpawningLarva {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.SpawningLarva_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Harvest1 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Harvest1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Harvest2 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Harvest2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order MoveToGas {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.MoveToGas_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order WaitForGas {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WaitForGas_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order HarvestGas {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.HarvestGas_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ReturnGas {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ReturnGas_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order MoveToMinerals {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.MoveToMinerals_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order WaitForMinerals {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WaitForMinerals_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order MiningMinerals {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.MiningMinerals_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Harvest3 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Harvest3_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Harvest4 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Harvest4_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ReturnMinerals {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ReturnMinerals_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Harvest5 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Harvest5_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order EnterTransport {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.EnterTransport_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Pickup1 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Pickup1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Pickup2 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Pickup2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Pickup3 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Pickup3_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Pickup4 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Pickup4_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Powerup2 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Powerup2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order SiegeMode {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.SiegeMode_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order TankMode {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TankMode_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order WatchTarget {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WatchTarget_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order InitCreepGrowth {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.InitCreepGrowth_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order SpreadCreep {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.SpreadCreep_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order StoppingCreepGrowth {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.StoppingCreepGrowth_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order GuardianAspect {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.GuardianAspect_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order WarpingArchon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WarpingArchon_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CompletingArchonsummon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.CompletingArchonsummon_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order HoldPosition2 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.HoldPosition2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order HoldPosition3 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.HoldPosition3_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Cloak {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Cloak_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Decloak {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Decloak_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Unload {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Unload_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order MoveUnload {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.MoveUnload_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order FireYamatoGun1 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.FireYamatoGun1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order FireYamatoGun2 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.FireYamatoGun2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order MagnaPulse {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.MagnaPulse_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Burrow {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Burrow_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Burrowed {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Burrowed_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Unburrow {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Unburrow_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order DarkSwarm {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.DarkSwarm_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastParasite {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.CastParasite_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order SummonBroodlings {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.SummonBroodlings_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order EmpShockwave {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.EmpShockwave_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order NukeWait {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.NukeWait_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order NukeTrain {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.NukeTrain_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order NukeLaunch {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.NukeLaunch_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order NukePaint {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.NukePaint_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order NukeUnit {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.NukeUnit_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order NukeGround {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.NukeGround_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order NukeTrack {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.NukeTrack_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order InitArbiter {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.InitArbiter_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CloakNearbyUnits {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.CloakNearbyUnits_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order PlaceMine {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.PlaceMine_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Rightclickaction {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Rightclickaction_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order SapUnit {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.SapUnit_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order SapLocation {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.SapLocation_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order HoldPosition4 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.HoldPosition4_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Teleport {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Teleport_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order TeleporttoLocation {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TeleporttoLocation_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order PlaceScanner {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.PlaceScanner_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Scanner {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Scanner_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order DefensiveMatrix {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.DefensiveMatrix_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order PsiStorm {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.PsiStorm_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order OrderIrradiate {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.OrderIrradiate_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order OrderPlague {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.OrderPlague_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order OrderConsume {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.OrderConsume_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order OrderEnsnare {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.OrderEnsnare_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order StasisField {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.StasisField_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Hallucination1 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Hallucination1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Hallucination2 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Hallucination2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ResetCollision1 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ResetCollision1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ResetCollision2 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ResetCollision2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Patrol {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Patrol_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CTFCOPInit {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.CTFCOPInit_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CTFCOP1 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.CTFCOP1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CTFCOP2 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.CTFCOP2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ComputerAI {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ComputerAI_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order AtkMoveEP {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.AtkMoveEP_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order HarassMove {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.HarassMove_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order AIPatrol {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.AIPatrol_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order GuardPost {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.GuardPost_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order RescuePassive {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.RescuePassive_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order OrderNeutral {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.OrderNeutral_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order ComputerReturn {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ComputerReturn_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order InitPsiProvider {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.InitPsiProvider_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order SelfDestrucing {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.SelfDestrucing_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Critter {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Critter_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order HiddenGun {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.HiddenGun_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order OpenDoor {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.OpenDoor_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CloseDoor {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.CloseDoor_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order HideTrap {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.HideTrap_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order RevealTrap {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.RevealTrap_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Enabledoodad {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Enabledoodad_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Disabledoodad {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Disabledoodad_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Warpin {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Warpin_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Medic {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Medic_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order MedicHeal1 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.MedicHeal1_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order HealMove {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.HealMove_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order MedicHoldPosition {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.MedicHoldPosition_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order MedicHeal2 {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.MedicHeal2_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order OrderRestoration {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.OrderRestoration_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastDisruptionWeb {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.CastDisruptionWeb_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastMindControl {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.CastMindControl_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order WarpingDarkArchon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WarpingDarkArchon_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastFeedback {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.CastFeedback_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastOpticalFlare {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.CastOpticalFlare_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order CastMaelstrom {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.CastMaelstrom_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order JunkYardDog {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.JunkYardDog_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order Fatal {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Fatal_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order OrderNone {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.OrderNone_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static Order OrderUnknown {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.OrderUnknown_get();
      Order ret = (cPtr == IntPtr.Zero) ? null : new Order(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType getPlayerType(string name) {
    PlayerType ret = new PlayerType(bridgePINVOKEProxy.remote.getPlayerType(name), true);
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public static PlayerTypeSet allPlayerTypes() {
    PlayerTypeSet ret = new PlayerTypeSet(bridgePINVOKEProxy.remote.allPlayerTypes(), false);
    return ret;
  }

  public static void initPlayerTypes() {
    bridgePINVOKEProxy.remote.initPlayerTypes();
  }

  public static PlayerType NotUsed {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.NotUsed_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType Computer {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Computer_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType Human {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Human_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType Rescuable {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Rescuable_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType ComputerSlot {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ComputerSlot_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType OpenSlot {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.OpenSlot_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypeNeutral {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.PlayerTypeNeutral_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType ClosedSlot {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ClosedSlot_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType HumanDefeated {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.HumanDefeated_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType ComputerDefeated {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ComputerDefeated_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypeNone {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.PlayerTypeNone_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static PlayerType PlayerTypeUnknown {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.PlayerTypeUnknown_get();
      PlayerType ret = (cPtr == IntPtr.Zero) ? null : new PlayerType(cPtr, false);
      return ret;
    } 
  }

  public static TilePosition TilePositionInvalid {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TilePositionInvalid_get();
      TilePosition ret = (cPtr == IntPtr.Zero) ? null : new TilePosition(cPtr, false);
      return ret;
    } 
  }

  public static TilePosition TilePositionNone {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TilePositionNone_get();
      TilePosition ret = (cPtr == IntPtr.Zero) ? null : new TilePosition(cPtr, false);
      return ret;
    } 
  }

  public static TilePosition TilePositionUnknown {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.TilePositionUnknown_get();
      TilePosition ret = (cPtr == IntPtr.Zero) ? null : new TilePosition(cPtr, false);
      return ret;
    } 
  }

  public static UnitSizeType getUnitSizeType(string name) {
    UnitSizeType ret = new UnitSizeType(bridgePINVOKEProxy.remote.getUnitSizeType(name), true);
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UnitSizeTypeSet allUnitSizeTypes() {
    UnitSizeTypeSet ret = new UnitSizeTypeSet(bridgePINVOKEProxy.remote.allUnitSizeTypes(), false);
    return ret;
  }

  public static void initUnitSizeTypes() {
    bridgePINVOKEProxy.remote.initUnitSizeTypes();
  }

  public static UnitSizeType UnitSizeTypeIndependent {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.UnitSizeTypeIndependent_get();
      UnitSizeType ret = (cPtr == IntPtr.Zero) ? null : new UnitSizeType(cPtr, false);
      return ret;
    } 
  }

  public static UnitSizeType Small {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Small_get();
      UnitSizeType ret = (cPtr == IntPtr.Zero) ? null : new UnitSizeType(cPtr, false);
      return ret;
    } 
  }

  public static UnitSizeType Medium {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Medium_get();
      UnitSizeType ret = (cPtr == IntPtr.Zero) ? null : new UnitSizeType(cPtr, false);
      return ret;
    } 
  }

  public static UnitSizeType Large {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Large_get();
      UnitSizeType ret = (cPtr == IntPtr.Zero) ? null : new UnitSizeType(cPtr, false);
      return ret;
    } 
  }

  public static UnitSizeType UnitSizeTypeNone {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.UnitSizeTypeNone_get();
      UnitSizeType ret = (cPtr == IntPtr.Zero) ? null : new UnitSizeType(cPtr, false);
      return ret;
    } 
  }

  public static UnitSizeType UnitSizeTypeUnknown {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.UnitSizeTypeUnknown_get();
      UnitSizeType ret = (cPtr == IntPtr.Zero) ? null : new UnitSizeType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType getUnitType(string name) {
    UnitType ret = new UnitType(bridgePINVOKEProxy.remote.getUnitType(name), true);
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public static UnitTypeSet allUnitTypes() {
    UnitTypeSet ret = new UnitTypeSet(bridgePINVOKEProxy.remote.allUnitTypes(), false);
    return ret;
  }

  public static void initUnitTypes() {
    bridgePINVOKEProxy.remote.initUnitTypes();
  }

  public static UnitType Terran_Marine {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Marine_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Ghost {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Ghost_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Vulture {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Vulture_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Goliath {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Goliath_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Siege_Tank_Tank_Mode {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Siege_Tank_Tank_Mode_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_SCV {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_SCV_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Wraith {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Wraith_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Science_Vessel {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Science_Vessel_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Dropship {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Dropship_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Battlecruiser {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Battlecruiser_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Vulture_Spider_Mine {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Vulture_Spider_Mine_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Nuclear_Missile {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Nuclear_Missile_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Siege_Tank_Siege_Mode {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Siege_Tank_Siege_Mode_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Firebat {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Firebat_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Spell_Scanner_Sweep {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Spell_Scanner_Sweep_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Medic {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Medic_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Larva {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Larva_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Egg {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Egg_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Zergling {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Zergling_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Hydralisk {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Hydralisk_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Ultralisk {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Ultralisk_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Broodling {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Broodling_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Drone {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Drone_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Overlord {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Overlord_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Mutalisk {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Mutalisk_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Guardian {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Guardian_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Queen {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Queen_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Defiler {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Defiler_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Scourge {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Scourge_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Infested_Terran {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Infested_Terran_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Valkyrie {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Valkyrie_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Cocoon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Cocoon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Corsair {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Corsair_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Dark_Templar {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Dark_Templar_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Devourer {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Devourer_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Dark_Archon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Dark_Archon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Probe {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Probe_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Zealot {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Zealot_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Dragoon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Dragoon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_High_Templar {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_High_Templar_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Archon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Archon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Shuttle {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Shuttle_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Scout {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Scout_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Arbiter {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Arbiter_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Carrier {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Carrier_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Interceptor {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Interceptor_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Reaver {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Reaver_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Observer {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Observer_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Scarab {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Scarab_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Critter_Rhynadon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Critter_Rhynadon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Critter_Bengalaas {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Critter_Bengalaas_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Critter_Scantid {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Critter_Scantid_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Critter_Kakaru {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Critter_Kakaru_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Critter_Ragnasaur {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Critter_Ragnasaur_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Critter_Ursadon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Critter_Ursadon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Lurker_Egg {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Lurker_Egg_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Lurker {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Lurker_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Spell_Disruption_Web {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Spell_Disruption_Web_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Command_Center {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Command_Center_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Comsat_Station {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Comsat_Station_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Nuclear_Silo {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Nuclear_Silo_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Supply_Depot {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Supply_Depot_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Refinery {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Refinery_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Barracks {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Barracks_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Academy {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Academy_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Factory {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Factory_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Starport {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Starport_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Control_Tower {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Control_Tower_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Science_Facility {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Science_Facility_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Covert_Ops {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Covert_Ops_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Physics_Lab {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Physics_Lab_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Machine_Shop {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Machine_Shop_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Engineering_Bay {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Engineering_Bay_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Armory {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Armory_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Missile_Turret {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Missile_Turret_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Terran_Bunker {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Terran_Bunker_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Crashed_Norad_II {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Special_Crashed_Norad_II_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Ion_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Special_Ion_Cannon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Infested_Command_Center {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Infested_Command_Center_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Hatchery {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Hatchery_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Lair {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Lair_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Hive {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Hive_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Nydus_Canal {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Nydus_Canal_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Hydralisk_Den {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Hydralisk_Den_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Defiler_Mound {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Defiler_Mound_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Greater_Spire {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Greater_Spire_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Queens_Nest {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Queens_Nest_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Evolution_Chamber {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Evolution_Chamber_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Ultralisk_Cavern {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Ultralisk_Cavern_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Spire {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Spire_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Spawning_Pool {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Spawning_Pool_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Creep_Colony {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Creep_Colony_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Spore_Colony {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Spore_Colony_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Sunken_Colony {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Sunken_Colony_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Overmind_With_Shell {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Special_Overmind_With_Shell_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Overmind {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Special_Overmind_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Zerg_Extractor {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Zerg_Extractor_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Mature_Chrysalis {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Special_Mature_Chrysalis_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Cerebrate {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Special_Cerebrate_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Cerebrate_Daggoth {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Special_Cerebrate_Daggoth_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Nexus {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Nexus_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Robotics_Facility {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Robotics_Facility_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Pylon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Pylon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Assimilator {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Assimilator_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Observatory {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Observatory_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Gateway {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Gateway_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Photon_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Photon_Cannon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Citadel_of_Adun {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Citadel_of_Adun_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Cybernetics_Core {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Cybernetics_Core_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Templar_Archives {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Templar_Archives_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Forge {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Forge_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Stargate {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Stargate_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Stasis_Cell_Prison {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Special_Stasis_Cell_Prison_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Fleet_Beacon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Fleet_Beacon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Arbiter_Tribunal {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Arbiter_Tribunal_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Robotics_Support_Bay {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Robotics_Support_Bay_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Protoss_Shield_Battery {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Protoss_Shield_Battery_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Khaydarin_Crystal_Form {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Special_Khaydarin_Crystal_Form_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Protoss_Temple {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Special_Protoss_Temple_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_XelNaga_Temple {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Special_XelNaga_Temple_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Resource_Mineral_Field {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Resource_Mineral_Field_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Resource_Vespene_Geyser {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Resource_Vespene_Geyser_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Warp_Gate {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Special_Warp_Gate_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Psi_Disrupter {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Special_Psi_Disrupter_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Power_Generator {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Special_Power_Generator_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Special_Overmind_Cocoon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Special_Overmind_Cocoon_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType Spell_Dark_Swarm {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Spell_Dark_Swarm_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypeNone {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.UnitTypeNone_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static UnitType UnitTypeUnknown {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.UnitTypeUnknown_get();
      UnitType ret = (cPtr == IntPtr.Zero) ? null : new UnitType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType getWeaponType(string name) {
    WeaponType ret = new WeaponType(bridgePINVOKEProxy.remote.getWeaponType(name), true);
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public static WeaponTypeSet allWeaponTypes() {
    WeaponTypeSet ret = new WeaponTypeSet(bridgePINVOKEProxy.remote.allWeaponTypes(), false);
    return ret;
  }

  public static WeaponTypeSet normalWeaponTypes() {
    WeaponTypeSet ret = new WeaponTypeSet(bridgePINVOKEProxy.remote.normalWeaponTypes(), false);
    return ret;
  }

  public static WeaponTypeSet specialWeaponTypes() {
    WeaponTypeSet ret = new WeaponTypeSet(bridgePINVOKEProxy.remote.specialWeaponTypes(), false);
    return ret;
  }

  public static void initWeaponTypes() {
    bridgePINVOKEProxy.remote.initWeaponTypes();
  }

  public static WeaponType Gauss_Rifle {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Gauss_Rifle_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType C_10_Canister_Rifle {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.C_10_Canister_Rifle_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeFragmentation_Grenade {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypeFragmentation_Grenade_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeSpider_Mines {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypeSpider_Mines_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Twin_Autocannons {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Twin_Autocannons_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Hellfire_Missile_Pack {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Hellfire_Missile_Pack_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Arclite_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Arclite_Cannon_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Fusion_Cutter {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Fusion_Cutter_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeGemini_Missiles {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypeGemini_Missiles_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeBurst_Lasers {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypeBurst_Lasers_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType ATS_Laser_Battery {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ATS_Laser_Battery_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType ATA_Laser_Battery {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.ATA_Laser_Battery_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Flame_Thrower {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Flame_Thrower_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Arclite_Shock_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Arclite_Shock_Cannon_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeLongbolt_Missile {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypeLongbolt_Missile_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Claws {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Claws_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Needle_Spines {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Needle_Spines_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Kaiser_Blades {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Kaiser_Blades_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Toxic_Spores {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Toxic_Spores_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Spines {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Spines_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeAcid_Spore {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypeAcid_Spore_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeGlave_Wurm {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypeGlave_Wurm_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeSeeker_Spores {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypeSeeker_Spores_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Subterranean_Tentacle {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Subterranean_Tentacle_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Suicide_Infested_Terran {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Suicide_Infested_Terran_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Suicide_Scourge {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Suicide_Scourge_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Particle_Beam {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Particle_Beam_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Psi_Blades {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Psi_Blades_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypePhase_Disruptor {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypePhase_Disruptor_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Psionic_Shockwave {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Psionic_Shockwave_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Dual_Photon_Blasters {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Dual_Photon_Blasters_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Anti_Matter_Missiles {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Anti_Matter_Missiles_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Phase_Disruptor_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Phase_Disruptor_Cannon_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypePulse_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypePulse_Cannon_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType STS_Photon_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.STS_Photon_Cannon_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType STA_Photon_Cannon {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.STA_Photon_Cannon_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Scarab {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Scarab_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeNeutron_Flare {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypeNeutron_Flare_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeHalo_Rockets {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypeHalo_Rockets_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeCorrosive_Acid {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypeCorrosive_Acid_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeSubterranean_Spines {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypeSubterranean_Spines_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Warp_Blades {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Warp_Blades_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeYamato_Gun {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypeYamato_Gun_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeNuclear_Strike {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypeNuclear_Strike_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Lockdown {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Lockdown_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType EMP_Shockwave {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.EMP_Shockwave_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeIrradiate {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypeIrradiate_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Parasite {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Parasite_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Spawn_Broodlings {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Spawn_Broodlings_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeEnsnare {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypeEnsnare_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Dark_Swarm {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Dark_Swarm_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypePlague {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypePlague_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeConsume {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypeConsume_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Stasis_Field {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Stasis_Field_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypePsionic_Storm {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypePsionic_Storm_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Disruption_Web {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Disruption_Web_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeRestoration {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypeRestoration_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeMind_Control {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypeMind_Control_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Feedback {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Feedback_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Optical_Flare {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Optical_Flare_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType Maelstrom {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.Maelstrom_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeNone {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypeNone_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static WeaponType WeaponTypeUnknown {
    get {
      IntPtr cPtr = bridgePINVOKEProxy.remote.WeaponTypeUnknown_get();
      WeaponType ret = (cPtr == IntPtr.Zero) ? null : new WeaponType(cPtr, false);
      return ret;
    } 
  }

  public static void readMap() {
    bridgePINVOKEProxy.remote.readMap();
  }

  public static void analyze() {
    bridgePINVOKEProxy.remote.analyze();
  }

  public static RegionPtrSet getRegions() {
    RegionPtrSet ret = new RegionPtrSet(bridgePINVOKEProxy.remote.getRegions(), false);
    return ret;
  }

  public static ChokepointPtrSet getChokepoints() {
    ChokepointPtrSet ret = new ChokepointPtrSet(bridgePINVOKEProxy.remote.getChokepoints(), false);
    return ret;
  }

  public static BaseLocationPtrSet getBaseLocations() {
    BaseLocationPtrSet ret = new BaseLocationPtrSet(bridgePINVOKEProxy.remote.getBaseLocations(), false);
    return ret;
  }

  public static BaseLocationPtrSet getStartLocations() {
    BaseLocationPtrSet ret = new BaseLocationPtrSet(bridgePINVOKEProxy.remote.getStartLocations(), false);
    return ret;
  }

  public static PolygonPtrSet getUnwalkablePolygons() {
    PolygonPtrSet ret = new PolygonPtrSet(bridgePINVOKEProxy.remote.getUnwalkablePolygons(), false);
    return ret;
  }

  public static BaseLocation getStartLocation(Player player) {
    IntPtr cPtr = bridgePINVOKEProxy.remote.getStartLocation(Player.getCPtr(player));
    BaseLocation ret = (cPtr == IntPtr.Zero) ? null : new BaseLocation(cPtr, false);
    return ret;
  }

  public static Region getRegion(int x, int y) {
    IntPtr cPtr = bridgePINVOKEProxy.remote.getRegion__SWIG_0(x, y);
    Region ret = (cPtr == IntPtr.Zero) ? null : new Region(cPtr, false);
    return ret;
  }

  public static Region getRegion(TilePosition tileposition) {
    IntPtr cPtr = bridgePINVOKEProxy.remote.getRegion__SWIG_1(TilePosition.getCPtr(tileposition));
    Region ret = (cPtr == IntPtr.Zero) ? null : new Region(cPtr, false);
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Chokepoint getNearestChokepoint(int x, int y) {
    IntPtr cPtr = bridgePINVOKEProxy.remote.getNearestChokepoint__SWIG_0(x, y);
    Chokepoint ret = (cPtr == IntPtr.Zero) ? null : new Chokepoint(cPtr, false);
    return ret;
  }

  public static Chokepoint getNearestChokepoint(TilePosition tileposition) {
    IntPtr cPtr = bridgePINVOKEProxy.remote.getNearestChokepoint__SWIG_1(TilePosition.getCPtr(tileposition));
    Chokepoint ret = (cPtr == IntPtr.Zero) ? null : new Chokepoint(cPtr, false);
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public static BaseLocation getNearestBaseLocation(int x, int y) {
    IntPtr cPtr = bridgePINVOKEProxy.remote.getNearestBaseLocation__SWIG_0(x, y);
    BaseLocation ret = (cPtr == IntPtr.Zero) ? null : new BaseLocation(cPtr, false);
    return ret;
  }

  public static BaseLocation getNearestBaseLocation(TilePosition tileposition) {
    IntPtr cPtr = bridgePINVOKEProxy.remote.getNearestBaseLocation__SWIG_1(TilePosition.getCPtr(tileposition));
    BaseLocation ret = (cPtr == IntPtr.Zero) ? null : new BaseLocation(cPtr, false);
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Polygon getNearestUnwalkablePolygon(int x, int y) {
    IntPtr cPtr = bridgePINVOKEProxy.remote.getNearestUnwalkablePolygon__SWIG_0(x, y);
    Polygon ret = (cPtr == IntPtr.Zero) ? null : new Polygon(cPtr, false);
    return ret;
  }

  public static Polygon getNearestUnwalkablePolygon(TilePosition tileposition) {
    IntPtr cPtr = bridgePINVOKEProxy.remote.getNearestUnwalkablePolygon__SWIG_1(TilePosition.getCPtr(tileposition));
    Polygon ret = (cPtr == IntPtr.Zero) ? null : new Polygon(cPtr, false);
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public static Position getNearestUnwalkablePosition(Position position) {
    Position ret = new Position(bridgePINVOKEProxy.remote.getNearestUnwalkablePosition(Position.getCPtr(position)), true);
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public static bool isConnected(int x1, int y1, int x2, int y2) {
    bool ret = bridgePINVOKEProxy.remote.isConnected__SWIG_0(x1, y1, x2, y2);
    return ret;
  }

  public static bool isConnected(TilePosition a, TilePosition b) {
    bool ret = bridgePINVOKEProxy.remote.isConnected__SWIG_1(TilePosition.getCPtr(a), TilePosition.getCPtr(b));
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public static double getGroundDistance(TilePosition start, TilePosition end) {
    double ret = bridgePINVOKEProxy.remote.getGroundDistance(TilePosition.getCPtr(start), TilePosition.getCPtr(end));
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TilePositionDoublePair getNearestTilePosition(TilePosition start, TilePositionSet targets) {
    TilePositionDoublePair ret = new TilePositionDoublePair(bridgePINVOKEProxy.remote.getNearestTilePosition(TilePosition.getCPtr(start), TilePositionSet.getCPtr(targets)), true);
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TilePositionDoubleMap getGroundDistances(TilePosition start, TilePositionSet targets) {
    TilePositionDoubleMap ret = new TilePositionDoubleMap(bridgePINVOKEProxy.remote.getGroundDistances(TilePosition.getCPtr(start), TilePositionSet.getCPtr(targets)), true);
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void getGroundDistanceMap(TilePosition start, RectangleArrayDouble distanceMap) {
    bridgePINVOKEProxy.remote.getGroundDistanceMap(TilePosition.getCPtr(start), RectangleArrayDouble.getCPtr(distanceMap));
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
  }

  public static TilePositionVector getShortestPath(TilePosition start, TilePosition end) {
    TilePositionVector ret = new TilePositionVector(bridgePINVOKEProxy.remote.getShortestPath__SWIG_0(TilePosition.getCPtr(start), TilePosition.getCPtr(end)), true);
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public static TilePositionVector getShortestPath(TilePosition start, TilePositionSet targets) {
    TilePositionVector ret = new TilePositionVector(bridgePINVOKEProxy.remote.getShortestPath__SWIG_1(TilePosition.getCPtr(start), TilePositionSet.getCPtr(targets)), true);
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
