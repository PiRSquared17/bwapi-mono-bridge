/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class Chokepoint : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Chokepoint(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Chokepoint obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Chokepoint() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          bridgePINVOKE.delete_Chokepoint(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public virtual ChokepointGetRegionsPair getRegions() {
    ChokepointGetRegionsPair ret = new ChokepointGetRegionsPair(bridgePINVOKE.Chokepoint_getRegions(swigCPtr), false);
    return ret;
  }

  public virtual ChokepointGetSidesPair getSides() {
    ChokepointGetSidesPair ret = new ChokepointGetSidesPair(bridgePINVOKE.Chokepoint_getSides(swigCPtr), false);
    return ret;
  }

  public virtual Position getCenter() {
    Position ret = new Position(bridgePINVOKE.Chokepoint_getCenter(swigCPtr), true);
    return ret;
  }

  public virtual double getWidth() {
    double ret = bridgePINVOKE.Chokepoint_getWidth(swigCPtr);
    return ret;
  }

}
