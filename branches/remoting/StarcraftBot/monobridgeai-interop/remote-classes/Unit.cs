/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

namespace BWAPI {

using System;
using System.Runtime.InteropServices;

public partial class Unit : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal Unit(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(Unit obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~Unit() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          bridgePINVOKEProxy.remote.delete_Unit(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  
public override int GetHashCode()
{
   return this.swigCPtr.Handle.GetHashCode();
}

public override bool Equals(object obj)
{
    bool equal = false;
    if (obj is Unit)
      equal = (((Unit)obj).swigCPtr.Handle == this.swigCPtr.Handle);
    return equal;
}
  
public bool Equals(Unit obj) 
{
    if (obj == null) return false;
    return (obj.swigCPtr.Handle == this.swigCPtr.Handle);
}

public static bool operator ==(Unit obj1, Unit obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return true;
    if (object.ReferenceEquals(obj1, null)) return false;
    if (object.ReferenceEquals(obj2, null)) return false;
   
    return obj1.Equals(obj2);
}

public static bool operator !=(Unit obj1, Unit obj2)
{
    if (object.ReferenceEquals(obj1, obj2)) return false;
    if (object.ReferenceEquals(obj1, null)) return true;
    if (object.ReferenceEquals(obj2, null)) return true;

    return !obj1.Equals(obj2);
}




  public virtual int getID() {
    int ret = bridgePINVOKEProxy.remote.Unit_getID(swigCPtr);
    return ret;
  }

  public virtual Player getPlayer() {
    IntPtr cPtr = bridgePINVOKEProxy.remote.Unit_getPlayer(swigCPtr);
    Player ret = (cPtr == IntPtr.Zero) ? null : new Player(cPtr, false);
    return ret;
  }

  public virtual UnitType getType() {
    UnitType ret = new UnitType(bridgePINVOKEProxy.remote.Unit_getType(swigCPtr), true);
    return ret;
  }

  public virtual UnitType getInitialType() {
    UnitType ret = new UnitType(bridgePINVOKEProxy.remote.Unit_getInitialType(swigCPtr), true);
    return ret;
  }

  public virtual int getHitPoints() {
    int ret = bridgePINVOKEProxy.remote.Unit_getHitPoints(swigCPtr);
    return ret;
  }

  public virtual int getInitialHitPoints() {
    int ret = bridgePINVOKEProxy.remote.Unit_getInitialHitPoints(swigCPtr);
    return ret;
  }

  public virtual int getShields() {
    int ret = bridgePINVOKEProxy.remote.Unit_getShields(swigCPtr);
    return ret;
  }

  public virtual int getEnergy() {
    int ret = bridgePINVOKEProxy.remote.Unit_getEnergy(swigCPtr);
    return ret;
  }

  public virtual int getResources() {
    int ret = bridgePINVOKEProxy.remote.Unit_getResources(swigCPtr);
    return ret;
  }

  public virtual int getInitialResources() {
    int ret = bridgePINVOKEProxy.remote.Unit_getInitialResources(swigCPtr);
    return ret;
  }

  public virtual int getKillCount() {
    int ret = bridgePINVOKEProxy.remote.Unit_getKillCount(swigCPtr);
    return ret;
  }

  public virtual int getGroundWeaponCooldown() {
    int ret = bridgePINVOKEProxy.remote.Unit_getGroundWeaponCooldown(swigCPtr);
    return ret;
  }

  public virtual int getAirWeaponCooldown() {
    int ret = bridgePINVOKEProxy.remote.Unit_getAirWeaponCooldown(swigCPtr);
    return ret;
  }

  public virtual int getSpellCooldown() {
    int ret = bridgePINVOKEProxy.remote.Unit_getSpellCooldown(swigCPtr);
    return ret;
  }

  public virtual int getDefenseMatrixPoints() {
    int ret = bridgePINVOKEProxy.remote.Unit_getDefenseMatrixPoints(swigCPtr);
    return ret;
  }

  public virtual int getDefenseMatrixTimer() {
    int ret = bridgePINVOKEProxy.remote.Unit_getDefenseMatrixTimer(swigCPtr);
    return ret;
  }

  public virtual int getEnsnareTimer() {
    int ret = bridgePINVOKEProxy.remote.Unit_getEnsnareTimer(swigCPtr);
    return ret;
  }

  public virtual int getIrradiateTimer() {
    int ret = bridgePINVOKEProxy.remote.Unit_getIrradiateTimer(swigCPtr);
    return ret;
  }

  public virtual int getLockdownTimer() {
    int ret = bridgePINVOKEProxy.remote.Unit_getLockdownTimer(swigCPtr);
    return ret;
  }

  public virtual int getMaelstromTimer() {
    int ret = bridgePINVOKEProxy.remote.Unit_getMaelstromTimer(swigCPtr);
    return ret;
  }

  public virtual int getPlagueTimer() {
    int ret = bridgePINVOKEProxy.remote.Unit_getPlagueTimer(swigCPtr);
    return ret;
  }

  public virtual int getRemoveTimer() {
    int ret = bridgePINVOKEProxy.remote.Unit_getRemoveTimer(swigCPtr);
    return ret;
  }

  public virtual int getStasisTimer() {
    int ret = bridgePINVOKEProxy.remote.Unit_getStasisTimer(swigCPtr);
    return ret;
  }

  public virtual int getStimTimer() {
    int ret = bridgePINVOKEProxy.remote.Unit_getStimTimer(swigCPtr);
    return ret;
  }

  public virtual Position getPosition() {
    Position ret = new Position(bridgePINVOKEProxy.remote.Unit_getPosition(swigCPtr), true);
    return ret;
  }

  public virtual Position getInitialPosition() {
    Position ret = new Position(bridgePINVOKEProxy.remote.Unit_getInitialPosition(swigCPtr), true);
    return ret;
  }

  public virtual TilePosition getTilePosition() {
    TilePosition ret = new TilePosition(bridgePINVOKEProxy.remote.Unit_getTilePosition(swigCPtr), true);
    return ret;
  }

  public virtual TilePosition getInitialTilePosition() {
    TilePosition ret = new TilePosition(bridgePINVOKEProxy.remote.Unit_getInitialTilePosition(swigCPtr), true);
    return ret;
  }

  public virtual double getDistance(Unit target) {
    double ret = bridgePINVOKEProxy.remote.Unit_getDistance__SWIG_0(swigCPtr, Unit.getCPtr(target));
    return ret;
  }

  public virtual double getDistance(Position target) {
    double ret = bridgePINVOKEProxy.remote.Unit_getDistance__SWIG_1(swigCPtr, Position.getCPtr(target));
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual double getAngle() {
    double ret = bridgePINVOKEProxy.remote.Unit_getAngle(swigCPtr);
    return ret;
  }

  public virtual double getVelocityX() {
    double ret = bridgePINVOKEProxy.remote.Unit_getVelocityX(swigCPtr);
    return ret;
  }

  public virtual double getVelocityY() {
    double ret = bridgePINVOKEProxy.remote.Unit_getVelocityY(swigCPtr);
    return ret;
  }

  public virtual Unit getTarget() {
    IntPtr cPtr = bridgePINVOKEProxy.remote.Unit_getTarget(swigCPtr);
    Unit ret = (cPtr == IntPtr.Zero) ? null : new Unit(cPtr, false);
    return ret;
  }

  public virtual Position getTargetPosition() {
    Position ret = new Position(bridgePINVOKEProxy.remote.Unit_getTargetPosition(swigCPtr), true);
    return ret;
  }

  public virtual Order getOrder() {
    Order ret = new Order(bridgePINVOKEProxy.remote.Unit_getOrder(swigCPtr), true);
    return ret;
  }

  public virtual Unit getOrderTarget() {
    IntPtr cPtr = bridgePINVOKEProxy.remote.Unit_getOrderTarget(swigCPtr);
    Unit ret = (cPtr == IntPtr.Zero) ? null : new Unit(cPtr, false);
    return ret;
  }

  public virtual int getOrderTimer() {
    int ret = bridgePINVOKEProxy.remote.Unit_getOrderTimer(swigCPtr);
    return ret;
  }

  public virtual Order getSecondaryOrder() {
    Order ret = new Order(bridgePINVOKEProxy.remote.Unit_getSecondaryOrder(swigCPtr), true);
    return ret;
  }

  public virtual Unit getBuildUnit() {
    IntPtr cPtr = bridgePINVOKEProxy.remote.Unit_getBuildUnit(swigCPtr);
    Unit ret = (cPtr == IntPtr.Zero) ? null : new Unit(cPtr, false);
    return ret;
  }

  public virtual UnitType getBuildType() {
    UnitType ret = new UnitType(bridgePINVOKEProxy.remote.Unit_getBuildType(swigCPtr), true);
    return ret;
  }

  public virtual int getRemainingBuildTime() {
    int ret = bridgePINVOKEProxy.remote.Unit_getRemainingBuildTime(swigCPtr);
    return ret;
  }

  public virtual int getRemainingTrainTime() {
    int ret = bridgePINVOKEProxy.remote.Unit_getRemainingTrainTime(swigCPtr);
    return ret;
  }

  public virtual Unit getChild() {
    IntPtr cPtr = bridgePINVOKEProxy.remote.Unit_getChild(swigCPtr);
    Unit ret = (cPtr == IntPtr.Zero) ? null : new Unit(cPtr, false);
    return ret;
  }

  public virtual UnitTypeList getTrainingQueue() {
    UnitTypeList ret = new UnitTypeList(bridgePINVOKEProxy.remote.Unit_getTrainingQueue(swigCPtr), true);
    return ret;
  }

  public virtual Unit getTransport() {
    IntPtr cPtr = bridgePINVOKEProxy.remote.Unit_getTransport(swigCPtr);
    Unit ret = (cPtr == IntPtr.Zero) ? null : new Unit(cPtr, false);
    return ret;
  }

  public virtual UnitPtrList getLoadedUnits() {
    UnitPtrList ret = new UnitPtrList(bridgePINVOKEProxy.remote.Unit_getLoadedUnits(swigCPtr), true);
    return ret;
  }

  public virtual int getInterceptorCount() {
    int ret = bridgePINVOKEProxy.remote.Unit_getInterceptorCount(swigCPtr);
    return ret;
  }

  public virtual int getScarabCount() {
    int ret = bridgePINVOKEProxy.remote.Unit_getScarabCount(swigCPtr);
    return ret;
  }

  public virtual int getSpiderMineCount() {
    int ret = bridgePINVOKEProxy.remote.Unit_getSpiderMineCount(swigCPtr);
    return ret;
  }

  public virtual TechType getTech() {
    TechType ret = new TechType(bridgePINVOKEProxy.remote.Unit_getTech(swigCPtr), true);
    return ret;
  }

  public virtual UpgradeType getUpgrade() {
    UpgradeType ret = new UpgradeType(bridgePINVOKEProxy.remote.Unit_getUpgrade(swigCPtr), true);
    return ret;
  }

  public virtual int getRemainingResearchTime() {
    int ret = bridgePINVOKEProxy.remote.Unit_getRemainingResearchTime(swigCPtr);
    return ret;
  }

  public virtual int getRemainingUpgradeTime() {
    int ret = bridgePINVOKEProxy.remote.Unit_getRemainingUpgradeTime(swigCPtr);
    return ret;
  }

  public virtual Position getRallyPosition() {
    Position ret = new Position(bridgePINVOKEProxy.remote.Unit_getRallyPosition(swigCPtr), true);
    return ret;
  }

  public virtual Unit getRallyUnit() {
    IntPtr cPtr = bridgePINVOKEProxy.remote.Unit_getRallyUnit(swigCPtr);
    Unit ret = (cPtr == IntPtr.Zero) ? null : new Unit(cPtr, false);
    return ret;
  }

  public virtual Unit getAddon() {
    IntPtr cPtr = bridgePINVOKEProxy.remote.Unit_getAddon(swigCPtr);
    Unit ret = (cPtr == IntPtr.Zero) ? null : new Unit(cPtr, false);
    return ret;
  }

  public virtual Unit getHatchery() {
    IntPtr cPtr = bridgePINVOKEProxy.remote.Unit_getHatchery(swigCPtr);
    Unit ret = (cPtr == IntPtr.Zero) ? null : new Unit(cPtr, false);
    return ret;
  }

  public virtual UnitSet getLarva() {
    UnitSet ret = new UnitSet(bridgePINVOKEProxy.remote.Unit_getLarva(swigCPtr), true);
    return ret;
  }

  public virtual int getUpgradeLevel(UpgradeType upgrade) {
    int ret = bridgePINVOKEProxy.remote.Unit_getUpgradeLevel(swigCPtr, UpgradeType.getCPtr(upgrade));
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool exists() {
    bool ret = bridgePINVOKEProxy.remote.Unit_exists(swigCPtr);
    return ret;
  }

  public virtual bool isAccelerating() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isAccelerating(swigCPtr);
    return ret;
  }

  public virtual bool isBeingConstructed() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isBeingConstructed(swigCPtr);
    return ret;
  }

  public virtual bool isBeingHealed() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isBeingHealed(swigCPtr);
    return ret;
  }

  public virtual bool isBlind() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isBlind(swigCPtr);
    return ret;
  }

  public virtual bool isBraking() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isBraking(swigCPtr);
    return ret;
  }

  public virtual bool isBurrowed() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isBurrowed(swigCPtr);
    return ret;
  }

  public virtual bool isCarryingGas() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isCarryingGas(swigCPtr);
    return ret;
  }

  public virtual bool isCarryingMinerals() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isCarryingMinerals(swigCPtr);
    return ret;
  }

  public virtual bool isCloaked() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isCloaked(swigCPtr);
    return ret;
  }

  public virtual bool isCompleted() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isCompleted(swigCPtr);
    return ret;
  }

  public virtual bool isConstructing() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isConstructing(swigCPtr);
    return ret;
  }

  public virtual bool isDefenseMatrixed() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isDefenseMatrixed(swigCPtr);
    return ret;
  }

  public virtual bool isEnsnared() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isEnsnared(swigCPtr);
    return ret;
  }

  public virtual bool isFollowing() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isFollowing(swigCPtr);
    return ret;
  }

  public virtual bool isGatheringGas() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isGatheringGas(swigCPtr);
    return ret;
  }

  public virtual bool isGatheringMinerals() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isGatheringMinerals(swigCPtr);
    return ret;
  }

  public virtual bool isHallucination() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isHallucination(swigCPtr);
    return ret;
  }

  public virtual bool isIdle() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isIdle(swigCPtr);
    return ret;
  }

  public virtual bool isIrradiated() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isIrradiated(swigCPtr);
    return ret;
  }

  public virtual bool isLifted() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isLifted(swigCPtr);
    return ret;
  }

  public virtual bool isLoaded() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isLoaded(swigCPtr);
    return ret;
  }

  public virtual bool isLockedDown() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isLockedDown(swigCPtr);
    return ret;
  }

  public virtual bool isMaelstrommed() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isMaelstrommed(swigCPtr);
    return ret;
  }

  public virtual bool isMorphing() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isMorphing(swigCPtr);
    return ret;
  }

  public virtual bool isMoving() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isMoving(swigCPtr);
    return ret;
  }

  public virtual bool isParasited() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isParasited(swigCPtr);
    return ret;
  }

  public virtual bool isPatrolling() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isPatrolling(swigCPtr);
    return ret;
  }

  public virtual bool isPlagued() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isPlagued(swigCPtr);
    return ret;
  }

  public virtual bool isRepairing() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isRepairing(swigCPtr);
    return ret;
  }

  public virtual bool isResearching() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isResearching(swigCPtr);
    return ret;
  }

  public virtual bool isSelected() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isSelected(swigCPtr);
    return ret;
  }

  public virtual bool isSieged() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isSieged(swigCPtr);
    return ret;
  }

  public virtual bool isStartingAttack() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isStartingAttack(swigCPtr);
    return ret;
  }

  public virtual bool isStasised() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isStasised(swigCPtr);
    return ret;
  }

  public virtual bool isStimmed() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isStimmed(swigCPtr);
    return ret;
  }

  public virtual bool isTraining() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isTraining(swigCPtr);
    return ret;
  }

  public virtual bool isUnderStorm() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isUnderStorm(swigCPtr);
    return ret;
  }

  public virtual bool isUnpowered() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isUnpowered(swigCPtr);
    return ret;
  }

  public virtual bool isUpgrading() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isUpgrading(swigCPtr);
    return ret;
  }

  public virtual bool isVisible() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isVisible(swigCPtr);
    return ret;
  }

  public virtual bool isBeingGathered() {
    bool ret = bridgePINVOKEProxy.remote.Unit_isBeingGathered(swigCPtr);
    return ret;
  }

  public virtual bool attackMove(Position position) {
    bool ret = bridgePINVOKEProxy.remote.Unit_attackMove(swigCPtr, Position.getCPtr(position));
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool attackUnit(Unit target) {
    bool ret = bridgePINVOKEProxy.remote.Unit_attackUnit(swigCPtr, Unit.getCPtr(target));
    return ret;
  }

  public virtual bool rightClick(Position position) {
    bool ret = bridgePINVOKEProxy.remote.Unit_rightClick__SWIG_0(swigCPtr, Position.getCPtr(position));
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool rightClick(Unit target) {
    bool ret = bridgePINVOKEProxy.remote.Unit_rightClick__SWIG_1(swigCPtr, Unit.getCPtr(target));
    return ret;
  }

  public virtual bool train(UnitType type) {
    bool ret = bridgePINVOKEProxy.remote.Unit_train(swigCPtr, UnitType.getCPtr(type));
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool build(TilePosition position, UnitType type) {
    bool ret = bridgePINVOKEProxy.remote.Unit_build(swigCPtr, TilePosition.getCPtr(position), UnitType.getCPtr(type));
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool buildAddon(UnitType type) {
    bool ret = bridgePINVOKEProxy.remote.Unit_buildAddon(swigCPtr, UnitType.getCPtr(type));
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool research(TechType tech) {
    bool ret = bridgePINVOKEProxy.remote.Unit_research(swigCPtr, TechType.getCPtr(tech));
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool upgrade(UpgradeType upgrade) {
    bool ret = bridgePINVOKEProxy.remote.Unit_upgrade(swigCPtr, UpgradeType.getCPtr(upgrade));
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool stop() {
    bool ret = bridgePINVOKEProxy.remote.Unit_stop(swigCPtr);
    return ret;
  }

  public virtual bool holdPosition() {
    bool ret = bridgePINVOKEProxy.remote.Unit_holdPosition(swigCPtr);
    return ret;
  }

  public virtual bool patrol(Position position) {
    bool ret = bridgePINVOKEProxy.remote.Unit_patrol(swigCPtr, Position.getCPtr(position));
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool follow(Unit target) {
    bool ret = bridgePINVOKEProxy.remote.Unit_follow(swigCPtr, Unit.getCPtr(target));
    return ret;
  }

  public virtual bool setRallyPosition(Position target) {
    bool ret = bridgePINVOKEProxy.remote.Unit_setRallyPosition(swigCPtr, Position.getCPtr(target));
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool setRallyUnit(Unit target) {
    bool ret = bridgePINVOKEProxy.remote.Unit_setRallyUnit(swigCPtr, Unit.getCPtr(target));
    return ret;
  }

  public virtual bool repair(Unit target) {
    bool ret = bridgePINVOKEProxy.remote.Unit_repair(swigCPtr, Unit.getCPtr(target));
    return ret;
  }

  public virtual bool returnCargo() {
    bool ret = bridgePINVOKEProxy.remote.Unit_returnCargo(swigCPtr);
    return ret;
  }

  public virtual bool morph(UnitType type) {
    bool ret = bridgePINVOKEProxy.remote.Unit_morph(swigCPtr, UnitType.getCPtr(type));
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool burrow() {
    bool ret = bridgePINVOKEProxy.remote.Unit_burrow(swigCPtr);
    return ret;
  }

  public virtual bool unburrow() {
    bool ret = bridgePINVOKEProxy.remote.Unit_unburrow(swigCPtr);
    return ret;
  }

  public virtual bool siege() {
    bool ret = bridgePINVOKEProxy.remote.Unit_siege(swigCPtr);
    return ret;
  }

  public virtual bool unsiege() {
    bool ret = bridgePINVOKEProxy.remote.Unit_unsiege(swigCPtr);
    return ret;
  }

  public virtual bool cloak() {
    bool ret = bridgePINVOKEProxy.remote.Unit_cloak(swigCPtr);
    return ret;
  }

  public virtual bool decloak() {
    bool ret = bridgePINVOKEProxy.remote.Unit_decloak(swigCPtr);
    return ret;
  }

  public virtual bool lift() {
    bool ret = bridgePINVOKEProxy.remote.Unit_lift(swigCPtr);
    return ret;
  }

  public virtual bool land(TilePosition position) {
    bool ret = bridgePINVOKEProxy.remote.Unit_land(swigCPtr, TilePosition.getCPtr(position));
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool load(Unit target) {
    bool ret = bridgePINVOKEProxy.remote.Unit_load(swigCPtr, Unit.getCPtr(target));
    return ret;
  }

  public virtual bool unload(Unit target) {
    bool ret = bridgePINVOKEProxy.remote.Unit_unload(swigCPtr, Unit.getCPtr(target));
    return ret;
  }

  public virtual bool unloadAll() {
    bool ret = bridgePINVOKEProxy.remote.Unit_unloadAll__SWIG_0(swigCPtr);
    return ret;
  }

  public virtual bool unloadAll(Position position) {
    bool ret = bridgePINVOKEProxy.remote.Unit_unloadAll__SWIG_1(swigCPtr, Position.getCPtr(position));
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool cancelConstruction() {
    bool ret = bridgePINVOKEProxy.remote.Unit_cancelConstruction(swigCPtr);
    return ret;
  }

  public virtual bool haltConstruction() {
    bool ret = bridgePINVOKEProxy.remote.Unit_haltConstruction(swigCPtr);
    return ret;
  }

  public virtual bool cancelMorph() {
    bool ret = bridgePINVOKEProxy.remote.Unit_cancelMorph(swigCPtr);
    return ret;
  }

  public virtual bool cancelTrain() {
    bool ret = bridgePINVOKEProxy.remote.Unit_cancelTrain__SWIG_0(swigCPtr);
    return ret;
  }

  public virtual bool cancelTrain(int slot) {
    bool ret = bridgePINVOKEProxy.remote.Unit_cancelTrain__SWIG_1(swigCPtr, slot);
    return ret;
  }

  public virtual bool cancelAddon() {
    bool ret = bridgePINVOKEProxy.remote.Unit_cancelAddon(swigCPtr);
    return ret;
  }

  public virtual bool cancelResearch() {
    bool ret = bridgePINVOKEProxy.remote.Unit_cancelResearch(swigCPtr);
    return ret;
  }

  public virtual bool cancelUpgrade() {
    bool ret = bridgePINVOKEProxy.remote.Unit_cancelUpgrade(swigCPtr);
    return ret;
  }

  public virtual bool useTech(TechType tech) {
    bool ret = bridgePINVOKEProxy.remote.Unit_useTech__SWIG_0(swigCPtr, TechType.getCPtr(tech));
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool useTech(TechType tech, Position position) {
    bool ret = bridgePINVOKEProxy.remote.Unit_useTech__SWIG_1(swigCPtr, TechType.getCPtr(tech), Position.getCPtr(position));
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

  public virtual bool useTech(TechType tech, Unit target) {
    bool ret = bridgePINVOKEProxy.remote.Unit_useTech__SWIG_2(swigCPtr, TechType.getCPtr(tech), Unit.getCPtr(target));
    if (bridgePINVOKEProxy.remote.SWIGPendingException.Pending) throw bridgePINVOKEProxy.remote.SWIGPendingException.Retrieve();
    return ret;
  }

}

}
